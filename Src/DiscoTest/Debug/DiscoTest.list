
DiscoTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001be0  080088c8  080088c8  000188c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4a8  0800a4a8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4a8  0800a4a8  0001a4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4b0  0800a4b0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4b0  0800a4b0  0001a4b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4b4  0800a4b4  0001a4b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800a4b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e8c  2000001c  0800a4d4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20004ea8  0800a4d4  00024ea8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002841c  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048bc  00000000  00000000  00048468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd0  00000000  00000000  0004cd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c30  00000000  00000000  0004eaf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000050b7  00000000  00000000  00050728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021ceb  00000000  00000000  000557df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a67f  00000000  00000000  000774ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00181b49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f08  00000000  00000000  00181b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080088b0 	.word	0x080088b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	080088b0 	.word	0x080088b0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800050c:	f3bf 8f4f 	dsb	sy
}
 8000510:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000512:	f3bf 8f6f 	isb	sy
}
 8000516:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <SCB_EnableICache+0x48>)
 800051a:	2200      	movs	r2, #0
 800051c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000520:	f3bf 8f4f 	dsb	sy
}
 8000524:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000526:	f3bf 8f6f 	isb	sy
}
 800052a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <SCB_EnableICache+0x48>)
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	4a07      	ldr	r2, [pc, #28]	; (8000550 <SCB_EnableICache+0x48>)
 8000532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000536:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000538:	f3bf 8f4f 	dsb	sy
}
 800053c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800053e:	f3bf 8f6f 	isb	sy
}
 8000542:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800055a:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SCB_EnableDCache+0x84>)
 800055c:	2200      	movs	r2, #0
 800055e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000562:	f3bf 8f4f 	dsb	sy
}
 8000566:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000568:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <SCB_EnableDCache+0x84>)
 800056a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800056e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	0b5b      	lsrs	r3, r3, #13
 8000574:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000578:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	08db      	lsrs	r3, r3, #3
 800057e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000582:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	015a      	lsls	r2, r3, #5
 8000588:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800058c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800058e:	68ba      	ldr	r2, [r7, #8]
 8000590:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000592:	4911      	ldr	r1, [pc, #68]	; (80005d8 <SCB_EnableDCache+0x84>)
 8000594:	4313      	orrs	r3, r2
 8000596:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	1e5a      	subs	r2, r3, #1
 800059e:	60ba      	str	r2, [r7, #8]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d1ef      	bne.n	8000584 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	1e5a      	subs	r2, r3, #1
 80005a8:	60fa      	str	r2, [r7, #12]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d1e5      	bne.n	800057a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005ae:	f3bf 8f4f 	dsb	sy
}
 80005b2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <SCB_EnableDCache+0x84>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <SCB_EnableDCache+0x84>)
 80005ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005be:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005c0:	f3bf 8f4f 	dsb	sy
}
 80005c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005c6:	f3bf 8f6f 	isb	sy
}
 80005ca:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80005e0:	f7ff ff92 	bl	8000508 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80005e4:	f7ff ffb6 	bl	8000554 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f001 fc70 	bl	8001ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f86a 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 fac6 	bl	8000b80 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005f4:	f000 fa46 	bl	8000a84 <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 80005f8:	f000 f938 	bl	800086c <MX_DMA2D_Init>
  MX_FMC_Init();
 80005fc:	f000 fa72 	bl	8000ae4 <MX_FMC_Init>
  MX_LTDC_Init();
 8000600:	f000 f966 	bl	80008d0 <MX_LTDC_Init>
  MX_DCMI_Init();
 8000604:	f000 f8fe 	bl	8000804 <MX_DCMI_Init>
  MX_SAI1_Init();
 8000608:	f000 f9e2 	bl	80009d0 <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */

  BSP_LCD_Init();
 800060c:	f000 ff6c 	bl	80014e8 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FRAME_BUFFER);
 8000610:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000614:	2001      	movs	r0, #1
 8000616:	f000 ffff 	bl	8001618 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 800061a:	2001      	movs	r0, #1
 800061c:	f001 f85c 	bl	80016d8 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8000620:	f001 f93e 	bl	80018a0 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000624:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000628:	f001 f898 	bl	800175c <BSP_LCD_Clear>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800062c:	f005 fb38 	bl	8005ca0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000630:	4a15      	ldr	r2, [pc, #84]	; (8000688 <main+0xac>)
 8000632:	2100      	movs	r1, #0
 8000634:	4815      	ldr	r0, [pc, #84]	; (800068c <main+0xb0>)
 8000636:	f005 fb9d 	bl	8005d74 <osThreadNew>
 800063a:	4603      	mov	r3, r0
 800063c:	4a14      	ldr	r2, [pc, #80]	; (8000690 <main+0xb4>)
 800063e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000640:	4a14      	ldr	r2, [pc, #80]	; (8000694 <main+0xb8>)
 8000642:	2100      	movs	r1, #0
 8000644:	4814      	ldr	r0, [pc, #80]	; (8000698 <main+0xbc>)
 8000646:	f005 fb95 	bl	8005d74 <osThreadNew>
 800064a:	4603      	mov	r3, r0
 800064c:	4a13      	ldr	r2, [pc, #76]	; (800069c <main+0xc0>)
 800064e:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000650:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <main+0xc4>)
 8000652:	2100      	movs	r1, #0
 8000654:	4813      	ldr	r0, [pc, #76]	; (80006a4 <main+0xc8>)
 8000656:	f005 fb8d 	bl	8005d74 <osThreadNew>
 800065a:	4603      	mov	r3, r0
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <main+0xcc>)
 800065e:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8000660:	4a12      	ldr	r2, [pc, #72]	; (80006ac <main+0xd0>)
 8000662:	2100      	movs	r1, #0
 8000664:	4812      	ldr	r0, [pc, #72]	; (80006b0 <main+0xd4>)
 8000666:	f005 fb85 	bl	8005d74 <osThreadNew>
 800066a:	4603      	mov	r3, r0
 800066c:	4a11      	ldr	r2, [pc, #68]	; (80006b4 <main+0xd8>)
 800066e:	6013      	str	r3, [r2, #0]

  /* creation of myTask05 */
  myTask05Handle = osThreadNew(StartTask05, NULL, &myTask05_attributes);
 8000670:	4a11      	ldr	r2, [pc, #68]	; (80006b8 <main+0xdc>)
 8000672:	2100      	movs	r1, #0
 8000674:	4811      	ldr	r0, [pc, #68]	; (80006bc <main+0xe0>)
 8000676:	f005 fb7d 	bl	8005d74 <osThreadNew>
 800067a:	4603      	mov	r3, r0
 800067c:	4a10      	ldr	r2, [pc, #64]	; (80006c0 <main+0xe4>)
 800067e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000680:	f005 fb42 	bl	8005d08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000684:	e7fe      	b.n	8000684 <main+0xa8>
 8000686:	bf00      	nop
 8000688:	0800891c 	.word	0x0800891c
 800068c:	08000c89 	.word	0x08000c89
 8000690:	20004ab4 	.word	0x20004ab4
 8000694:	08008940 	.word	0x08008940
 8000698:	08000cb1 	.word	0x08000cb1
 800069c:	20004c3c 	.word	0x20004c3c
 80006a0:	08008964 	.word	0x08008964
 80006a4:	08000cc1 	.word	0x08000cc1
 80006a8:	20004c40 	.word	0x20004c40
 80006ac:	08008988 	.word	0x08008988
 80006b0:	08000cd1 	.word	0x08000cd1
 80006b4:	20004abc 	.word	0x20004abc
 80006b8:	080089ac 	.word	0x080089ac
 80006bc:	08000ce1 	.word	0x08000ce1
 80006c0:	20004ab8 	.word	0x20004ab8

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b0b4      	sub	sp, #208	; 0xd0
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f008 f8e4 	bl	80088a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	2284      	movs	r2, #132	; 0x84
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f008 f8d5 	bl	80088a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f6:	4b40      	ldr	r3, [pc, #256]	; (80007f8 <SystemClock_Config+0x134>)
 80006f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fa:	4a3f      	ldr	r2, [pc, #252]	; (80007f8 <SystemClock_Config+0x134>)
 80006fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000700:	6413      	str	r3, [r2, #64]	; 0x40
 8000702:	4b3d      	ldr	r3, [pc, #244]	; (80007f8 <SystemClock_Config+0x134>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070e:	4b3b      	ldr	r3, [pc, #236]	; (80007fc <SystemClock_Config+0x138>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a3a      	ldr	r2, [pc, #232]	; (80007fc <SystemClock_Config+0x138>)
 8000714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000718:	6013      	str	r3, [r2, #0]
 800071a:	4b38      	ldr	r3, [pc, #224]	; (80007fc <SystemClock_Config+0x138>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000726:	2301      	movs	r3, #1
 8000728:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000730:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800073e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000742:	2319      	movs	r3, #25
 8000744:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000748:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800074c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000756:	2302      	movs	r3, #2
 8000758:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000760:	4618      	mov	r0, r3
 8000762:	f002 fe77 	bl	8003454 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800076c:	f000 fad2 	bl	8000d14 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000770:	f002 fe20 	bl	80033b4 <HAL_PWREx_EnableOverDrive>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800077a:	f000 facb 	bl	8000d14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077e:	230f      	movs	r3, #15
 8000780:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000784:	2302      	movs	r3, #2
 8000786:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000790:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007a4:	2107      	movs	r1, #7
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 f8f8 	bl	800399c <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80007b2:	f000 faaf 	bl	8000d14 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <SystemClock_Config+0x13c>)
 80007b8:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SAI1;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80007ba:	23c0      	movs	r3, #192	; 0xc0
 80007bc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80007be:	2302      	movs	r3, #2
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80007ca:	2301      	movs	r3, #1
 80007cc:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80007ce:	2300      	movs	r3, #0
 80007d0:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 80007d2:	2300      	movs	r3, #0
 80007d4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007d6:	2300      	movs	r3, #0
 80007d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007da:	f107 0308 	add.w	r3, r7, #8
 80007de:	4618      	mov	r0, r3
 80007e0:	f003 fae4 	bl	8003dac <HAL_RCCEx_PeriphCLKConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x12a>
  {
    Error_Handler();
 80007ea:	f000 fa93 	bl	8000d14 <Error_Handler>
  }
}
 80007ee:	bf00      	nop
 80007f0:	37d0      	adds	r7, #208	; 0xd0
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000
 8000800:	00080048 	.word	0x00080048

08000804 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_DCMI_Init+0x60>)
 800080a:	4a17      	ldr	r2, [pc, #92]	; (8000868 <MX_DCMI_Init+0x64>)
 800080c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_DCMI_Init+0x60>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_DCMI_Init+0x60>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_DCMI_Init+0x60>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000820:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_DCMI_Init+0x60>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_DCMI_Init+0x60>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800082c:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <MX_DCMI_Init+0x60>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_DCMI_Init+0x60>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <MX_DCMI_Init+0x60>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_DCMI_Init+0x60>)
 8000840:	2200      	movs	r2, #0
 8000842:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <MX_DCMI_Init+0x60>)
 8000846:	2200      	movs	r2, #0
 8000848:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_DCMI_Init+0x60>)
 800084c:	2200      	movs	r2, #0
 800084e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_DCMI_Init+0x60>)
 8000852:	f001 fc6f 	bl	8002134 <HAL_DCMI_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 800085c:	f000 fa5a 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20004b68 	.word	0x20004b68
 8000868:	50050000 	.word	0x50050000

0800086c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_DMA2D_Init+0x5c>)
 8000872:	4a16      	ldr	r2, [pc, #88]	; (80008cc <MX_DMA2D_Init+0x60>)
 8000874:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_DMA2D_Init+0x5c>)
 8000878:	2200      	movs	r2, #0
 800087a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_DMA2D_Init+0x5c>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_DMA2D_Init+0x5c>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_DMA2D_Init+0x5c>)
 800088a:	2200      	movs	r2, #0
 800088c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_DMA2D_Init+0x5c>)
 8000890:	2200      	movs	r2, #0
 8000892:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_DMA2D_Init+0x5c>)
 8000896:	2200      	movs	r2, #0
 8000898:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_DMA2D_Init+0x5c>)
 800089c:	2200      	movs	r2, #0
 800089e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008a0:	4809      	ldr	r0, [pc, #36]	; (80008c8 <MX_DMA2D_Init+0x5c>)
 80008a2:	f001 fe7f 	bl	80025a4 <HAL_DMA2D_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008ac:	f000 fa32 	bl	8000d14 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008b0:	2101      	movs	r1, #1
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_DMA2D_Init+0x5c>)
 80008b4:	f001 ffd4 	bl	8002860 <HAL_DMA2D_ConfigLayer>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008be:	f000 fa29 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20004c44 	.word	0x20004c44
 80008cc:	4002b000 	.word	0x4002b000

080008d0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08e      	sub	sp, #56	; 0x38
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2234      	movs	r2, #52	; 0x34
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f007 ffdf 	bl	80088a0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80008e2:	4b39      	ldr	r3, [pc, #228]	; (80009c8 <MX_LTDC_Init+0xf8>)
 80008e4:	4a39      	ldr	r2, [pc, #228]	; (80009cc <MX_LTDC_Init+0xfc>)
 80008e6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80008e8:	4b37      	ldr	r3, [pc, #220]	; (80009c8 <MX_LTDC_Init+0xf8>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008ee:	4b36      	ldr	r3, [pc, #216]	; (80009c8 <MX_LTDC_Init+0xf8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008f4:	4b34      	ldr	r3, [pc, #208]	; (80009c8 <MX_LTDC_Init+0xf8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008fa:	4b33      	ldr	r3, [pc, #204]	; (80009c8 <MX_LTDC_Init+0xf8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000900:	4b31      	ldr	r3, [pc, #196]	; (80009c8 <MX_LTDC_Init+0xf8>)
 8000902:	2228      	movs	r2, #40	; 0x28
 8000904:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000906:	4b30      	ldr	r3, [pc, #192]	; (80009c8 <MX_LTDC_Init+0xf8>)
 8000908:	2209      	movs	r2, #9
 800090a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 113;
 800090c:	4b2e      	ldr	r3, [pc, #184]	; (80009c8 <MX_LTDC_Init+0xf8>)
 800090e:	2271      	movs	r2, #113	; 0x71
 8000910:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000912:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <MX_LTDC_Init+0xf8>)
 8000914:	220b      	movs	r2, #11
 8000916:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 593;
 8000918:	4b2b      	ldr	r3, [pc, #172]	; (80009c8 <MX_LTDC_Init+0xf8>)
 800091a:	f240 2251 	movw	r2, #593	; 0x251
 800091e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000920:	4b29      	ldr	r3, [pc, #164]	; (80009c8 <MX_LTDC_Init+0xf8>)
 8000922:	f240 121b 	movw	r2, #283	; 0x11b
 8000926:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 625;
 8000928:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <MX_LTDC_Init+0xf8>)
 800092a:	f240 2271 	movw	r2, #625	; 0x271
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000930:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <MX_LTDC_Init+0xf8>)
 8000932:	f240 121d 	movw	r2, #285	; 0x11d
 8000936:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000938:	4b23      	ldr	r3, [pc, #140]	; (80009c8 <MX_LTDC_Init+0xf8>)
 800093a:	2200      	movs	r2, #0
 800093c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000940:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <MX_LTDC_Init+0xf8>)
 8000942:	2200      	movs	r2, #0
 8000944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <MX_LTDC_Init+0xf8>)
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000950:	481d      	ldr	r0, [pc, #116]	; (80009c8 <MX_LTDC_Init+0xf8>)
 8000952:	f002 fa79 	bl	8002e48 <HAL_LTDC_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800095c:	f000 f9da 	bl	8000d14 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000964:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000968:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800096e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000972:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000974:	2302      	movs	r3, #2
 8000976:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000984:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000986:	2305      	movs	r3, #5
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	4619      	mov	r1, r3
 80009ae:	4806      	ldr	r0, [pc, #24]	; (80009c8 <MX_LTDC_Init+0xf8>)
 80009b0:	f002 fb1a 	bl	8002fe8 <HAL_LTDC_ConfigLayer>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 80009ba:	f000 f9ab 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	3738      	adds	r7, #56	; 0x38
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20004ac0 	.word	0x20004ac0
 80009cc:	40016800 	.word	0x40016800

080009d0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80009d4:	4b28      	ldr	r3, [pc, #160]	; (8000a78 <MX_SAI1_Init+0xa8>)
 80009d6:	4a29      	ldr	r2, [pc, #164]	; (8000a7c <MX_SAI1_Init+0xac>)
 80009d8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80009da:	4b27      	ldr	r3, [pc, #156]	; (8000a78 <MX_SAI1_Init+0xa8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80009e0:	4b25      	ldr	r3, [pc, #148]	; (8000a78 <MX_SAI1_Init+0xa8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80009e6:	4b24      	ldr	r3, [pc, #144]	; (8000a78 <MX_SAI1_Init+0xa8>)
 80009e8:	2240      	movs	r2, #64	; 0x40
 80009ea:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80009ec:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <MX_SAI1_Init+0xa8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80009f2:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <MX_SAI1_Init+0xa8>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80009f8:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <MX_SAI1_Init+0xa8>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80009fe:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <MX_SAI1_Init+0xa8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000a04:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <MX_SAI1_Init+0xa8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_SAI1_Init+0xa8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <MX_SAI1_Init+0xa8>)
 8000a12:	4a1b      	ldr	r2, [pc, #108]	; (8000a80 <MX_SAI1_Init+0xb0>)
 8000a14:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_SAI1_Init+0xa8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_SAI1_Init+0xa8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <MX_SAI1_Init+0xa8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000a28:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <MX_SAI1_Init+0xa8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_SAI1_Init+0xa8>)
 8000a30:	2208      	movs	r2, #8
 8000a32:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000a34:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <MX_SAI1_Init+0xa8>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_SAI1_Init+0xa8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000a40:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <MX_SAI1_Init+0xa8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_SAI1_Init+0xa8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <MX_SAI1_Init+0xa8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_SAI1_Init+0xa8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <MX_SAI1_Init+0xa8>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_SAI1_Init+0xa8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_SAI1_Init+0xa8>)
 8000a66:	f003 fed5 	bl	8004814 <HAL_SAI_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8000a70:	f000 f950 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20004c84 	.word	0x20004c84
 8000a7c:	40015804 	.word	0x40015804
 8000a80:	0002ee00 	.word	0x0002ee00

08000a84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_USART1_UART_Init+0x58>)
 8000a8a:	4a15      	ldr	r2, [pc, #84]	; (8000ae0 <MX_USART1_UART_Init+0x5c>)
 8000a8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	; (8000adc <MX_USART1_UART_Init+0x58>)
 8000a90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_USART1_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_USART1_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_USART1_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_USART1_UART_Init+0x58>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_USART1_UART_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_USART1_UART_Init+0x58>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <MX_USART1_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_USART1_UART_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_USART1_UART_Init+0x58>)
 8000ac8:	f004 fbb8 	bl	800523c <HAL_UART_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ad2:	f000 f91f 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20004bb8 	.word	0x20004bb8
 8000ae0:	40011000 	.word	0x40011000

08000ae4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
 8000af8:	615a      	str	r2, [r3, #20]
 8000afa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <MX_FMC_Init+0x94>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	; (8000b7c <MX_FMC_Init+0x98>)
 8000b00:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <MX_FMC_Init+0x94>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <MX_FMC_Init+0x94>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <MX_FMC_Init+0x94>)
 8000b10:	2204      	movs	r2, #4
 8000b12:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <MX_FMC_Init+0x94>)
 8000b16:	2210      	movs	r2, #16
 8000b18:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <MX_FMC_Init+0x94>)
 8000b1c:	2240      	movs	r2, #64	; 0x40
 8000b1e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <MX_FMC_Init+0x94>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <MX_FMC_Init+0x94>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <MX_FMC_Init+0x94>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000b34:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <MX_FMC_Init+0x94>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_FMC_Init+0x94>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000b44:	2306      	movs	r3, #6
 8000b46:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b48:	2304      	movs	r3, #4
 8000b4a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8000b4c:	2306      	movs	r3, #6
 8000b4e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8000b50:	2302      	movs	r3, #2
 8000b52:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b54:	2302      	movs	r3, #2
 8000b56:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_FMC_Init+0x94>)
 8000b62:	f004 f80d 	bl	8004b80 <HAL_SDRAM_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_FMC_Init+0x8c>
  {
    Error_Handler( );
 8000b6c:	f000 f8d2 	bl	8000d14 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b70:	bf00      	nop
 8000b72:	3720      	adds	r7, #32
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20004d08 	.word	0x20004d08
 8000b7c:	a0000140 	.word	0xa0000140

08000b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b08b      	sub	sp, #44	; 0x2c
 8000b84:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b86:	4b3f      	ldr	r3, [pc, #252]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a3e      	ldr	r2, [pc, #248]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000b8c:	f043 0310 	orr.w	r3, r3, #16
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b3c      	ldr	r3, [pc, #240]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0310 	and.w	r3, r3, #16
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	4b39      	ldr	r3, [pc, #228]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a38      	ldr	r2, [pc, #224]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b36      	ldr	r3, [pc, #216]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	623b      	str	r3, [r7, #32]
 8000bb4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	4b33      	ldr	r3, [pc, #204]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a32      	ldr	r2, [pc, #200]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b30      	ldr	r3, [pc, #192]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61fb      	str	r3, [r7, #28]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bce:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a2c      	ldr	r2, [pc, #176]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be2:	61bb      	str	r3, [r7, #24]
 8000be4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be6:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a26      	ldr	r2, [pc, #152]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000bec:	f043 0308 	orr.w	r3, r3, #8
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a20      	ldr	r2, [pc, #128]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c16:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a1a      	ldr	r2, [pc, #104]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a14      	ldr	r2, [pc, #80]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000c34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000c4c:	f043 0320 	orr.w	r3, r3, #32
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0320 	and.w	r3, r3, #32
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_GPIO_Init+0x104>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]

}
 8000c76:	bf00      	nop
 8000c78:	372c      	adds	r7, #44	; 0x2c
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800

08000c88 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8000c90:	4806      	ldr	r0, [pc, #24]	; (8000cac <StartDefaultTask+0x24>)
 8000c92:	f000 fd31 	bl	80016f8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 136, 96, 136);
 8000c96:	2388      	movs	r3, #136	; 0x88
 8000c98:	2260      	movs	r2, #96	; 0x60
 8000c9a:	2188      	movs	r1, #136	; 0x88
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f000 fd85 	bl	80017ac <BSP_LCD_FillRect>
    osDelay(200);
 8000ca2:	20c8      	movs	r0, #200	; 0xc8
 8000ca4:	f005 f90c 	bl	8005ec0 <osDelay>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8000ca8:	e7f2      	b.n	8000c90 <StartDefaultTask+0x8>
 8000caa:	bf00      	nop
 8000cac:	ff000080 	.word	0xff000080

08000cb0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f005 f901 	bl	8005ec0 <osDelay>
 8000cbe:	e7fb      	b.n	8000cb8 <StartTask02+0x8>

08000cc0 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f005 f8f9 	bl	8005ec0 <osDelay>
 8000cce:	e7fb      	b.n	8000cc8 <StartTask03+0x8>

08000cd0 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f005 f8f1 	bl	8005ec0 <osDelay>
 8000cde:	e7fb      	b.n	8000cd8 <StartTask04+0x8>

08000ce0 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f005 f8e9 	bl	8005ec0 <osDelay>
 8000cee:	e7fb      	b.n	8000ce8 <StartTask05+0x8>

08000cf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d101      	bne.n	8000d06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d02:	f001 f8f1 	bl	8001ee8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40010000 	.word	0x40010000

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <Error_Handler+0x8>
	...

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	4a10      	ldr	r2, [pc, #64]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d30:	6413      	str	r3, [r2, #64]	; 0x40
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d48:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	210f      	movs	r1, #15
 8000d5a:	f06f 0001 	mvn.w	r0, #1
 8000d5e:	f001 f9bf 	bl	80020e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800

08000d70 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	; 0x38
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a51      	ldr	r2, [pc, #324]	; (8000ed4 <HAL_DCMI_MspInit+0x164>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	f040 809b 	bne.w	8000eca <HAL_DCMI_MspInit+0x15a>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000d94:	4b50      	ldr	r3, [pc, #320]	; (8000ed8 <HAL_DCMI_MspInit+0x168>)
 8000d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d98:	4a4f      	ldr	r2, [pc, #316]	; (8000ed8 <HAL_DCMI_MspInit+0x168>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	6353      	str	r3, [r2, #52]	; 0x34
 8000da0:	4b4d      	ldr	r3, [pc, #308]	; (8000ed8 <HAL_DCMI_MspInit+0x168>)
 8000da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	623b      	str	r3, [r7, #32]
 8000daa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dac:	4b4a      	ldr	r3, [pc, #296]	; (8000ed8 <HAL_DCMI_MspInit+0x168>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	4a49      	ldr	r2, [pc, #292]	; (8000ed8 <HAL_DCMI_MspInit+0x168>)
 8000db2:	f043 0310 	orr.w	r3, r3, #16
 8000db6:	6313      	str	r3, [r2, #48]	; 0x30
 8000db8:	4b47      	ldr	r3, [pc, #284]	; (8000ed8 <HAL_DCMI_MspInit+0x168>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	f003 0310 	and.w	r3, r3, #16
 8000dc0:	61fb      	str	r3, [r7, #28]
 8000dc2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc4:	4b44      	ldr	r3, [pc, #272]	; (8000ed8 <HAL_DCMI_MspInit+0x168>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	4a43      	ldr	r2, [pc, #268]	; (8000ed8 <HAL_DCMI_MspInit+0x168>)
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd0:	4b41      	ldr	r3, [pc, #260]	; (8000ed8 <HAL_DCMI_MspInit+0x168>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	61bb      	str	r3, [r7, #24]
 8000dda:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ddc:	4b3e      	ldr	r3, [pc, #248]	; (8000ed8 <HAL_DCMI_MspInit+0x168>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de0:	4a3d      	ldr	r2, [pc, #244]	; (8000ed8 <HAL_DCMI_MspInit+0x168>)
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	6313      	str	r3, [r2, #48]	; 0x30
 8000de8:	4b3b      	ldr	r3, [pc, #236]	; (8000ed8 <HAL_DCMI_MspInit+0x168>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000df4:	4b38      	ldr	r3, [pc, #224]	; (8000ed8 <HAL_DCMI_MspInit+0x168>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	4a37      	ldr	r2, [pc, #220]	; (8000ed8 <HAL_DCMI_MspInit+0x168>)
 8000dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000e00:	4b35      	ldr	r3, [pc, #212]	; (8000ed8 <HAL_DCMI_MspInit+0x168>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b32      	ldr	r3, [pc, #200]	; (8000ed8 <HAL_DCMI_MspInit+0x168>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	4a31      	ldr	r2, [pc, #196]	; (8000ed8 <HAL_DCMI_MspInit+0x168>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	6313      	str	r3, [r2, #48]	; 0x30
 8000e18:	4b2f      	ldr	r3, [pc, #188]	; (8000ed8 <HAL_DCMI_MspInit+0x168>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
    PA10     ------> DCMI_D1
    PA9     ------> DCMI_D0
    PA4     ------> DCMI_HSYNC
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_6;
 8000e24:	2343      	movs	r3, #67	; 0x43
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e34:	230d      	movs	r3, #13
 8000e36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4827      	ldr	r0, [pc, #156]	; (8000edc <HAL_DCMI_MspInit+0x16c>)
 8000e40:	f001 fe3c 	bl	8002abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e56:	230d      	movs	r3, #13
 8000e58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5e:	4619      	mov	r1, r3
 8000e60:	481f      	ldr	r0, [pc, #124]	; (8000ee0 <HAL_DCMI_MspInit+0x170>)
 8000e62:	f001 fe2b 	bl	8002abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e78:	230d      	movs	r3, #13
 8000e7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e80:	4619      	mov	r1, r3
 8000e82:	4818      	ldr	r0, [pc, #96]	; (8000ee4 <HAL_DCMI_MspInit+0x174>)
 8000e84:	f001 fe1a 	bl	8002abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e88:	2330      	movs	r3, #48	; 0x30
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e98:	230d      	movs	r3, #13
 8000e9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4811      	ldr	r0, [pc, #68]	; (8000ee8 <HAL_DCMI_MspInit+0x178>)
 8000ea4:	f001 fe0a 	bl	8002abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_4|GPIO_PIN_6;
 8000ea8:	f44f 63ca 	mov.w	r3, #1616	; 0x650
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000eba:	230d      	movs	r3, #13
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4809      	ldr	r0, [pc, #36]	; (8000eec <HAL_DCMI_MspInit+0x17c>)
 8000ec6:	f001 fdf9 	bl	8002abc <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	3738      	adds	r7, #56	; 0x38
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	50050000 	.word	0x50050000
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40020400 	.word	0x40020400
 8000ee4:	40020800 	.word	0x40020800
 8000ee8:	40022000 	.word	0x40022000
 8000eec:	40020000 	.word	0x40020000

08000ef0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <HAL_DMA2D_MspInit+0x38>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d10b      	bne.n	8000f1a <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_DMA2D_MspInit+0x3c>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a09      	ldr	r2, [pc, #36]	; (8000f2c <HAL_DMA2D_MspInit+0x3c>)
 8000f08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <HAL_DMA2D_MspInit+0x3c>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	4002b000 	.word	0x4002b000
 8000f2c:	40023800 	.word	0x40023800

08000f30 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b090      	sub	sp, #64	; 0x40
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a76      	ldr	r2, [pc, #472]	; (8001128 <HAL_LTDC_MspInit+0x1f8>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	f040 80e6 	bne.w	8001120 <HAL_LTDC_MspInit+0x1f0>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f54:	4b75      	ldr	r3, [pc, #468]	; (800112c <HAL_LTDC_MspInit+0x1fc>)
 8000f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f58:	4a74      	ldr	r2, [pc, #464]	; (800112c <HAL_LTDC_MspInit+0x1fc>)
 8000f5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f5e:	6453      	str	r3, [r2, #68]	; 0x44
 8000f60:	4b72      	ldr	r3, [pc, #456]	; (800112c <HAL_LTDC_MspInit+0x1fc>)
 8000f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	4b6f      	ldr	r3, [pc, #444]	; (800112c <HAL_LTDC_MspInit+0x1fc>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	4a6e      	ldr	r2, [pc, #440]	; (800112c <HAL_LTDC_MspInit+0x1fc>)
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	6313      	str	r3, [r2, #48]	; 0x30
 8000f78:	4b6c      	ldr	r3, [pc, #432]	; (800112c <HAL_LTDC_MspInit+0x1fc>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f84:	4b69      	ldr	r3, [pc, #420]	; (800112c <HAL_LTDC_MspInit+0x1fc>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	4a68      	ldr	r2, [pc, #416]	; (800112c <HAL_LTDC_MspInit+0x1fc>)
 8000f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f90:	4b66      	ldr	r3, [pc, #408]	; (800112c <HAL_LTDC_MspInit+0x1fc>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f98:	623b      	str	r3, [r7, #32]
 8000f9a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9c:	4b63      	ldr	r3, [pc, #396]	; (800112c <HAL_LTDC_MspInit+0x1fc>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	4a62      	ldr	r2, [pc, #392]	; (800112c <HAL_LTDC_MspInit+0x1fc>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa8:	4b60      	ldr	r3, [pc, #384]	; (800112c <HAL_LTDC_MspInit+0x1fc>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	61fb      	str	r3, [r7, #28]
 8000fb2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000fb4:	4b5d      	ldr	r3, [pc, #372]	; (800112c <HAL_LTDC_MspInit+0x1fc>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	4a5c      	ldr	r2, [pc, #368]	; (800112c <HAL_LTDC_MspInit+0x1fc>)
 8000fba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc0:	4b5a      	ldr	r3, [pc, #360]	; (800112c <HAL_LTDC_MspInit+0x1fc>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fc8:	61bb      	str	r3, [r7, #24]
 8000fca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fcc:	4b57      	ldr	r3, [pc, #348]	; (800112c <HAL_LTDC_MspInit+0x1fc>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a56      	ldr	r2, [pc, #344]	; (800112c <HAL_LTDC_MspInit+0x1fc>)
 8000fd2:	f043 0308 	orr.w	r3, r3, #8
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd8:	4b54      	ldr	r3, [pc, #336]	; (800112c <HAL_LTDC_MspInit+0x1fc>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000fe4:	4b51      	ldr	r3, [pc, #324]	; (800112c <HAL_LTDC_MspInit+0x1fc>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	4a50      	ldr	r2, [pc, #320]	; (800112c <HAL_LTDC_MspInit+0x1fc>)
 8000fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fee:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff0:	4b4e      	ldr	r3, [pc, #312]	; (800112c <HAL_LTDC_MspInit+0x1fc>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffc:	4b4b      	ldr	r3, [pc, #300]	; (800112c <HAL_LTDC_MspInit+0x1fc>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	4a4a      	ldr	r2, [pc, #296]	; (800112c <HAL_LTDC_MspInit+0x1fc>)
 8001002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001006:	6313      	str	r3, [r2, #48]	; 0x30
 8001008:	4b48      	ldr	r3, [pc, #288]	; (800112c <HAL_LTDC_MspInit+0x1fc>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> LTDC_R6
    PI14     ------> LTDC_CLK
    PG6     ------> LTDC_R7
    PH9     ------> LTDC_R3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001014:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001026:	230e      	movs	r3, #14
 8001028:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800102e:	4619      	mov	r1, r3
 8001030:	483f      	ldr	r0, [pc, #252]	; (8001130 <HAL_LTDC_MspInit+0x200>)
 8001032:	f001 fd43 	bl	8002abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_6;
 8001036:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001048:	230e      	movs	r3, #14
 800104a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800104c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001050:	4619      	mov	r1, r3
 8001052:	4838      	ldr	r0, [pc, #224]	; (8001134 <HAL_LTDC_MspInit+0x204>)
 8001054:	f001 fd32 	bl	8002abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_8;
 8001058:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800106a:	230e      	movs	r3, #14
 800106c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001072:	4619      	mov	r1, r3
 8001074:	4830      	ldr	r0, [pc, #192]	; (8001138 <HAL_LTDC_MspInit+0x208>)
 8001076:	f001 fd21 	bl	8002abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
 800107a:	23b0      	movs	r3, #176	; 0xb0
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800108a:	230e      	movs	r3, #14
 800108c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800108e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001092:	4619      	mov	r1, r3
 8001094:	4829      	ldr	r0, [pc, #164]	; (800113c <HAL_LTDC_MspInit+0x20c>)
 8001096:	f001 fd11 	bl	8002abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10;
 800109a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010ac:	2309      	movs	r3, #9
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b4:	4619      	mov	r1, r3
 80010b6:	481f      	ldr	r0, [pc, #124]	; (8001134 <HAL_LTDC_MspInit+0x204>)
 80010b8:	f001 fd00 	bl	8002abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010bc:	2308      	movs	r3, #8
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010cc:	230e      	movs	r3, #14
 80010ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d4:	4619      	mov	r1, r3
 80010d6:	481a      	ldr	r0, [pc, #104]	; (8001140 <HAL_LTDC_MspInit+0x210>)
 80010d8:	f001 fcf0 	bl	8002abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_0
 80010dc:	f244 6303 	movw	r3, #17923	; 0x4603
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010ee:	230e      	movs	r3, #14
 80010f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f6:	4619      	mov	r1, r3
 80010f8:	4812      	ldr	r0, [pc, #72]	; (8001144 <HAL_LTDC_MspInit+0x214>)
 80010fa:	f001 fcdf 	bl	8002abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_9;
 80010fe:	f44f 4322 	mov.w	r3, #41472	; 0xa200
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001110:	230e      	movs	r3, #14
 8001112:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001118:	4619      	mov	r1, r3
 800111a:	480b      	ldr	r0, [pc, #44]	; (8001148 <HAL_LTDC_MspInit+0x218>)
 800111c:	f001 fcce 	bl	8002abc <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001120:	bf00      	nop
 8001122:	3740      	adds	r7, #64	; 0x40
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40016800 	.word	0x40016800
 800112c:	40023800 	.word	0x40023800
 8001130:	40020400 	.word	0x40020400
 8001134:	40021800 	.word	0x40021800
 8001138:	40020000 	.word	0x40020000
 800113c:	40022800 	.word	0x40022800
 8001140:	40020c00 	.word	0x40020c00
 8001144:	40022000 	.word	0x40022000
 8001148:	40021c00 	.word	0x40021c00

0800114c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <HAL_UART_MspInit+0x7c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d127      	bne.n	80011be <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_UART_MspInit+0x80>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	4a16      	ldr	r2, [pc, #88]	; (80011cc <HAL_UART_MspInit+0x80>)
 8001174:	f043 0310 	orr.w	r3, r3, #16
 8001178:	6453      	str	r3, [r2, #68]	; 0x44
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <HAL_UART_MspInit+0x80>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f003 0310 	and.w	r3, r3, #16
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_UART_MspInit+0x80>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a10      	ldr	r2, [pc, #64]	; (80011cc <HAL_UART_MspInit+0x80>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <HAL_UART_MspInit+0x80>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800119e:	23c0      	movs	r3, #192	; 0xc0
 80011a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011ae:	2307      	movs	r3, #7
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	; (80011d0 <HAL_UART_MspInit+0x84>)
 80011ba:	f001 fc7f 	bl	8002abc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	; 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40011000 	.word	0x40011000
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020400 	.word	0x40020400

080011d4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80011e8:	4b33      	ldr	r3, [pc, #204]	; (80012b8 <HAL_FMC_MspInit+0xe4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d15e      	bne.n	80012ae <HAL_FMC_MspInit+0xda>
    return;
  }
  FMC_Initialized = 1;
 80011f0:	4b31      	ldr	r3, [pc, #196]	; (80012b8 <HAL_FMC_MspInit+0xe4>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80011f6:	4b31      	ldr	r3, [pc, #196]	; (80012bc <HAL_FMC_MspInit+0xe8>)
 80011f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fa:	4a30      	ldr	r2, [pc, #192]	; (80012bc <HAL_FMC_MspInit+0xe8>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6393      	str	r3, [r2, #56]	; 0x38
 8001202:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <HAL_FMC_MspInit+0xe8>)
 8001204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 800120e:	f248 1333 	movw	r3, #33075	; 0x8133
 8001212:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001220:	230c      	movs	r3, #12
 8001222:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	4619      	mov	r1, r3
 8001228:	4825      	ldr	r0, [pc, #148]	; (80012c0 <HAL_FMC_MspInit+0xec>)
 800122a:	f001 fc47 	bl	8002abc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 800122e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001232:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001240:	230c      	movs	r3, #12
 8001242:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4619      	mov	r1, r3
 8001248:	481e      	ldr	r0, [pc, #120]	; (80012c4 <HAL_FMC_MspInit+0xf0>)
 800124a:	f001 fc37 	bl	8002abc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800124e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001252:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001260:	230c      	movs	r3, #12
 8001262:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	4619      	mov	r1, r3
 8001268:	4817      	ldr	r0, [pc, #92]	; (80012c8 <HAL_FMC_MspInit+0xf4>)
 800126a:	f001 fc27 	bl	8002abc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2;
 800126e:	232c      	movs	r3, #44	; 0x2c
 8001270:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800127e:	230c      	movs	r3, #12
 8001280:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	4619      	mov	r1, r3
 8001286:	4811      	ldr	r0, [pc, #68]	; (80012cc <HAL_FMC_MspInit+0xf8>)
 8001288:	f001 fc18 	bl	8002abc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
 800128c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001290:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800129e:	230c      	movs	r3, #12
 80012a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4619      	mov	r1, r3
 80012a6:	480a      	ldr	r0, [pc, #40]	; (80012d0 <HAL_FMC_MspInit+0xfc>)
 80012a8:	f001 fc08 	bl	8002abc <HAL_GPIO_Init>
 80012ac:	e000      	b.n	80012b0 <HAL_FMC_MspInit+0xdc>
    return;
 80012ae:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000038 	.word	0x20000038
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40021800 	.word	0x40021800
 80012c4:	40020c00 	.word	0x40020c00
 80012c8:	40021400 	.word	0x40021400
 80012cc:	40021c00 	.word	0x40021c00
 80012d0:	40021000 	.word	0x40021000

080012d4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80012dc:	f7ff ff7a 	bl	80011d4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a1d      	ldr	r2, [pc, #116]	; (800136c <HAL_SAI_MspInit+0x84>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d134      	bne.n	8001364 <HAL_SAI_MspInit+0x7c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80012fa:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <HAL_SAI_MspInit+0x88>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10b      	bne.n	800131a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <HAL_SAI_MspInit+0x8c>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	4a1b      	ldr	r2, [pc, #108]	; (8001374 <HAL_SAI_MspInit+0x8c>)
 8001308:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800130c:	6453      	str	r3, [r2, #68]	; 0x44
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_SAI_MspInit+0x8c>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <HAL_SAI_MspInit+0x88>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	4a13      	ldr	r2, [pc, #76]	; (8001370 <HAL_SAI_MspInit+0x88>)
 8001322:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001324:	2330      	movs	r3, #48	; 0x30
 8001326:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001334:	2306      	movs	r3, #6
 8001336:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	4619      	mov	r1, r3
 800133e:	480e      	ldr	r0, [pc, #56]	; (8001378 <HAL_SAI_MspInit+0x90>)
 8001340:	f001 fbbc 	bl	8002abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001344:	2340      	movs	r3, #64	; 0x40
 8001346:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	2302      	movs	r3, #2
 800134a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001354:	2306      	movs	r3, #6
 8001356:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	4619      	mov	r1, r3
 800135e:	4807      	ldr	r0, [pc, #28]	; (800137c <HAL_SAI_MspInit+0x94>)
 8001360:	f001 fbac 	bl	8002abc <HAL_GPIO_Init>

    }
}
 8001364:	bf00      	nop
 8001366:	3720      	adds	r7, #32
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40015804 	.word	0x40015804
 8001370:	2000003c 	.word	0x2000003c
 8001374:	40023800 	.word	0x40023800
 8001378:	40021000 	.word	0x40021000
 800137c:	40020c00 	.word	0x40020c00

08001380 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08c      	sub	sp, #48	; 0x30
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001390:	2200      	movs	r2, #0
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	2019      	movs	r0, #25
 8001396:	f000 fea3 	bl	80020e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800139a:	2019      	movs	r0, #25
 800139c:	f000 febc 	bl	8002118 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013a0:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <HAL_InitTick+0xa0>)
 80013a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a4:	4a1e      	ldr	r2, [pc, #120]	; (8001420 <HAL_InitTick+0xa0>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6453      	str	r3, [r2, #68]	; 0x44
 80013ac:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <HAL_InitTick+0xa0>)
 80013ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013b8:	f107 0210 	add.w	r2, r7, #16
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4611      	mov	r1, r2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f002 fcc0 	bl	8003d48 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80013c8:	f002 fcaa 	bl	8003d20 <HAL_RCC_GetPCLK2Freq>
 80013cc:	4603      	mov	r3, r0
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d4:	4a13      	ldr	r2, [pc, #76]	; (8001424 <HAL_InitTick+0xa4>)
 80013d6:	fba2 2303 	umull	r2, r3, r2, r3
 80013da:	0c9b      	lsrs	r3, r3, #18
 80013dc:	3b01      	subs	r3, #1
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <HAL_InitTick+0xa8>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <HAL_InitTick+0xac>)
 80013e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <HAL_InitTick+0xa8>)
 80013e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80013ee:	4a0e      	ldr	r2, [pc, #56]	; (8001428 <HAL_InitTick+0xa8>)
 80013f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <HAL_InitTick+0xa8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HAL_InitTick+0xa8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001400:	4809      	ldr	r0, [pc, #36]	; (8001428 <HAL_InitTick+0xa8>)
 8001402:	f003 fc3c 	bl	8004c7e <HAL_TIM_Base_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d104      	bne.n	8001416 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800140c:	4806      	ldr	r0, [pc, #24]	; (8001428 <HAL_InitTick+0xa8>)
 800140e:	f003 fc97 	bl	8004d40 <HAL_TIM_Base_Start_IT>
 8001412:	4603      	mov	r3, r0
 8001414:	e000      	b.n	8001418 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	3730      	adds	r7, #48	; 0x30
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	431bde83 	.word	0x431bde83
 8001428:	20004d3c 	.word	0x20004d3c
 800142c:	40010000 	.word	0x40010000

08001430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <NMI_Handler+0x4>

08001436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <HardFault_Handler+0x4>

0800143c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <MemManage_Handler+0x4>

08001442 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001446:	e7fe      	b.n	8001446 <BusFault_Handler+0x4>

08001448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800144c:	e7fe      	b.n	800144c <UsageFault_Handler+0x4>

0800144e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001462:	f003 fce5 	bl	8004e30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20004d3c 	.word	0x20004d3c

08001470 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <SystemInit+0x20>)
 8001476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800147a:	4a05      	ldr	r2, [pc, #20]	; (8001490 <SystemInit+0x20>)
 800147c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001480:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001494:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001498:	480d      	ldr	r0, [pc, #52]	; (80014d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800149a:	490e      	ldr	r1, [pc, #56]	; (80014d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800149c:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a0:	e002      	b.n	80014a8 <LoopCopyDataInit>

080014a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a6:	3304      	adds	r3, #4

080014a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ac:	d3f9      	bcc.n	80014a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ae:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014b0:	4c0b      	ldr	r4, [pc, #44]	; (80014e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b4:	e001      	b.n	80014ba <LoopFillZerobss>

080014b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b8:	3204      	adds	r2, #4

080014ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014bc:	d3fb      	bcc.n	80014b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014be:	f7ff ffd7 	bl	8001470 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014c2:	f007 f9bb 	bl	800883c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014c6:	f7ff f889 	bl	80005dc <main>
  bx  lr    
 80014ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014cc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80014d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80014d8:	0800a4b8 	.word	0x0800a4b8
  ldr r2, =_sbss
 80014dc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80014e0:	20004ea8 	.word	0x20004ea8

080014e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e4:	e7fe      	b.n	80014e4 <ADC_IRQHandler>
	...

080014e8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80014ec:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <BSP_LCD_Init+0xcc>)
 80014ee:	2228      	movs	r2, #40	; 0x28
 80014f0:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80014f2:	4b30      	ldr	r3, [pc, #192]	; (80015b4 <BSP_LCD_Init+0xcc>)
 80014f4:	2209      	movs	r2, #9
 80014f6:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80014f8:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <BSP_LCD_Init+0xcc>)
 80014fa:	2235      	movs	r2, #53	; 0x35
 80014fc:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80014fe:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <BSP_LCD_Init+0xcc>)
 8001500:	220b      	movs	r2, #11
 8001502:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001504:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <BSP_LCD_Init+0xcc>)
 8001506:	f240 121b 	movw	r2, #283	; 0x11b
 800150a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800150c:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <BSP_LCD_Init+0xcc>)
 800150e:	f240 2215 	movw	r2, #533	; 0x215
 8001512:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8001514:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <BSP_LCD_Init+0xcc>)
 8001516:	f240 121d 	movw	r2, #285	; 0x11d
 800151a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800151c:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <BSP_LCD_Init+0xcc>)
 800151e:	f240 2235 	movw	r2, #565	; 0x235
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001524:	2100      	movs	r1, #0
 8001526:	4823      	ldr	r0, [pc, #140]	; (80015b4 <BSP_LCD_Init+0xcc>)
 8001528:	f000 fab2 	bl	8001a90 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800152c:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <BSP_LCD_Init+0xcc>)
 800152e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001532:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8001534:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <BSP_LCD_Init+0xcc>)
 8001536:	f44f 7288 	mov.w	r2, #272	; 0x110
 800153a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800153c:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <BSP_LCD_Init+0xcc>)
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <BSP_LCD_Init+0xcc>)
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800154c:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <BSP_LCD_Init+0xcc>)
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <BSP_LCD_Init+0xcc>)
 8001556:	2200      	movs	r2, #0
 8001558:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800155a:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <BSP_LCD_Init+0xcc>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <BSP_LCD_Init+0xcc>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <BSP_LCD_Init+0xcc>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <BSP_LCD_Init+0xcc>)
 800156e:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <BSP_LCD_Init+0xd0>)
 8001570:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8001572:	4810      	ldr	r0, [pc, #64]	; (80015b4 <BSP_LCD_Init+0xcc>)
 8001574:	f001 fd76 	bl	8003064 <HAL_LTDC_GetState>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d103      	bne.n	8001586 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800157e:	2100      	movs	r1, #0
 8001580:	480c      	ldr	r0, [pc, #48]	; (80015b4 <BSP_LCD_Init+0xcc>)
 8001582:	f000 f9ab 	bl	80018dc <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8001586:	480b      	ldr	r0, [pc, #44]	; (80015b4 <BSP_LCD_Init+0xcc>)
 8001588:	f001 fc5e 	bl	8002e48 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800158c:	2201      	movs	r2, #1
 800158e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001592:	480a      	ldr	r0, [pc, #40]	; (80015bc <BSP_LCD_Init+0xd4>)
 8001594:	f001 fc3e 	bl	8002e14 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8001598:	2201      	movs	r2, #1
 800159a:	2108      	movs	r1, #8
 800159c:	4808      	ldr	r0, [pc, #32]	; (80015c0 <BSP_LCD_Init+0xd8>)
 800159e:	f001 fc39 	bl	8002e14 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80015a2:	f000 fadd 	bl	8001b60 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80015a6:	4807      	ldr	r0, [pc, #28]	; (80015c4 <BSP_LCD_Init+0xdc>)
 80015a8:	f000 f8be 	bl	8001728 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20004d88 	.word	0x20004d88
 80015b8:	40016800 	.word	0x40016800
 80015bc:	40022000 	.word	0x40022000
 80015c0:	40022800 	.word	0x40022800
 80015c4:	20000004 	.word	0x20000004

080015c8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <BSP_LCD_GetXSize+0x20>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a06      	ldr	r2, [pc, #24]	; (80015ec <BSP_LCD_GetXSize+0x24>)
 80015d2:	2134      	movs	r1, #52	; 0x34
 80015d4:	fb01 f303 	mul.w	r3, r1, r3
 80015d8:	4413      	add	r3, r2
 80015da:	3360      	adds	r3, #96	; 0x60
 80015dc:	681b      	ldr	r3, [r3, #0]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	20000080 	.word	0x20000080
 80015ec:	20004d88 	.word	0x20004d88

080015f0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <BSP_LCD_GetYSize+0x20>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a06      	ldr	r2, [pc, #24]	; (8001614 <BSP_LCD_GetYSize+0x24>)
 80015fa:	2134      	movs	r1, #52	; 0x34
 80015fc:	fb01 f303 	mul.w	r3, r1, r3
 8001600:	4413      	add	r3, r2
 8001602:	3364      	adds	r3, #100	; 0x64
 8001604:	681b      	ldr	r3, [r3, #0]
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	20000080 	.word	0x20000080
 8001614:	20004d88 	.word	0x20004d88

08001618 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001618:	b580      	push	{r7, lr}
 800161a:	b090      	sub	sp, #64	; 0x40
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8001628:	f7ff ffce 	bl	80015c8 <BSP_LCD_GetXSize>
 800162c:	4603      	mov	r3, r0
 800162e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001634:	f7ff ffdc 	bl	80015f0 <BSP_LCD_GetYSize>
 8001638:	4603      	mov	r3, r0
 800163a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8001644:	23ff      	movs	r3, #255	; 0xff
 8001646:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800165e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001664:	2307      	movs	r3, #7
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8001668:	f7ff ffae 	bl	80015c8 <BSP_LCD_GetXSize>
 800166c:	4603      	mov	r3, r0
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8001670:	f7ff ffbe 	bl	80015f0 <BSP_LCD_GetYSize>
 8001674:	4603      	mov	r3, r0
 8001676:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001678:	88fa      	ldrh	r2, [r7, #6]
 800167a:	f107 030c 	add.w	r3, r7, #12
 800167e:	4619      	mov	r1, r3
 8001680:	4812      	ldr	r0, [pc, #72]	; (80016cc <BSP_LCD_LayerDefaultInit+0xb4>)
 8001682:	f001 fcb1 	bl	8002fe8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001686:	88fa      	ldrh	r2, [r7, #6]
 8001688:	4911      	ldr	r1, [pc, #68]	; (80016d0 <BSP_LCD_LayerDefaultInit+0xb8>)
 800168a:	4613      	mov	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4413      	add	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	440b      	add	r3, r1
 8001694:	3304      	adds	r3, #4
 8001696:	f04f 32ff 	mov.w	r2, #4294967295
 800169a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800169c:	88fa      	ldrh	r2, [r7, #6]
 800169e:	490c      	ldr	r1, [pc, #48]	; (80016d0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80016a0:	4613      	mov	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4413      	add	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	3308      	adds	r3, #8
 80016ac:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80016ae:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80016b0:	88fa      	ldrh	r2, [r7, #6]
 80016b2:	4907      	ldr	r1, [pc, #28]	; (80016d0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80016b4:	4613      	mov	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	4413      	add	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80016c2:	601a      	str	r2, [r3, #0]
}
 80016c4:	bf00      	nop
 80016c6:	3740      	adds	r7, #64	; 0x40
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20004d88 	.word	0x20004d88
 80016d0:	20000084 	.word	0x20000084
 80016d4:	20000004 	.word	0x20000004

080016d8 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80016e0:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <BSP_LCD_SelectLayer+0x1c>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6013      	str	r3, [r2, #0]
} 
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000080 	.word	0x20000080

080016f8 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <BSP_LCD_SetTextColor+0x28>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4907      	ldr	r1, [pc, #28]	; (8001724 <BSP_LCD_SetTextColor+0x2c>)
 8001706:	4613      	mov	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	601a      	str	r2, [r3, #0]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	20000080 	.word	0x20000080
 8001724:	20000084 	.word	0x20000084

08001728 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <BSP_LCD_SetFont+0x2c>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4908      	ldr	r1, [pc, #32]	; (8001758 <BSP_LCD_SetFont+0x30>)
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	3308      	adds	r3, #8
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	601a      	str	r2, [r3, #0]
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000080 	.word	0x20000080
 8001758:	20000084 	.word	0x20000084

0800175c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800175c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800175e:	b085      	sub	sp, #20
 8001760:	af02      	add	r7, sp, #8
 8001762:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <BSP_LCD_Clear+0x48>)
 8001766:	681c      	ldr	r4, [r3, #0]
 8001768:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <BSP_LCD_Clear+0x48>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0e      	ldr	r2, [pc, #56]	; (80017a8 <BSP_LCD_Clear+0x4c>)
 800176e:	2134      	movs	r1, #52	; 0x34
 8001770:	fb01 f303 	mul.w	r3, r1, r3
 8001774:	4413      	add	r3, r2
 8001776:	335c      	adds	r3, #92	; 0x5c
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	461e      	mov	r6, r3
 800177c:	f7ff ff24 	bl	80015c8 <BSP_LCD_GetXSize>
 8001780:	4605      	mov	r5, r0
 8001782:	f7ff ff35 	bl	80015f0 <BSP_LCD_GetYSize>
 8001786:	4602      	mov	r2, r0
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	2300      	movs	r3, #0
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	4613      	mov	r3, r2
 8001792:	462a      	mov	r2, r5
 8001794:	4631      	mov	r1, r6
 8001796:	4620      	mov	r0, r4
 8001798:	f000 f996 	bl	8001ac8 <LL_FillBuffer>
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017a4:	20000080 	.word	0x20000080
 80017a8:	20004d88 	.word	0x20004d88

080017ac <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80017ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017b0:	b086      	sub	sp, #24
 80017b2:	af02      	add	r7, sp, #8
 80017b4:	4604      	mov	r4, r0
 80017b6:	4608      	mov	r0, r1
 80017b8:	4611      	mov	r1, r2
 80017ba:	461a      	mov	r2, r3
 80017bc:	4623      	mov	r3, r4
 80017be:	80fb      	strh	r3, [r7, #6]
 80017c0:	4603      	mov	r3, r0
 80017c2:	80bb      	strh	r3, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	807b      	strh	r3, [r7, #2]
 80017c8:	4613      	mov	r3, r2
 80017ca:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80017d0:	4b30      	ldr	r3, [pc, #192]	; (8001894 <BSP_LCD_FillRect+0xe8>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4930      	ldr	r1, [pc, #192]	; (8001898 <BSP_LCD_FillRect+0xec>)
 80017d6:	4613      	mov	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	440b      	add	r3, r1
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff88 	bl	80016f8 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80017e8:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <BSP_LCD_FillRect+0xe8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a2b      	ldr	r2, [pc, #172]	; (800189c <BSP_LCD_FillRect+0xf0>)
 80017ee:	2134      	movs	r1, #52	; 0x34
 80017f0:	fb01 f303 	mul.w	r3, r1, r3
 80017f4:	4413      	add	r3, r2
 80017f6:	3348      	adds	r3, #72	; 0x48
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d114      	bne.n	8001828 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80017fe:	4b25      	ldr	r3, [pc, #148]	; (8001894 <BSP_LCD_FillRect+0xe8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a26      	ldr	r2, [pc, #152]	; (800189c <BSP_LCD_FillRect+0xf0>)
 8001804:	2134      	movs	r1, #52	; 0x34
 8001806:	fb01 f303 	mul.w	r3, r1, r3
 800180a:	4413      	add	r3, r2
 800180c:	335c      	adds	r3, #92	; 0x5c
 800180e:	681c      	ldr	r4, [r3, #0]
 8001810:	f7ff feda 	bl	80015c8 <BSP_LCD_GetXSize>
 8001814:	4602      	mov	r2, r0
 8001816:	88bb      	ldrh	r3, [r7, #4]
 8001818:	fb03 f202 	mul.w	r2, r3, r2
 800181c:	88fb      	ldrh	r3, [r7, #6]
 800181e:	4413      	add	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4423      	add	r3, r4
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	e013      	b.n	8001850 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <BSP_LCD_FillRect+0xe8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a1b      	ldr	r2, [pc, #108]	; (800189c <BSP_LCD_FillRect+0xf0>)
 800182e:	2134      	movs	r1, #52	; 0x34
 8001830:	fb01 f303 	mul.w	r3, r1, r3
 8001834:	4413      	add	r3, r2
 8001836:	335c      	adds	r3, #92	; 0x5c
 8001838:	681c      	ldr	r4, [r3, #0]
 800183a:	f7ff fec5 	bl	80015c8 <BSP_LCD_GetXSize>
 800183e:	4602      	mov	r2, r0
 8001840:	88bb      	ldrh	r3, [r7, #4]
 8001842:	fb03 f202 	mul.w	r2, r3, r2
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	4413      	add	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4423      	add	r3, r4
 800184e:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001850:	4b10      	ldr	r3, [pc, #64]	; (8001894 <BSP_LCD_FillRect+0xe8>)
 8001852:	681c      	ldr	r4, [r3, #0]
 8001854:	68fd      	ldr	r5, [r7, #12]
 8001856:	887e      	ldrh	r6, [r7, #2]
 8001858:	f8b7 8000 	ldrh.w	r8, [r7]
 800185c:	f7ff feb4 	bl	80015c8 <BSP_LCD_GetXSize>
 8001860:	4602      	mov	r2, r0
 8001862:	887b      	ldrh	r3, [r7, #2]
 8001864:	1ad1      	subs	r1, r2, r3
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <BSP_LCD_FillRect+0xe8>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	480b      	ldr	r0, [pc, #44]	; (8001898 <BSP_LCD_FillRect+0xec>)
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4403      	add	r3, r0
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	9301      	str	r3, [sp, #4]
 800187a:	9100      	str	r1, [sp, #0]
 800187c:	4643      	mov	r3, r8
 800187e:	4632      	mov	r2, r6
 8001880:	4629      	mov	r1, r5
 8001882:	4620      	mov	r0, r4
 8001884:	f000 f920 	bl	8001ac8 <LL_FillBuffer>
}
 8001888:	bf00      	nop
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001892:	bf00      	nop
 8001894:	20000080 	.word	0x20000080
 8001898:	20000084 	.word	0x20000084
 800189c:	20004d88 	.word	0x20004d88

080018a0 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <BSP_LCD_DisplayOn+0x30>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	699a      	ldr	r2, [r3, #24]
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <BSP_LCD_DisplayOn+0x30>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0201 	orr.w	r2, r2, #1
 80018b2:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80018b4:	2201      	movs	r2, #1
 80018b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ba:	4806      	ldr	r0, [pc, #24]	; (80018d4 <BSP_LCD_DisplayOn+0x34>)
 80018bc:	f001 faaa 	bl	8002e14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80018c0:	2201      	movs	r2, #1
 80018c2:	2108      	movs	r1, #8
 80018c4:	4804      	ldr	r0, [pc, #16]	; (80018d8 <BSP_LCD_DisplayOn+0x38>)
 80018c6:	f001 faa5 	bl	8002e14 <HAL_GPIO_WritePin>
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20004d88 	.word	0x20004d88
 80018d4:	40022000 	.word	0x40022000
 80018d8:	40022800 	.word	0x40022800

080018dc <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b090      	sub	sp, #64	; 0x40
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80018e6:	4b64      	ldr	r3, [pc, #400]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	4a63      	ldr	r2, [pc, #396]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 80018ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018f0:	6453      	str	r3, [r2, #68]	; 0x44
 80018f2:	4b61      	ldr	r3, [pc, #388]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80018fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80018fe:	4b5e      	ldr	r3, [pc, #376]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a5d      	ldr	r2, [pc, #372]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 8001904:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b5b      	ldr	r3, [pc, #364]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001916:	4b58      	ldr	r3, [pc, #352]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a57      	ldr	r2, [pc, #348]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 800191c:	f043 0310 	orr.w	r3, r3, #16
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b55      	ldr	r3, [pc, #340]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0310 	and.w	r3, r3, #16
 800192a:	623b      	str	r3, [r7, #32]
 800192c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800192e:	4b52      	ldr	r3, [pc, #328]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a51      	ldr	r2, [pc, #324]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 8001934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b4f      	ldr	r3, [pc, #316]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001942:	61fb      	str	r3, [r7, #28]
 8001944:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001946:	4b4c      	ldr	r3, [pc, #304]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a4b      	ldr	r2, [pc, #300]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 800194c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b49      	ldr	r3, [pc, #292]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195a:	61bb      	str	r3, [r7, #24]
 800195c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800195e:	4b46      	ldr	r3, [pc, #280]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a45      	ldr	r2, [pc, #276]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 8001964:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b43      	ldr	r3, [pc, #268]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001976:	4b40      	ldr	r3, [pc, #256]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a3f      	ldr	r2, [pc, #252]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 800197c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b3d      	ldr	r3, [pc, #244]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800198e:	4b3a      	ldr	r3, [pc, #232]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a39      	ldr	r2, [pc, #228]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 8001994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b37      	ldr	r3, [pc, #220]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80019a6:	4b34      	ldr	r3, [pc, #208]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a33      	ldr	r2, [pc, #204]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 80019ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b31      	ldr	r3, [pc, #196]	; (8001a78 <BSP_LCD_MspInit+0x19c>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80019be:	2310      	movs	r3, #16
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80019ca:	2302      	movs	r3, #2
 80019cc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80019ce:	230e      	movs	r3, #14
 80019d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80019d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d6:	4619      	mov	r1, r3
 80019d8:	4828      	ldr	r0, [pc, #160]	; (8001a7c <BSP_LCD_MspInit+0x1a0>)
 80019da:	f001 f86f 	bl	8002abc <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80019de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80019e4:	2302      	movs	r3, #2
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80019e8:	2309      	movs	r3, #9
 80019ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80019ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f0:	4619      	mov	r1, r3
 80019f2:	4823      	ldr	r0, [pc, #140]	; (8001a80 <BSP_LCD_MspInit+0x1a4>)
 80019f4:	f001 f862 	bl	8002abc <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80019f8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80019fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001a02:	230e      	movs	r3, #14
 8001a04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001a06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	481d      	ldr	r0, [pc, #116]	; (8001a84 <BSP_LCD_MspInit+0x1a8>)
 8001a0e:	f001 f855 	bl	8002abc <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8001a12:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001a1c:	230e      	movs	r3, #14
 8001a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8001a20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a24:	4619      	mov	r1, r3
 8001a26:	4818      	ldr	r0, [pc, #96]	; (8001a88 <BSP_LCD_MspInit+0x1ac>)
 8001a28:	f001 f848 	bl	8002abc <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8001a2c:	23f7      	movs	r3, #247	; 0xf7
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001a30:	2302      	movs	r3, #2
 8001a32:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8001a34:	230e      	movs	r3, #14
 8001a36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8001a38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4813      	ldr	r0, [pc, #76]	; (8001a8c <BSP_LCD_MspInit+0x1b0>)
 8001a40:	f001 f83c 	bl	8002abc <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8001a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8001a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a52:	4619      	mov	r1, r3
 8001a54:	480b      	ldr	r0, [pc, #44]	; (8001a84 <BSP_LCD_MspInit+0x1a8>)
 8001a56:	f001 f831 	bl	8002abc <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8001a5a:	2308      	movs	r3, #8
 8001a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8001a62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a66:	4619      	mov	r1, r3
 8001a68:	4808      	ldr	r0, [pc, #32]	; (8001a8c <BSP_LCD_MspInit+0x1b0>)
 8001a6a:	f001 f827 	bl	8002abc <HAL_GPIO_Init>
}
 8001a6e:	bf00      	nop
 8001a70:	3740      	adds	r7, #64	; 0x40
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40021800 	.word	0x40021800
 8001a84:	40022000 	.word	0x40022000
 8001a88:	40022400 	.word	0x40022400
 8001a8c:	40022800 	.word	0x40022800

08001a90 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <BSP_LCD_ClockConfig+0x34>)
 8001a9c:	2208      	movs	r2, #8
 8001a9e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <BSP_LCD_ClockConfig+0x34>)
 8001aa2:	22c0      	movs	r2, #192	; 0xc0
 8001aa4:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <BSP_LCD_ClockConfig+0x34>)
 8001aa8:	2205      	movs	r2, #5
 8001aaa:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <BSP_LCD_ClockConfig+0x34>)
 8001aae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8001ab4:	4803      	ldr	r0, [pc, #12]	; (8001ac4 <BSP_LCD_ClockConfig+0x34>)
 8001ab6:	f002 f979 	bl	8003dac <HAL_RCCEx_PeriphCLKConfig>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2000009c 	.word	0x2000009c

08001ac8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af02      	add	r7, sp, #8
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001ad6:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <LL_FillBuffer+0x88>)
 8001ad8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001adc:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <LL_FillBuffer+0x8c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a1d      	ldr	r2, [pc, #116]	; (8001b58 <LL_FillBuffer+0x90>)
 8001ae4:	2134      	movs	r1, #52	; 0x34
 8001ae6:	fb01 f303 	mul.w	r3, r1, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	3348      	adds	r3, #72	; 0x48
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d103      	bne.n	8001afc <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8001af4:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <LL_FillBuffer+0x88>)
 8001af6:	2202      	movs	r2, #2
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	e002      	b.n	8001b02 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001afc:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <LL_FillBuffer+0x88>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001b02:	4a13      	ldr	r2, [pc, #76]	; (8001b50 <LL_FillBuffer+0x88>)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <LL_FillBuffer+0x88>)
 8001b0a:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <LL_FillBuffer+0x94>)
 8001b0c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001b0e:	4810      	ldr	r0, [pc, #64]	; (8001b50 <LL_FillBuffer+0x88>)
 8001b10:	f000 fd48 	bl	80025a4 <HAL_DMA2D_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d115      	bne.n	8001b46 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8001b1a:	68f9      	ldr	r1, [r7, #12]
 8001b1c:	480c      	ldr	r0, [pc, #48]	; (8001b50 <LL_FillBuffer+0x88>)
 8001b1e:	f000 fe9f 	bl	8002860 <HAL_DMA2D_ConfigLayer>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10e      	bne.n	8001b46 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69f9      	ldr	r1, [r7, #28]
 8001b32:	4807      	ldr	r0, [pc, #28]	; (8001b50 <LL_FillBuffer+0x88>)
 8001b34:	f000 fd80 	bl	8002638 <HAL_DMA2D_Start>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d103      	bne.n	8001b46 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001b3e:	210a      	movs	r1, #10
 8001b40:	4803      	ldr	r0, [pc, #12]	; (8001b50 <LL_FillBuffer+0x88>)
 8001b42:	f000 fda4 	bl	800268e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000040 	.word	0x20000040
 8001b54:	20000080 	.word	0x20000080
 8001b58:	20004d88 	.word	0x20004d88
 8001b5c:	4002b000 	.word	0x4002b000

08001b60 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001b64:	4b29      	ldr	r3, [pc, #164]	; (8001c0c <BSP_SDRAM_Init+0xac>)
 8001b66:	4a2a      	ldr	r2, [pc, #168]	; (8001c10 <BSP_SDRAM_Init+0xb0>)
 8001b68:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8001b6a:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <BSP_SDRAM_Init+0xb4>)
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8001b70:	4b28      	ldr	r3, [pc, #160]	; (8001c14 <BSP_SDRAM_Init+0xb4>)
 8001b72:	2207      	movs	r2, #7
 8001b74:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8001b76:	4b27      	ldr	r3, [pc, #156]	; (8001c14 <BSP_SDRAM_Init+0xb4>)
 8001b78:	2204      	movs	r2, #4
 8001b7a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8001b7c:	4b25      	ldr	r3, [pc, #148]	; (8001c14 <BSP_SDRAM_Init+0xb4>)
 8001b7e:	2207      	movs	r2, #7
 8001b80:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8001b82:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <BSP_SDRAM_Init+0xb4>)
 8001b84:	2202      	movs	r2, #2
 8001b86:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8001b88:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <BSP_SDRAM_Init+0xb4>)
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8001b8e:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <BSP_SDRAM_Init+0xb4>)
 8001b90:	2202      	movs	r2, #2
 8001b92:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001b94:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <BSP_SDRAM_Init+0xac>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001b9a:	4b1c      	ldr	r3, [pc, #112]	; (8001c0c <BSP_SDRAM_Init+0xac>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <BSP_SDRAM_Init+0xac>)
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001ba6:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <BSP_SDRAM_Init+0xac>)
 8001ba8:	2210      	movs	r2, #16
 8001baa:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001bac:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <BSP_SDRAM_Init+0xac>)
 8001bae:	2240      	movs	r2, #64	; 0x40
 8001bb0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8001bb2:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <BSP_SDRAM_Init+0xac>)
 8001bb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bb8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001bba:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <BSP_SDRAM_Init+0xac>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001bc0:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <BSP_SDRAM_Init+0xac>)
 8001bc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bc6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001bc8:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <BSP_SDRAM_Init+0xac>)
 8001bca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bce:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <BSP_SDRAM_Init+0xac>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	480c      	ldr	r0, [pc, #48]	; (8001c0c <BSP_SDRAM_Init+0xac>)
 8001bda:	f000 f87f 	bl	8001cdc <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001bde:	490d      	ldr	r1, [pc, #52]	; (8001c14 <BSP_SDRAM_Init+0xb4>)
 8001be0:	480a      	ldr	r0, [pc, #40]	; (8001c0c <BSP_SDRAM_Init+0xac>)
 8001be2:	f002 ffcd 	bl	8004b80 <HAL_SDRAM_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <BSP_SDRAM_Init+0xb8>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
 8001bf2:	e002      	b.n	8001bfa <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <BSP_SDRAM_Init+0xb8>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001bfa:	f240 6003 	movw	r0, #1539	; 0x603
 8001bfe:	f000 f80d 	bl	8001c1c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <BSP_SDRAM_Init+0xb8>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20004e30 	.word	0x20004e30
 8001c10:	a0000140 	.word	0xa0000140
 8001c14:	20000120 	.word	0x20000120
 8001c18:	2000000c 	.word	0x2000000c

08001c1c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001c28:	4b2a      	ldr	r3, [pc, #168]	; (8001cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001c2e:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c30:	2210      	movs	r2, #16
 8001c32:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001c34:	4b27      	ldr	r3, [pc, #156]	; (8001cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001c3a:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001c40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c44:	4923      	ldr	r1, [pc, #140]	; (8001cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c46:	4824      	ldr	r0, [pc, #144]	; (8001cd8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001c48:	f002 ffce 	bl	8004be8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f000 f96b 	bl	8001f28 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c54:	2202      	movs	r2, #2
 8001c56:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001c58:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c5a:	2210      	movs	r2, #16
 8001c5c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001c6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c6e:	4919      	ldr	r1, [pc, #100]	; (8001cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c70:	4819      	ldr	r0, [pc, #100]	; (8001cd8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001c72:	f002 ffb9 	bl	8004be8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001c76:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c78:	2203      	movs	r2, #3
 8001c7a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c7e:	2210      	movs	r2, #16
 8001c80:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c84:	2208      	movs	r2, #8
 8001c86:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001c8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c92:	4910      	ldr	r1, [pc, #64]	; (8001cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c94:	4810      	ldr	r0, [pc, #64]	; (8001cd8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001c96:	f002 ffa7 	bl	8004be8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001c9a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001c9e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ca2:	2204      	movs	r2, #4
 8001ca4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ca8:	2210      	movs	r2, #16
 8001caa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001cac:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001cb6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001cb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cbc:	4905      	ldr	r1, [pc, #20]	; (8001cd4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001cbe:	4806      	ldr	r0, [pc, #24]	; (8001cd8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001cc0:	f002 ff92 	bl	8004be8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001cc8:	f002 ffb9 	bl	8004c3e <HAL_SDRAM_ProgramRefreshRate>
}
 8001ccc:	bf00      	nop
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	2000013c 	.word	0x2000013c
 8001cd8:	20004e30 	.word	0x20004e30

08001cdc <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b090      	sub	sp, #64	; 0x40
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001ce6:	4b70      	ldr	r3, [pc, #448]	; (8001ea8 <BSP_SDRAM_MspInit+0x1cc>)
 8001ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cea:	4a6f      	ldr	r2, [pc, #444]	; (8001ea8 <BSP_SDRAM_MspInit+0x1cc>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6393      	str	r3, [r2, #56]	; 0x38
 8001cf2:	4b6d      	ldr	r3, [pc, #436]	; (8001ea8 <BSP_SDRAM_MspInit+0x1cc>)
 8001cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001cfe:	4b6a      	ldr	r3, [pc, #424]	; (8001ea8 <BSP_SDRAM_MspInit+0x1cc>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a69      	ldr	r2, [pc, #420]	; (8001ea8 <BSP_SDRAM_MspInit+0x1cc>)
 8001d04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b67      	ldr	r3, [pc, #412]	; (8001ea8 <BSP_SDRAM_MspInit+0x1cc>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d16:	4b64      	ldr	r3, [pc, #400]	; (8001ea8 <BSP_SDRAM_MspInit+0x1cc>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a63      	ldr	r2, [pc, #396]	; (8001ea8 <BSP_SDRAM_MspInit+0x1cc>)
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b61      	ldr	r3, [pc, #388]	; (8001ea8 <BSP_SDRAM_MspInit+0x1cc>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	623b      	str	r3, [r7, #32]
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d2e:	4b5e      	ldr	r3, [pc, #376]	; (8001ea8 <BSP_SDRAM_MspInit+0x1cc>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a5d      	ldr	r2, [pc, #372]	; (8001ea8 <BSP_SDRAM_MspInit+0x1cc>)
 8001d34:	f043 0308 	orr.w	r3, r3, #8
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b5b      	ldr	r3, [pc, #364]	; (8001ea8 <BSP_SDRAM_MspInit+0x1cc>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	61fb      	str	r3, [r7, #28]
 8001d44:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d46:	4b58      	ldr	r3, [pc, #352]	; (8001ea8 <BSP_SDRAM_MspInit+0x1cc>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a57      	ldr	r2, [pc, #348]	; (8001ea8 <BSP_SDRAM_MspInit+0x1cc>)
 8001d4c:	f043 0310 	orr.w	r3, r3, #16
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b55      	ldr	r3, [pc, #340]	; (8001ea8 <BSP_SDRAM_MspInit+0x1cc>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	61bb      	str	r3, [r7, #24]
 8001d5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d5e:	4b52      	ldr	r3, [pc, #328]	; (8001ea8 <BSP_SDRAM_MspInit+0x1cc>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a51      	ldr	r2, [pc, #324]	; (8001ea8 <BSP_SDRAM_MspInit+0x1cc>)
 8001d64:	f043 0320 	orr.w	r3, r3, #32
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b4f      	ldr	r3, [pc, #316]	; (8001ea8 <BSP_SDRAM_MspInit+0x1cc>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d76:	4b4c      	ldr	r3, [pc, #304]	; (8001ea8 <BSP_SDRAM_MspInit+0x1cc>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a4b      	ldr	r2, [pc, #300]	; (8001ea8 <BSP_SDRAM_MspInit+0x1cc>)
 8001d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b49      	ldr	r3, [pc, #292]	; (8001ea8 <BSP_SDRAM_MspInit+0x1cc>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d8e:	4b46      	ldr	r3, [pc, #280]	; (8001ea8 <BSP_SDRAM_MspInit+0x1cc>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a45      	ldr	r2, [pc, #276]	; (8001ea8 <BSP_SDRAM_MspInit+0x1cc>)
 8001d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b43      	ldr	r3, [pc, #268]	; (8001ea8 <BSP_SDRAM_MspInit+0x1cc>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001daa:	2301      	movs	r3, #1
 8001dac:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8001dae:	2302      	movs	r3, #2
 8001db0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001db2:	230c      	movs	r3, #12
 8001db4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8001db6:	2308      	movs	r3, #8
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8001dba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	483a      	ldr	r0, [pc, #232]	; (8001eac <BSP_SDRAM_MspInit+0x1d0>)
 8001dc2:	f000 fe7b 	bl	8002abc <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8001dc6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4837      	ldr	r0, [pc, #220]	; (8001eb0 <BSP_SDRAM_MspInit+0x1d4>)
 8001dd4:	f000 fe72 	bl	8002abc <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001dd8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001dde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de2:	4619      	mov	r1, r3
 8001de4:	4833      	ldr	r0, [pc, #204]	; (8001eb4 <BSP_SDRAM_MspInit+0x1d8>)
 8001de6:	f000 fe69 	bl	8002abc <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001dea:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001df0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df4:	4619      	mov	r1, r3
 8001df6:	4830      	ldr	r0, [pc, #192]	; (8001eb8 <BSP_SDRAM_MspInit+0x1dc>)
 8001df8:	f000 fe60 	bl	8002abc <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8001dfc:	f248 1333 	movw	r3, #33075	; 0x8133
 8001e00:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001e02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e06:	4619      	mov	r1, r3
 8001e08:	482c      	ldr	r0, [pc, #176]	; (8001ebc <BSP_SDRAM_MspInit+0x1e0>)
 8001e0a:	f000 fe57 	bl	8002abc <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8001e0e:	2328      	movs	r3, #40	; 0x28
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001e12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e16:	4619      	mov	r1, r3
 8001e18:	4829      	ldr	r0, [pc, #164]	; (8001ec0 <BSP_SDRAM_MspInit+0x1e4>)
 8001e1a:	f000 fe4f 	bl	8002abc <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001e1e:	4b29      	ldr	r3, [pc, #164]	; (8001ec4 <BSP_SDRAM_MspInit+0x1e8>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001e24:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <BSP_SDRAM_MspInit+0x1e8>)
 8001e26:	2280      	movs	r2, #128	; 0x80
 8001e28:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001e2a:	4b26      	ldr	r3, [pc, #152]	; (8001ec4 <BSP_SDRAM_MspInit+0x1e8>)
 8001e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e30:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <BSP_SDRAM_MspInit+0x1e8>)
 8001e34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e38:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e3a:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <BSP_SDRAM_MspInit+0x1e8>)
 8001e3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e40:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001e42:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <BSP_SDRAM_MspInit+0x1e8>)
 8001e44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e48:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8001e4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <BSP_SDRAM_MspInit+0x1e8>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001e50:	4b1c      	ldr	r3, [pc, #112]	; (8001ec4 <BSP_SDRAM_MspInit+0x1e8>)
 8001e52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e56:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001e58:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <BSP_SDRAM_MspInit+0x1e8>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001e5e:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <BSP_SDRAM_MspInit+0x1e8>)
 8001e60:	2203      	movs	r2, #3
 8001e62:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001e64:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <BSP_SDRAM_MspInit+0x1e8>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001e6a:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <BSP_SDRAM_MspInit+0x1e8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001e70:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <BSP_SDRAM_MspInit+0x1e8>)
 8001e72:	4a15      	ldr	r2, [pc, #84]	; (8001ec8 <BSP_SDRAM_MspInit+0x1ec>)
 8001e74:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <BSP_SDRAM_MspInit+0x1e8>)
 8001e7a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e7c:	4a11      	ldr	r2, [pc, #68]	; (8001ec4 <BSP_SDRAM_MspInit+0x1e8>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8001e82:	4810      	ldr	r0, [pc, #64]	; (8001ec4 <BSP_SDRAM_MspInit+0x1e8>)
 8001e84:	f000 fa7e 	bl	8002384 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8001e88:	480e      	ldr	r0, [pc, #56]	; (8001ec4 <BSP_SDRAM_MspInit+0x1e8>)
 8001e8a:	f000 f9cd 	bl	8002228 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	210f      	movs	r1, #15
 8001e92:	2038      	movs	r0, #56	; 0x38
 8001e94:	f000 f924 	bl	80020e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001e98:	2038      	movs	r0, #56	; 0x38
 8001e9a:	f000 f93d 	bl	8002118 <HAL_NVIC_EnableIRQ>
}
 8001e9e:	bf00      	nop
 8001ea0:	3740      	adds	r7, #64	; 0x40
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40020800 	.word	0x40020800
 8001eb0:	40020c00 	.word	0x40020c00
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40021400 	.word	0x40021400
 8001ebc:	40021800 	.word	0x40021800
 8001ec0:	40021c00 	.word	0x40021c00
 8001ec4:	2000014c 	.word	0x2000014c
 8001ec8:	40026410 	.word	0x40026410

08001ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed0:	2003      	movs	r0, #3
 8001ed2:	f000 f8fa 	bl	80020ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f7ff fa52 	bl	8001380 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001edc:	f7fe ff20 	bl	8000d20 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_IncTick+0x20>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_IncTick+0x24>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <HAL_IncTick+0x24>)
 8001efa:	6013      	str	r3, [r2, #0]
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	20000014 	.word	0x20000014
 8001f0c:	20004e64 	.word	0x20004e64

08001f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return uwTick;
 8001f14:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <HAL_GetTick+0x14>)
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20004e64 	.word	0x20004e64

08001f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f30:	f7ff ffee 	bl	8001f10 <HAL_GetTick>
 8001f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f40:	d005      	beq.n	8001f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <HAL_Delay+0x44>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f4e:	bf00      	nop
 8001f50:	f7ff ffde 	bl	8001f10 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d8f7      	bhi.n	8001f50 <HAL_Delay+0x28>
  {
  }
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000014 	.word	0x20000014

08001f70 <__NVIC_SetPriorityGrouping>:
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x40>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9e:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x40>)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	60d3      	str	r3, [r2, #12]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00
 8001fb4:	05fa0000 	.word	0x05fa0000

08001fb8 <__NVIC_GetPriorityGrouping>:
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	f003 0307 	and.w	r3, r3, #7
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_EnableIRQ>:
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	db0b      	blt.n	8001ffe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	f003 021f 	and.w	r2, r3, #31
 8001fec:	4907      	ldr	r1, [pc, #28]	; (800200c <__NVIC_EnableIRQ+0x38>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000e100 	.word	0xe000e100

08002010 <__NVIC_SetPriority>:
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	6039      	str	r1, [r7, #0]
 800201a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002020:	2b00      	cmp	r3, #0
 8002022:	db0a      	blt.n	800203a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	b2da      	uxtb	r2, r3
 8002028:	490c      	ldr	r1, [pc, #48]	; (800205c <__NVIC_SetPriority+0x4c>)
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	0112      	lsls	r2, r2, #4
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	440b      	add	r3, r1
 8002034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002038:	e00a      	b.n	8002050 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4908      	ldr	r1, [pc, #32]	; (8002060 <__NVIC_SetPriority+0x50>)
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	3b04      	subs	r3, #4
 8002048:	0112      	lsls	r2, r2, #4
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	440b      	add	r3, r1
 800204e:	761a      	strb	r2, [r3, #24]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000e100 	.word	0xe000e100
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <NVIC_EncodePriority>:
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	; 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f1c3 0307 	rsb	r3, r3, #7
 800207e:	2b04      	cmp	r3, #4
 8002080:	bf28      	it	cs
 8002082:	2304      	movcs	r3, #4
 8002084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3304      	adds	r3, #4
 800208a:	2b06      	cmp	r3, #6
 800208c:	d902      	bls.n	8002094 <NVIC_EncodePriority+0x30>
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3b03      	subs	r3, #3
 8002092:	e000      	b.n	8002096 <NVIC_EncodePriority+0x32>
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002098:	f04f 32ff 	mov.w	r2, #4294967295
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43da      	mvns	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	401a      	ands	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ac:	f04f 31ff 	mov.w	r1, #4294967295
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
 80020b6:	43d9      	mvns	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	4313      	orrs	r3, r2
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3724      	adds	r7, #36	; 0x24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff ff4c 	bl	8001f70 <__NVIC_SetPriorityGrouping>
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f2:	f7ff ff61 	bl	8001fb8 <__NVIC_GetPriorityGrouping>
 80020f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	68b9      	ldr	r1, [r7, #8]
 80020fc:	6978      	ldr	r0, [r7, #20]
 80020fe:	f7ff ffb1 	bl	8002064 <NVIC_EncodePriority>
 8002102:	4602      	mov	r2, r0
 8002104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002108:	4611      	mov	r1, r2
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff ff80 	bl	8002010 <__NVIC_SetPriority>
}
 8002110:	bf00      	nop
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff ff54 	bl	8001fd4 <__NVIC_EnableIRQ>
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e069      	b.n	800221a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d102      	bne.n	8002158 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7fe fe0c 	bl	8000d70 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6819      	ldr	r1, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b2a      	ldr	r3, [pc, #168]	; (8002224 <HAL_DCMI_Init+0xf0>)
 800217a:	400b      	ands	r3, r1
 800217c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6819      	ldr	r1, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002192:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800219e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80021aa:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80021b6:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80021c2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b10      	cmp	r3, #16
 80021d2:	d112      	bne.n	80021fa <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7f1b      	ldrb	r3, [r3, #28]
 80021d8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	7f5b      	ldrb	r3, [r3, #29]
 80021de:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80021e0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	7f9b      	ldrb	r3, [r3, #30]
 80021e6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80021e8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	7fdb      	ldrb	r3, [r3, #31]
 80021f0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80021f6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80021f8:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 021e 	orr.w	r2, r2, #30
 8002208:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	ffe0f007 	.word	0xffe0f007

08002228 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002234:	f7ff fe6c 	bl	8001f10 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e099      	b.n	8002378 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002264:	e00f      	b.n	8002286 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002266:	f7ff fe53 	bl	8001f10 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b05      	cmp	r3, #5
 8002272:	d908      	bls.n	8002286 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2203      	movs	r2, #3
 800227e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e078      	b.n	8002378 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1e8      	bne.n	8002266 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	4b38      	ldr	r3, [pc, #224]	; (8002380 <HAL_DMA_Init+0x158>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d107      	bne.n	80022f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	4313      	orrs	r3, r2
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f023 0307 	bic.w	r3, r3, #7
 8002306:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	4313      	orrs	r3, r2
 8002310:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	2b04      	cmp	r3, #4
 8002318:	d117      	bne.n	800234a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	4313      	orrs	r3, r2
 8002322:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00e      	beq.n	800234a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f8bd 	bl	80024ac <DMA_CheckFifoParam>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2240      	movs	r2, #64	; 0x40
 800233c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002346:	2301      	movs	r3, #1
 8002348:	e016      	b.n	8002378 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f874 	bl	8002440 <DMA_CalcBaseAndBitshift>
 8002358:	4603      	mov	r3, r0
 800235a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	223f      	movs	r2, #63	; 0x3f
 8002362:	409a      	lsls	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	f010803f 	.word	0xf010803f

08002384 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e050      	b.n	8002438 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d101      	bne.n	80023a6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80023a2:	2302      	movs	r3, #2
 80023a4:	e048      	b.n	8002438 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0201 	bic.w	r2, r2, #1
 80023b4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2200      	movs	r2, #0
 80023c4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2200      	movs	r2, #0
 80023d4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2200      	movs	r2, #0
 80023dc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2221      	movs	r2, #33	; 0x21
 80023e4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f82a 	bl	8002440 <DMA_CalcBaseAndBitshift>
 80023ec:	4603      	mov	r3, r0
 80023ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f4:	223f      	movs	r2, #63	; 0x3f
 80023f6:	409a      	lsls	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	3b10      	subs	r3, #16
 8002450:	4a13      	ldr	r2, [pc, #76]	; (80024a0 <DMA_CalcBaseAndBitshift+0x60>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	091b      	lsrs	r3, r3, #4
 8002458:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800245a:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <DMA_CalcBaseAndBitshift+0x64>)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4413      	add	r3, r2
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d908      	bls.n	8002480 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <DMA_CalcBaseAndBitshift+0x68>)
 8002476:	4013      	ands	r3, r2
 8002478:	1d1a      	adds	r2, r3, #4
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	659a      	str	r2, [r3, #88]	; 0x58
 800247e:	e006      	b.n	800248e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <DMA_CalcBaseAndBitshift+0x68>)
 8002488:	4013      	ands	r3, r2
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	aaaaaaab 	.word	0xaaaaaaab
 80024a4:	0800a4a0 	.word	0x0800a4a0
 80024a8:	fffffc00 	.word	0xfffffc00

080024ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d11f      	bne.n	8002506 <DMA_CheckFifoParam+0x5a>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	d856      	bhi.n	800257a <DMA_CheckFifoParam+0xce>
 80024cc:	a201      	add	r2, pc, #4	; (adr r2, 80024d4 <DMA_CheckFifoParam+0x28>)
 80024ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d2:	bf00      	nop
 80024d4:	080024e5 	.word	0x080024e5
 80024d8:	080024f7 	.word	0x080024f7
 80024dc:	080024e5 	.word	0x080024e5
 80024e0:	0800257b 	.word	0x0800257b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d046      	beq.n	800257e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f4:	e043      	b.n	800257e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024fe:	d140      	bne.n	8002582 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002504:	e03d      	b.n	8002582 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800250e:	d121      	bne.n	8002554 <DMA_CheckFifoParam+0xa8>
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b03      	cmp	r3, #3
 8002514:	d837      	bhi.n	8002586 <DMA_CheckFifoParam+0xda>
 8002516:	a201      	add	r2, pc, #4	; (adr r2, 800251c <DMA_CheckFifoParam+0x70>)
 8002518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251c:	0800252d 	.word	0x0800252d
 8002520:	08002533 	.word	0x08002533
 8002524:	0800252d 	.word	0x0800252d
 8002528:	08002545 	.word	0x08002545
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
      break;
 8002530:	e030      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d025      	beq.n	800258a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002542:	e022      	b.n	800258a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800254c:	d11f      	bne.n	800258e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002552:	e01c      	b.n	800258e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d903      	bls.n	8002562 <DMA_CheckFifoParam+0xb6>
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b03      	cmp	r3, #3
 800255e:	d003      	beq.n	8002568 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002560:	e018      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
      break;
 8002566:	e015      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00e      	beq.n	8002592 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
      break;
 8002578:	e00b      	b.n	8002592 <DMA_CheckFifoParam+0xe6>
      break;
 800257a:	bf00      	nop
 800257c:	e00a      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
      break;
 800257e:	bf00      	nop
 8002580:	e008      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
      break;
 8002582:	bf00      	nop
 8002584:	e006      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
      break;
 8002586:	bf00      	nop
 8002588:	e004      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
      break;
 800258a:	bf00      	nop
 800258c:	e002      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
      break;   
 800258e:	bf00      	nop
 8002590:	e000      	b.n	8002594 <DMA_CheckFifoParam+0xe8>
      break;
 8002592:	bf00      	nop
    }
  } 
  
  return status; 
 8002594:	7bfb      	ldrb	r3, [r7, #15]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop

080025a4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e039      	b.n	800262a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7fe fc90 	bl	8000ef0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f4:	f023 0107 	bic.w	r1, r3, #7
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_DMA2D_Init+0x90>)
 800260c:	4013      	ands	r3, r2
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68d1      	ldr	r1, [r2, #12]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	430b      	orrs	r3, r1
 8002618:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	ffffc000 	.word	0xffffc000

08002638 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af02      	add	r7, sp, #8
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
 8002644:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_DMA2D_Start+0x1c>
 8002650:	2302      	movs	r3, #2
 8002652:	e018      	b.n	8002686 <HAL_DMA2D_Start+0x4e>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 f988 	bl	8002984 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b086      	sub	sp, #24
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d056      	beq.n	8002758 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80026aa:	f7ff fc31 	bl	8001f10 <HAL_GetTick>
 80026ae:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80026b0:	e04b      	b.n	800274a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d023      	beq.n	800270c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f003 0320 	and.w	r3, r3, #32
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d005      	beq.n	80026da <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d2:	f043 0202 	orr.w	r2, r3, #2
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e8:	f043 0201 	orr.w	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2221      	movs	r2, #33	; 0x21
 80026f6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2204      	movs	r2, #4
 80026fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0a5      	b.n	8002858 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002712:	d01a      	beq.n	800274a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002714:	f7ff fbfc 	bl	8001f10 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d302      	bcc.n	800272a <HAL_DMA2D_PollForTransfer+0x9c>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10f      	bne.n	800274a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272e:	f043 0220 	orr.w	r2, r3, #32
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2203      	movs	r2, #3
 800273a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e086      	b.n	8002858 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0ac      	beq.n	80026b2 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	f003 0320 	and.w	r3, r3, #32
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d061      	beq.n	800283e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800277a:	f7ff fbc9 	bl	8001f10 <HAL_GetTick>
 800277e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002780:	e056      	b.n	8002830 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002790:	2b00      	cmp	r3, #0
 8002792:	d02e      	beq.n	80027f2 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d005      	beq.n	80027aa <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a2:	f043 0204 	orr.w	r2, r3, #4
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b8:	f043 0202 	orr.w	r2, r3, #2
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ce:	f043 0201 	orr.w	r2, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2229      	movs	r2, #41	; 0x29
 80027dc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2204      	movs	r2, #4
 80027e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e032      	b.n	8002858 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f8:	d01a      	beq.n	8002830 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027fa:	f7ff fb89 	bl	8001f10 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d302      	bcc.n	8002810 <HAL_DMA2D_PollForTransfer+0x182>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10f      	bne.n	8002830 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002814:	f043 0220 	orr.w	r2, r3, #32
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2203      	movs	r2, #3
 8002820:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e013      	b.n	8002858 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0a1      	beq.n	8002782 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2212      	movs	r2, #18
 8002844:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002860:	b480      	push	{r7}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_DMA2D_ConfigLayer+0x20>
 800287c:	2302      	movs	r3, #2
 800287e:	e079      	b.n	8002974 <HAL_DMA2D_ConfigLayer+0x114>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	3318      	adds	r3, #24
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	4413      	add	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	041b      	lsls	r3, r3, #16
 80028a6:	4313      	orrs	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80028aa:	4b35      	ldr	r3, [pc, #212]	; (8002980 <HAL_DMA2D_ConfigLayer+0x120>)
 80028ac:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b0a      	cmp	r3, #10
 80028b4:	d003      	beq.n	80028be <HAL_DMA2D_ConfigLayer+0x5e>
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b09      	cmp	r3, #9
 80028bc:	d107      	bne.n	80028ce <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	e005      	b.n	80028da <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	061b      	lsls	r3, r3, #24
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d120      	bne.n	8002922 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	43db      	mvns	r3, r3
 80028ea:	ea02 0103 	and.w	r1, r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b0a      	cmp	r3, #10
 8002908:	d003      	beq.n	8002912 <HAL_DMA2D_ConfigLayer+0xb2>
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b09      	cmp	r3, #9
 8002910:	d127      	bne.n	8002962 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800291e:	629a      	str	r2, [r3, #40]	; 0x28
 8002920:	e01f      	b.n	8002962 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	69da      	ldr	r2, [r3, #28]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	43db      	mvns	r3, r3
 800292c:	ea02 0103 	and.w	r1, r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	430a      	orrs	r2, r1
 8002938:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b0a      	cmp	r3, #10
 800294a:	d003      	beq.n	8002954 <HAL_DMA2D_ConfigLayer+0xf4>
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b09      	cmp	r3, #9
 8002952:	d106      	bne.n	8002962 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002960:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	ff03000f 	.word	0xff03000f

08002984 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002984:	b480      	push	{r7}
 8002986:	b08b      	sub	sp, #44	; 0x2c
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
 8002990:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002998:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	041a      	lsls	r2, r3, #16
 80029a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a2:	431a      	orrs	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029bc:	d174      	bne.n	8002aa8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80029c4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80029cc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80029d4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d108      	bne.n	80029f6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	431a      	orrs	r2, r3
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
 80029f4:	e053      	b.n	8002a9e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d106      	bne.n	8002a0c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0a:	e048      	b.n	8002a9e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d111      	bne.n	8002a38 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	0cdb      	lsrs	r3, r3, #19
 8002a18:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	0a9b      	lsrs	r3, r3, #10
 8002a1e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	08db      	lsrs	r3, r3, #3
 8002a24:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	02db      	lsls	r3, r3, #11
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
 8002a36:	e032      	b.n	8002a9e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d117      	bne.n	8002a70 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	0fdb      	lsrs	r3, r3, #31
 8002a44:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	0cdb      	lsrs	r3, r3, #19
 8002a4a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	0adb      	lsrs	r3, r3, #11
 8002a50:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	08db      	lsrs	r3, r3, #3
 8002a56:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	029b      	lsls	r3, r3, #10
 8002a60:	431a      	orrs	r2, r3
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	03db      	lsls	r3, r3, #15
 8002a66:	4313      	orrs	r3, r2
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6e:	e016      	b.n	8002a9e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	0f1b      	lsrs	r3, r3, #28
 8002a74:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	0d1b      	lsrs	r3, r3, #20
 8002a7a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	0b1b      	lsrs	r3, r3, #12
 8002a80:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	091b      	lsrs	r3, r3, #4
 8002a86:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	011a      	lsls	r2, r3, #4
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	021b      	lsls	r3, r3, #8
 8002a90:	431a      	orrs	r2, r3
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	031b      	lsls	r3, r3, #12
 8002a96:	4313      	orrs	r3, r2
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002aa6:	e003      	b.n	8002ab0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	60da      	str	r2, [r3, #12]
}
 8002ab0:	bf00      	nop
 8002ab2:	372c      	adds	r7, #44	; 0x2c
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b089      	sub	sp, #36	; 0x24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	e175      	b.n	8002dc8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002adc:	2201      	movs	r2, #1
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4013      	ands	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	f040 8164 	bne.w	8002dc2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d00b      	beq.n	8002b1a <HAL_GPIO_Init+0x5e>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d007      	beq.n	8002b1a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b0e:	2b11      	cmp	r3, #17
 8002b10:	d003      	beq.n	8002b1a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b12      	cmp	r3, #18
 8002b18:	d130      	bne.n	8002b7c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	2203      	movs	r2, #3
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b50:	2201      	movs	r2, #1
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	091b      	lsrs	r3, r3, #4
 8002b66:	f003 0201 	and.w	r2, r3, #1
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	2203      	movs	r2, #3
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d003      	beq.n	8002bbc <HAL_GPIO_Init+0x100>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b12      	cmp	r3, #18
 8002bba:	d123      	bne.n	8002c04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	08da      	lsrs	r2, r3, #3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3208      	adds	r2, #8
 8002bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	220f      	movs	r2, #15
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	08da      	lsrs	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3208      	adds	r2, #8
 8002bfe:	69b9      	ldr	r1, [r7, #24]
 8002c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	2203      	movs	r2, #3
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0203 	and.w	r2, r3, #3
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80be 	beq.w	8002dc2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c46:	4b66      	ldr	r3, [pc, #408]	; (8002de0 <HAL_GPIO_Init+0x324>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	4a65      	ldr	r2, [pc, #404]	; (8002de0 <HAL_GPIO_Init+0x324>)
 8002c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c50:	6453      	str	r3, [r2, #68]	; 0x44
 8002c52:	4b63      	ldr	r3, [pc, #396]	; (8002de0 <HAL_GPIO_Init+0x324>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c5e:	4a61      	ldr	r2, [pc, #388]	; (8002de4 <HAL_GPIO_Init+0x328>)
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	089b      	lsrs	r3, r3, #2
 8002c64:	3302      	adds	r3, #2
 8002c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	220f      	movs	r2, #15
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a58      	ldr	r2, [pc, #352]	; (8002de8 <HAL_GPIO_Init+0x32c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d037      	beq.n	8002cfa <HAL_GPIO_Init+0x23e>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a57      	ldr	r2, [pc, #348]	; (8002dec <HAL_GPIO_Init+0x330>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d031      	beq.n	8002cf6 <HAL_GPIO_Init+0x23a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a56      	ldr	r2, [pc, #344]	; (8002df0 <HAL_GPIO_Init+0x334>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d02b      	beq.n	8002cf2 <HAL_GPIO_Init+0x236>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a55      	ldr	r2, [pc, #340]	; (8002df4 <HAL_GPIO_Init+0x338>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d025      	beq.n	8002cee <HAL_GPIO_Init+0x232>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a54      	ldr	r2, [pc, #336]	; (8002df8 <HAL_GPIO_Init+0x33c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d01f      	beq.n	8002cea <HAL_GPIO_Init+0x22e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a53      	ldr	r2, [pc, #332]	; (8002dfc <HAL_GPIO_Init+0x340>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d019      	beq.n	8002ce6 <HAL_GPIO_Init+0x22a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a52      	ldr	r2, [pc, #328]	; (8002e00 <HAL_GPIO_Init+0x344>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d013      	beq.n	8002ce2 <HAL_GPIO_Init+0x226>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a51      	ldr	r2, [pc, #324]	; (8002e04 <HAL_GPIO_Init+0x348>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00d      	beq.n	8002cde <HAL_GPIO_Init+0x222>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a50      	ldr	r2, [pc, #320]	; (8002e08 <HAL_GPIO_Init+0x34c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d007      	beq.n	8002cda <HAL_GPIO_Init+0x21e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a4f      	ldr	r2, [pc, #316]	; (8002e0c <HAL_GPIO_Init+0x350>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_GPIO_Init+0x21a>
 8002cd2:	2309      	movs	r3, #9
 8002cd4:	e012      	b.n	8002cfc <HAL_GPIO_Init+0x240>
 8002cd6:	230a      	movs	r3, #10
 8002cd8:	e010      	b.n	8002cfc <HAL_GPIO_Init+0x240>
 8002cda:	2308      	movs	r3, #8
 8002cdc:	e00e      	b.n	8002cfc <HAL_GPIO_Init+0x240>
 8002cde:	2307      	movs	r3, #7
 8002ce0:	e00c      	b.n	8002cfc <HAL_GPIO_Init+0x240>
 8002ce2:	2306      	movs	r3, #6
 8002ce4:	e00a      	b.n	8002cfc <HAL_GPIO_Init+0x240>
 8002ce6:	2305      	movs	r3, #5
 8002ce8:	e008      	b.n	8002cfc <HAL_GPIO_Init+0x240>
 8002cea:	2304      	movs	r3, #4
 8002cec:	e006      	b.n	8002cfc <HAL_GPIO_Init+0x240>
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e004      	b.n	8002cfc <HAL_GPIO_Init+0x240>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e002      	b.n	8002cfc <HAL_GPIO_Init+0x240>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <HAL_GPIO_Init+0x240>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	f002 0203 	and.w	r2, r2, #3
 8002d02:	0092      	lsls	r2, r2, #2
 8002d04:	4093      	lsls	r3, r2
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d0c:	4935      	ldr	r1, [pc, #212]	; (8002de4 <HAL_GPIO_Init+0x328>)
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	089b      	lsrs	r3, r3, #2
 8002d12:	3302      	adds	r3, #2
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d1a:	4b3d      	ldr	r3, [pc, #244]	; (8002e10 <HAL_GPIO_Init+0x354>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d3e:	4a34      	ldr	r2, [pc, #208]	; (8002e10 <HAL_GPIO_Init+0x354>)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d44:	4b32      	ldr	r3, [pc, #200]	; (8002e10 <HAL_GPIO_Init+0x354>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d68:	4a29      	ldr	r2, [pc, #164]	; (8002e10 <HAL_GPIO_Init+0x354>)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d6e:	4b28      	ldr	r3, [pc, #160]	; (8002e10 <HAL_GPIO_Init+0x354>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d92:	4a1f      	ldr	r2, [pc, #124]	; (8002e10 <HAL_GPIO_Init+0x354>)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d98:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <HAL_GPIO_Init+0x354>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dbc:	4a14      	ldr	r2, [pc, #80]	; (8002e10 <HAL_GPIO_Init+0x354>)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b0f      	cmp	r3, #15
 8002dcc:	f67f ae86 	bls.w	8002adc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	bf00      	nop
 8002dd4:	3724      	adds	r7, #36	; 0x24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40013800 	.word	0x40013800
 8002de8:	40020000 	.word	0x40020000
 8002dec:	40020400 	.word	0x40020400
 8002df0:	40020800 	.word	0x40020800
 8002df4:	40020c00 	.word	0x40020c00
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40021400 	.word	0x40021400
 8002e00:	40021800 	.word	0x40021800
 8002e04:	40021c00 	.word	0x40021c00
 8002e08:	40022000 	.word	0x40022000
 8002e0c:	40022400 	.word	0x40022400
 8002e10:	40013c00 	.word	0x40013c00

08002e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	807b      	strh	r3, [r7, #2]
 8002e20:	4613      	mov	r3, r2
 8002e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e24:	787b      	ldrb	r3, [r7, #1]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e2a:	887a      	ldrh	r2, [r7, #2]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e30:	e003      	b.n	8002e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e32:	887b      	ldrh	r3, [r7, #2]
 8002e34:	041a      	lsls	r2, r3, #16
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	619a      	str	r2, [r3, #24]
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e0bf      	b.n	8002fda <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7fe f85e 	bl	8000f30 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699a      	ldr	r2, [r3, #24]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002e8a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6999      	ldr	r1, [r3, #24]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002ea0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6899      	ldr	r1, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	4b4a      	ldr	r3, [pc, #296]	; (8002fe4 <HAL_LTDC_Init+0x19c>)
 8002ebc:	400b      	ands	r3, r1
 8002ebe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	041b      	lsls	r3, r3, #16
 8002ec6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6899      	ldr	r1, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68d9      	ldr	r1, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4b3e      	ldr	r3, [pc, #248]	; (8002fe4 <HAL_LTDC_Init+0x19c>)
 8002eea:	400b      	ands	r3, r1
 8002eec:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	041b      	lsls	r3, r3, #16
 8002ef4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68d9      	ldr	r1, [r3, #12]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1a      	ldr	r2, [r3, #32]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6919      	ldr	r1, [r3, #16]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	4b33      	ldr	r3, [pc, #204]	; (8002fe4 <HAL_LTDC_Init+0x19c>)
 8002f18:	400b      	ands	r3, r1
 8002f1a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	041b      	lsls	r3, r3, #16
 8002f22:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6919      	ldr	r1, [r3, #16]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6959      	ldr	r1, [r3, #20]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b27      	ldr	r3, [pc, #156]	; (8002fe4 <HAL_LTDC_Init+0x19c>)
 8002f46:	400b      	ands	r3, r1
 8002f48:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4e:	041b      	lsls	r3, r3, #16
 8002f50:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6959      	ldr	r1, [r3, #20]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f6e:	021b      	lsls	r3, r3, #8
 8002f70:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002f78:	041b      	lsls	r3, r3, #16
 8002f7a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0206 	orr.w	r2, r2, #6
 8002fb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0201 	orr.w	r2, r2, #1
 8002fc6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	f000f800 	.word	0xf000f800

08002fe8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002fe8:	b5b0      	push	{r4, r5, r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <HAL_LTDC_ConfigLayer+0x1a>
 8002ffe:	2302      	movs	r3, #2
 8003000:	e02c      	b.n	800305c <HAL_LTDC_ConfigLayer+0x74>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2202      	movs	r2, #2
 800300e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2134      	movs	r1, #52	; 0x34
 8003018:	fb01 f303 	mul.w	r3, r1, r3
 800301c:	4413      	add	r3, r2
 800301e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	4614      	mov	r4, r2
 8003026:	461d      	mov	r5, r3
 8003028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800302a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800302c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800302e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003034:	682b      	ldr	r3, [r5, #0]
 8003036:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	68b9      	ldr	r1, [r7, #8]
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 f81f 	bl	8003080 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2201      	movs	r2, #1
 8003048:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bdb0      	pop	{r4, r5, r7, pc}

08003064 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003072:	b2db      	uxtb	r3, r3
}
 8003074:	4618      	mov	r0, r3
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003080:	b480      	push	{r7}
 8003082:	b089      	sub	sp, #36	; 0x24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	0c1b      	lsrs	r3, r3, #16
 8003098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309c:	4413      	add	r3, r2
 800309e:	041b      	lsls	r3, r3, #16
 80030a0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	01db      	lsls	r3, r3, #7
 80030ac:	4413      	add	r3, r2
 80030ae:	3384      	adds	r3, #132	; 0x84
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	4611      	mov	r1, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	01d2      	lsls	r2, r2, #7
 80030bc:	440a      	add	r2, r1
 80030be:	3284      	adds	r2, #132	; 0x84
 80030c0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80030c4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	0c1b      	lsrs	r3, r3, #16
 80030d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d6:	4413      	add	r3, r2
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4619      	mov	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	01db      	lsls	r3, r3, #7
 80030e4:	440b      	add	r3, r1
 80030e6:	3384      	adds	r3, #132	; 0x84
 80030e8:	4619      	mov	r1, r3
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030fe:	4413      	add	r3, r2
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	01db      	lsls	r3, r3, #7
 800310e:	4413      	add	r3, r2
 8003110:	3384      	adds	r3, #132	; 0x84
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	4611      	mov	r1, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	01d2      	lsls	r2, r2, #7
 800311e:	440a      	add	r2, r1
 8003120:	3284      	adds	r2, #132	; 0x84
 8003122:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003126:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003136:	4413      	add	r3, r2
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4619      	mov	r1, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	01db      	lsls	r3, r3, #7
 8003144:	440b      	add	r3, r1
 8003146:	3384      	adds	r3, #132	; 0x84
 8003148:	4619      	mov	r1, r3
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	4313      	orrs	r3, r2
 800314e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	01db      	lsls	r3, r3, #7
 800315a:	4413      	add	r3, r2
 800315c:	3384      	adds	r3, #132	; 0x84
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	4611      	mov	r1, r2
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	01d2      	lsls	r2, r2, #7
 800316a:	440a      	add	r2, r1
 800316c:	3284      	adds	r2, #132	; 0x84
 800316e:	f023 0307 	bic.w	r3, r3, #7
 8003172:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	461a      	mov	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	01db      	lsls	r3, r3, #7
 800317e:	4413      	add	r3, r2
 8003180:	3384      	adds	r3, #132	; 0x84
 8003182:	461a      	mov	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003190:	021b      	lsls	r3, r3, #8
 8003192:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800319a:	041b      	lsls	r3, r3, #16
 800319c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	061b      	lsls	r3, r3, #24
 80031a4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	01db      	lsls	r3, r3, #7
 80031b0:	4413      	add	r3, r2
 80031b2:	3384      	adds	r3, #132	; 0x84
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	01db      	lsls	r3, r3, #7
 80031c0:	4413      	add	r3, r2
 80031c2:	3384      	adds	r3, #132	; 0x84
 80031c4:	461a      	mov	r2, r3
 80031c6:	2300      	movs	r3, #0
 80031c8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031d0:	461a      	mov	r2, r3
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	431a      	orrs	r2, r3
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	431a      	orrs	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4619      	mov	r1, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	01db      	lsls	r3, r3, #7
 80031e4:	440b      	add	r3, r1
 80031e6:	3384      	adds	r3, #132	; 0x84
 80031e8:	4619      	mov	r1, r3
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	461a      	mov	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	01db      	lsls	r3, r3, #7
 80031fa:	4413      	add	r3, r2
 80031fc:	3384      	adds	r3, #132	; 0x84
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	4611      	mov	r1, r2
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	01d2      	lsls	r2, r2, #7
 800320a:	440a      	add	r2, r1
 800320c:	3284      	adds	r2, #132	; 0x84
 800320e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003212:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	461a      	mov	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	01db      	lsls	r3, r3, #7
 800321e:	4413      	add	r3, r2
 8003220:	3384      	adds	r3, #132	; 0x84
 8003222:	461a      	mov	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	01db      	lsls	r3, r3, #7
 8003234:	4413      	add	r3, r2
 8003236:	3384      	adds	r3, #132	; 0x84
 8003238:	69da      	ldr	r2, [r3, #28]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4619      	mov	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	01db      	lsls	r3, r3, #7
 8003244:	440b      	add	r3, r1
 8003246:	3384      	adds	r3, #132	; 0x84
 8003248:	4619      	mov	r1, r3
 800324a:	4b58      	ldr	r3, [pc, #352]	; (80033ac <LTDC_SetConfig+0x32c>)
 800324c:	4013      	ands	r3, r2
 800324e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	68f9      	ldr	r1, [r7, #12]
 800325a:	6809      	ldr	r1, [r1, #0]
 800325c:	4608      	mov	r0, r1
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	01c9      	lsls	r1, r1, #7
 8003262:	4401      	add	r1, r0
 8003264:	3184      	adds	r1, #132	; 0x84
 8003266:	4313      	orrs	r3, r2
 8003268:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	461a      	mov	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	01db      	lsls	r3, r3, #7
 8003274:	4413      	add	r3, r2
 8003276:	3384      	adds	r3, #132	; 0x84
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	01db      	lsls	r3, r3, #7
 8003284:	4413      	add	r3, r2
 8003286:	3384      	adds	r3, #132	; 0x84
 8003288:	461a      	mov	r2, r3
 800328a:	2300      	movs	r3, #0
 800328c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	01db      	lsls	r3, r3, #7
 8003298:	4413      	add	r3, r2
 800329a:	3384      	adds	r3, #132	; 0x84
 800329c:	461a      	mov	r2, r3
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d102      	bne.n	80032b2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80032ac:	2304      	movs	r3, #4
 80032ae:	61fb      	str	r3, [r7, #28]
 80032b0:	e01b      	b.n	80032ea <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d102      	bne.n	80032c0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80032ba:	2303      	movs	r3, #3
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	e014      	b.n	80032ea <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d00b      	beq.n	80032e0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d007      	beq.n	80032e0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d003      	beq.n	80032e0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80032dc:	2b07      	cmp	r3, #7
 80032de:	d102      	bne.n	80032e6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80032e0:	2302      	movs	r3, #2
 80032e2:	61fb      	str	r3, [r7, #28]
 80032e4:	e001      	b.n	80032ea <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80032e6:	2301      	movs	r3, #1
 80032e8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	01db      	lsls	r3, r3, #7
 80032f4:	4413      	add	r3, r2
 80032f6:	3384      	adds	r3, #132	; 0x84
 80032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	4611      	mov	r1, r2
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	01d2      	lsls	r2, r2, #7
 8003304:	440a      	add	r2, r1
 8003306:	3284      	adds	r2, #132	; 0x84
 8003308:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800330c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	69fa      	ldr	r2, [r7, #28]
 8003314:	fb02 f303 	mul.w	r3, r2, r3
 8003318:	041a      	lsls	r2, r3, #16
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	6859      	ldr	r1, [r3, #4]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	1acb      	subs	r3, r1, r3
 8003324:	69f9      	ldr	r1, [r7, #28]
 8003326:	fb01 f303 	mul.w	r3, r1, r3
 800332a:	3303      	adds	r3, #3
 800332c:	68f9      	ldr	r1, [r7, #12]
 800332e:	6809      	ldr	r1, [r1, #0]
 8003330:	4608      	mov	r0, r1
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	01c9      	lsls	r1, r1, #7
 8003336:	4401      	add	r1, r0
 8003338:	3184      	adds	r1, #132	; 0x84
 800333a:	4313      	orrs	r3, r2
 800333c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	01db      	lsls	r3, r3, #7
 8003348:	4413      	add	r3, r2
 800334a:	3384      	adds	r3, #132	; 0x84
 800334c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4619      	mov	r1, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	01db      	lsls	r3, r3, #7
 8003358:	440b      	add	r3, r1
 800335a:	3384      	adds	r3, #132	; 0x84
 800335c:	4619      	mov	r1, r3
 800335e:	4b14      	ldr	r3, [pc, #80]	; (80033b0 <LTDC_SetConfig+0x330>)
 8003360:	4013      	ands	r3, r2
 8003362:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	01db      	lsls	r3, r3, #7
 800336e:	4413      	add	r3, r2
 8003370:	3384      	adds	r3, #132	; 0x84
 8003372:	461a      	mov	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	461a      	mov	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	01db      	lsls	r3, r3, #7
 8003384:	4413      	add	r3, r2
 8003386:	3384      	adds	r3, #132	; 0x84
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	6812      	ldr	r2, [r2, #0]
 800338e:	4611      	mov	r1, r2
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	01d2      	lsls	r2, r2, #7
 8003394:	440a      	add	r2, r1
 8003396:	3284      	adds	r2, #132	; 0x84
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	6013      	str	r3, [r2, #0]
}
 800339e:	bf00      	nop
 80033a0:	3724      	adds	r7, #36	; 0x24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	fffff8f8 	.word	0xfffff8f8
 80033b0:	fffff800 	.word	0xfffff800

080033b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80033be:	4b23      	ldr	r3, [pc, #140]	; (800344c <HAL_PWREx_EnableOverDrive+0x98>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	4a22      	ldr	r2, [pc, #136]	; (800344c <HAL_PWREx_EnableOverDrive+0x98>)
 80033c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ca:	4b20      	ldr	r3, [pc, #128]	; (800344c <HAL_PWREx_EnableOverDrive+0x98>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033d6:	4b1e      	ldr	r3, [pc, #120]	; (8003450 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a1d      	ldr	r2, [pc, #116]	; (8003450 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033e2:	f7fe fd95 	bl	8001f10 <HAL_GetTick>
 80033e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033e8:	e009      	b.n	80033fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033ea:	f7fe fd91 	bl	8001f10 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033f8:	d901      	bls.n	80033fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e022      	b.n	8003444 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033fe:	4b14      	ldr	r3, [pc, #80]	; (8003450 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340a:	d1ee      	bne.n	80033ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800340c:	4b10      	ldr	r3, [pc, #64]	; (8003450 <HAL_PWREx_EnableOverDrive+0x9c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a0f      	ldr	r2, [pc, #60]	; (8003450 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003416:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003418:	f7fe fd7a 	bl	8001f10 <HAL_GetTick>
 800341c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800341e:	e009      	b.n	8003434 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003420:	f7fe fd76 	bl	8001f10 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800342e:	d901      	bls.n	8003434 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e007      	b.n	8003444 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003440:	d1ee      	bne.n	8003420 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40023800 	.word	0x40023800
 8003450:	40007000 	.word	0x40007000

08003454 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800345c:	2300      	movs	r3, #0
 800345e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e291      	b.n	800398e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 8087 	beq.w	8003586 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003478:	4b96      	ldr	r3, [pc, #600]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 030c 	and.w	r3, r3, #12
 8003480:	2b04      	cmp	r3, #4
 8003482:	d00c      	beq.n	800349e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003484:	4b93      	ldr	r3, [pc, #588]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 030c 	and.w	r3, r3, #12
 800348c:	2b08      	cmp	r3, #8
 800348e:	d112      	bne.n	80034b6 <HAL_RCC_OscConfig+0x62>
 8003490:	4b90      	ldr	r3, [pc, #576]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800349c:	d10b      	bne.n	80034b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349e:	4b8d      	ldr	r3, [pc, #564]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d06c      	beq.n	8003584 <HAL_RCC_OscConfig+0x130>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d168      	bne.n	8003584 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e26b      	b.n	800398e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034be:	d106      	bne.n	80034ce <HAL_RCC_OscConfig+0x7a>
 80034c0:	4b84      	ldr	r3, [pc, #528]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a83      	ldr	r2, [pc, #524]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	e02e      	b.n	800352c <HAL_RCC_OscConfig+0xd8>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCC_OscConfig+0x9c>
 80034d6:	4b7f      	ldr	r3, [pc, #508]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a7e      	ldr	r2, [pc, #504]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	4b7c      	ldr	r3, [pc, #496]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a7b      	ldr	r2, [pc, #492]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	e01d      	b.n	800352c <HAL_RCC_OscConfig+0xd8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f8:	d10c      	bne.n	8003514 <HAL_RCC_OscConfig+0xc0>
 80034fa:	4b76      	ldr	r3, [pc, #472]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a75      	ldr	r2, [pc, #468]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	4b73      	ldr	r3, [pc, #460]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a72      	ldr	r2, [pc, #456]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 800350c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	e00b      	b.n	800352c <HAL_RCC_OscConfig+0xd8>
 8003514:	4b6f      	ldr	r3, [pc, #444]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a6e      	ldr	r2, [pc, #440]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 800351a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	4b6c      	ldr	r3, [pc, #432]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a6b      	ldr	r2, [pc, #428]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800352a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d013      	beq.n	800355c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003534:	f7fe fcec 	bl	8001f10 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800353c:	f7fe fce8 	bl	8001f10 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b64      	cmp	r3, #100	; 0x64
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e21f      	b.n	800398e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354e:	4b61      	ldr	r3, [pc, #388]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f0      	beq.n	800353c <HAL_RCC_OscConfig+0xe8>
 800355a:	e014      	b.n	8003586 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355c:	f7fe fcd8 	bl	8001f10 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003564:	f7fe fcd4 	bl	8001f10 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	; 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e20b      	b.n	800398e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003576:	4b57      	ldr	r3, [pc, #348]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x110>
 8003582:	e000      	b.n	8003586 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d069      	beq.n	8003666 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003592:	4b50      	ldr	r3, [pc, #320]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00b      	beq.n	80035b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800359e:	4b4d      	ldr	r3, [pc, #308]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d11c      	bne.n	80035e4 <HAL_RCC_OscConfig+0x190>
 80035aa:	4b4a      	ldr	r3, [pc, #296]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d116      	bne.n	80035e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b6:	4b47      	ldr	r3, [pc, #284]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <HAL_RCC_OscConfig+0x17a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d001      	beq.n	80035ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e1df      	b.n	800398e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ce:	4b41      	ldr	r3, [pc, #260]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	493d      	ldr	r1, [pc, #244]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035e2:	e040      	b.n	8003666 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d023      	beq.n	8003634 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ec:	4b39      	ldr	r3, [pc, #228]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a38      	ldr	r2, [pc, #224]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035f2:	f043 0301 	orr.w	r3, r3, #1
 80035f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fe fc8a 	bl	8001f10 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003600:	f7fe fc86 	bl	8001f10 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e1bd      	b.n	800398e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003612:	4b30      	ldr	r3, [pc, #192]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361e:	4b2d      	ldr	r3, [pc, #180]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4929      	ldr	r1, [pc, #164]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]
 8003632:	e018      	b.n	8003666 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003634:	4b27      	ldr	r3, [pc, #156]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a26      	ldr	r2, [pc, #152]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 800363a:	f023 0301 	bic.w	r3, r3, #1
 800363e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fe fc66 	bl	8001f10 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003648:	f7fe fc62 	bl	8001f10 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e199      	b.n	800398e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365a:	4b1e      	ldr	r3, [pc, #120]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d038      	beq.n	80036e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d019      	beq.n	80036ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800367a:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 800367c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800367e:	4a15      	ldr	r2, [pc, #84]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003686:	f7fe fc43 	bl	8001f10 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800368e:	f7fe fc3f 	bl	8001f10 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e176      	b.n	800398e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80036a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x23a>
 80036ac:	e01a      	b.n	80036e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ae:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80036b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b2:	4a08      	ldr	r2, [pc, #32]	; (80036d4 <HAL_RCC_OscConfig+0x280>)
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ba:	f7fe fc29 	bl	8001f10 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c2:	f7fe fc25 	bl	8001f10 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d903      	bls.n	80036d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e15c      	b.n	800398e <HAL_RCC_OscConfig+0x53a>
 80036d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d8:	4b91      	ldr	r3, [pc, #580]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 80036da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1ee      	bne.n	80036c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 80a4 	beq.w	800383a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f2:	4b8b      	ldr	r3, [pc, #556]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10d      	bne.n	800371a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fe:	4b88      	ldr	r3, [pc, #544]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	4a87      	ldr	r2, [pc, #540]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 8003704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003708:	6413      	str	r3, [r2, #64]	; 0x40
 800370a:	4b85      	ldr	r3, [pc, #532]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003712:	60bb      	str	r3, [r7, #8]
 8003714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003716:	2301      	movs	r3, #1
 8003718:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800371a:	4b82      	ldr	r3, [pc, #520]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d118      	bne.n	8003758 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003726:	4b7f      	ldr	r3, [pc, #508]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a7e      	ldr	r2, [pc, #504]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 800372c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003732:	f7fe fbed 	bl	8001f10 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800373a:	f7fe fbe9 	bl	8001f10 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b64      	cmp	r3, #100	; 0x64
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e120      	b.n	800398e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800374c:	4b75      	ldr	r3, [pc, #468]	; (8003924 <HAL_RCC_OscConfig+0x4d0>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d106      	bne.n	800376e <HAL_RCC_OscConfig+0x31a>
 8003760:	4b6f      	ldr	r3, [pc, #444]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003764:	4a6e      	ldr	r2, [pc, #440]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	6713      	str	r3, [r2, #112]	; 0x70
 800376c:	e02d      	b.n	80037ca <HAL_RCC_OscConfig+0x376>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10c      	bne.n	8003790 <HAL_RCC_OscConfig+0x33c>
 8003776:	4b6a      	ldr	r3, [pc, #424]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 8003778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377a:	4a69      	ldr	r2, [pc, #420]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 800377c:	f023 0301 	bic.w	r3, r3, #1
 8003780:	6713      	str	r3, [r2, #112]	; 0x70
 8003782:	4b67      	ldr	r3, [pc, #412]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 8003784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003786:	4a66      	ldr	r2, [pc, #408]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 8003788:	f023 0304 	bic.w	r3, r3, #4
 800378c:	6713      	str	r3, [r2, #112]	; 0x70
 800378e:	e01c      	b.n	80037ca <HAL_RCC_OscConfig+0x376>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2b05      	cmp	r3, #5
 8003796:	d10c      	bne.n	80037b2 <HAL_RCC_OscConfig+0x35e>
 8003798:	4b61      	ldr	r3, [pc, #388]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 800379a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379c:	4a60      	ldr	r2, [pc, #384]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 800379e:	f043 0304 	orr.w	r3, r3, #4
 80037a2:	6713      	str	r3, [r2, #112]	; 0x70
 80037a4:	4b5e      	ldr	r3, [pc, #376]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 80037a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a8:	4a5d      	ldr	r2, [pc, #372]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	6713      	str	r3, [r2, #112]	; 0x70
 80037b0:	e00b      	b.n	80037ca <HAL_RCC_OscConfig+0x376>
 80037b2:	4b5b      	ldr	r3, [pc, #364]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	4a5a      	ldr	r2, [pc, #360]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 80037b8:	f023 0301 	bic.w	r3, r3, #1
 80037bc:	6713      	str	r3, [r2, #112]	; 0x70
 80037be:	4b58      	ldr	r3, [pc, #352]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	4a57      	ldr	r2, [pc, #348]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 80037c4:	f023 0304 	bic.w	r3, r3, #4
 80037c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d015      	beq.n	80037fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d2:	f7fe fb9d 	bl	8001f10 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d8:	e00a      	b.n	80037f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037da:	f7fe fb99 	bl	8001f10 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e0ce      	b.n	800398e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f0:	4b4b      	ldr	r3, [pc, #300]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 80037f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0ee      	beq.n	80037da <HAL_RCC_OscConfig+0x386>
 80037fc:	e014      	b.n	8003828 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fe:	f7fe fb87 	bl	8001f10 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003804:	e00a      	b.n	800381c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003806:	f7fe fb83 	bl	8001f10 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	f241 3288 	movw	r2, #5000	; 0x1388
 8003814:	4293      	cmp	r3, r2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e0b8      	b.n	800398e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800381c:	4b40      	ldr	r3, [pc, #256]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1ee      	bne.n	8003806 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003828:	7dfb      	ldrb	r3, [r7, #23]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d105      	bne.n	800383a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800382e:	4b3c      	ldr	r3, [pc, #240]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	4a3b      	ldr	r2, [pc, #236]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 8003834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003838:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 80a4 	beq.w	800398c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003844:	4b36      	ldr	r3, [pc, #216]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 030c 	and.w	r3, r3, #12
 800384c:	2b08      	cmp	r3, #8
 800384e:	d06b      	beq.n	8003928 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	2b02      	cmp	r3, #2
 8003856:	d149      	bne.n	80038ec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003858:	4b31      	ldr	r3, [pc, #196]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a30      	ldr	r2, [pc, #192]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 800385e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fe fb54 	bl	8001f10 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800386c:	f7fe fb50 	bl	8001f10 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e087      	b.n	800398e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387e:	4b28      	ldr	r3, [pc, #160]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f0      	bne.n	800386c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69da      	ldr	r2, [r3, #28]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	019b      	lsls	r3, r3, #6
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	085b      	lsrs	r3, r3, #1
 80038a2:	3b01      	subs	r3, #1
 80038a4:	041b      	lsls	r3, r3, #16
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	061b      	lsls	r3, r3, #24
 80038ae:	4313      	orrs	r3, r2
 80038b0:	4a1b      	ldr	r2, [pc, #108]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 80038b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038b6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038b8:	4b19      	ldr	r3, [pc, #100]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a18      	ldr	r2, [pc, #96]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 80038be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c4:	f7fe fb24 	bl	8001f10 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038cc:	f7fe fb20 	bl	8001f10 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e057      	b.n	800398e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038de:	4b10      	ldr	r3, [pc, #64]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0x478>
 80038ea:	e04f      	b.n	800398c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ec:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a0b      	ldr	r2, [pc, #44]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 80038f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f8:	f7fe fb0a 	bl	8001f10 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003900:	f7fe fb06 	bl	8001f10 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e03d      	b.n	800398e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003912:	4b03      	ldr	r3, [pc, #12]	; (8003920 <HAL_RCC_OscConfig+0x4cc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f0      	bne.n	8003900 <HAL_RCC_OscConfig+0x4ac>
 800391e:	e035      	b.n	800398c <HAL_RCC_OscConfig+0x538>
 8003920:	40023800 	.word	0x40023800
 8003924:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003928:	4b1b      	ldr	r3, [pc, #108]	; (8003998 <HAL_RCC_OscConfig+0x544>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d028      	beq.n	8003988 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003940:	429a      	cmp	r2, r3
 8003942:	d121      	bne.n	8003988 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394e:	429a      	cmp	r2, r3
 8003950:	d11a      	bne.n	8003988 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003958:	4013      	ands	r3, r2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800395e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003960:	4293      	cmp	r3, r2
 8003962:	d111      	bne.n	8003988 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	085b      	lsrs	r3, r3, #1
 8003970:	3b01      	subs	r3, #1
 8003972:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003974:	429a      	cmp	r2, r3
 8003976:	d107      	bne.n	8003988 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003984:	429a      	cmp	r2, r3
 8003986:	d001      	beq.n	800398c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40023800 	.word	0x40023800

0800399c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0d0      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039b4:	4b6a      	ldr	r3, [pc, #424]	; (8003b60 <HAL_RCC_ClockConfig+0x1c4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 030f 	and.w	r3, r3, #15
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d910      	bls.n	80039e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c2:	4b67      	ldr	r3, [pc, #412]	; (8003b60 <HAL_RCC_ClockConfig+0x1c4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f023 020f 	bic.w	r2, r3, #15
 80039ca:	4965      	ldr	r1, [pc, #404]	; (8003b60 <HAL_RCC_ClockConfig+0x1c4>)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d2:	4b63      	ldr	r3, [pc, #396]	; (8003b60 <HAL_RCC_ClockConfig+0x1c4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d001      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e0b8      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d020      	beq.n	8003a32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039fc:	4b59      	ldr	r3, [pc, #356]	; (8003b64 <HAL_RCC_ClockConfig+0x1c8>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	4a58      	ldr	r2, [pc, #352]	; (8003b64 <HAL_RCC_ClockConfig+0x1c8>)
 8003a02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a14:	4b53      	ldr	r3, [pc, #332]	; (8003b64 <HAL_RCC_ClockConfig+0x1c8>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4a52      	ldr	r2, [pc, #328]	; (8003b64 <HAL_RCC_ClockConfig+0x1c8>)
 8003a1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a20:	4b50      	ldr	r3, [pc, #320]	; (8003b64 <HAL_RCC_ClockConfig+0x1c8>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	494d      	ldr	r1, [pc, #308]	; (8003b64 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d040      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d107      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a46:	4b47      	ldr	r3, [pc, #284]	; (8003b64 <HAL_RCC_ClockConfig+0x1c8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d115      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e07f      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d107      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a5e:	4b41      	ldr	r3, [pc, #260]	; (8003b64 <HAL_RCC_ClockConfig+0x1c8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d109      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e073      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a6e:	4b3d      	ldr	r3, [pc, #244]	; (8003b64 <HAL_RCC_ClockConfig+0x1c8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e06b      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a7e:	4b39      	ldr	r3, [pc, #228]	; (8003b64 <HAL_RCC_ClockConfig+0x1c8>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f023 0203 	bic.w	r2, r3, #3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	4936      	ldr	r1, [pc, #216]	; (8003b64 <HAL_RCC_ClockConfig+0x1c8>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a90:	f7fe fa3e 	bl	8001f10 <HAL_GetTick>
 8003a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a96:	e00a      	b.n	8003aae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a98:	f7fe fa3a 	bl	8001f10 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e053      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aae:	4b2d      	ldr	r3, [pc, #180]	; (8003b64 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 020c 	and.w	r2, r3, #12
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d1eb      	bne.n	8003a98 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ac0:	4b27      	ldr	r3, [pc, #156]	; (8003b60 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d210      	bcs.n	8003af0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ace:	4b24      	ldr	r3, [pc, #144]	; (8003b60 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 020f 	bic.w	r2, r3, #15
 8003ad6:	4922      	ldr	r1, [pc, #136]	; (8003b60 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ade:	4b20      	ldr	r3, [pc, #128]	; (8003b60 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d001      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e032      	b.n	8003b56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003afc:	4b19      	ldr	r3, [pc, #100]	; (8003b64 <HAL_RCC_ClockConfig+0x1c8>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4916      	ldr	r1, [pc, #88]	; (8003b64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d009      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b1a:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	490e      	ldr	r1, [pc, #56]	; (8003b64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b2e:	f000 f821 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 8003b32:	4602      	mov	r2, r0
 8003b34:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	091b      	lsrs	r3, r3, #4
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	490a      	ldr	r1, [pc, #40]	; (8003b68 <HAL_RCC_ClockConfig+0x1cc>)
 8003b40:	5ccb      	ldrb	r3, [r1, r3]
 8003b42:	fa22 f303 	lsr.w	r3, r2, r3
 8003b46:	4a09      	ldr	r2, [pc, #36]	; (8003b6c <HAL_RCC_ClockConfig+0x1d0>)
 8003b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b4a:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <HAL_RCC_ClockConfig+0x1d4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fd fc16 	bl	8001380 <HAL_InitTick>

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40023c00 	.word	0x40023c00
 8003b64:	40023800 	.word	0x40023800
 8003b68:	080089d0 	.word	0x080089d0
 8003b6c:	20000000 	.word	0x20000000
 8003b70:	20000010 	.word	0x20000010

08003b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b74:	b5b0      	push	{r4, r5, r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	6079      	str	r1, [r7, #4]
 8003b7e:	2100      	movs	r1, #0
 8003b80:	60f9      	str	r1, [r7, #12]
 8003b82:	2100      	movs	r1, #0
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003b86:	2100      	movs	r1, #0
 8003b88:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b8a:	4952      	ldr	r1, [pc, #328]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b8c:	6889      	ldr	r1, [r1, #8]
 8003b8e:	f001 010c 	and.w	r1, r1, #12
 8003b92:	2908      	cmp	r1, #8
 8003b94:	d00d      	beq.n	8003bb2 <HAL_RCC_GetSysClockFreq+0x3e>
 8003b96:	2908      	cmp	r1, #8
 8003b98:	f200 8094 	bhi.w	8003cc4 <HAL_RCC_GetSysClockFreq+0x150>
 8003b9c:	2900      	cmp	r1, #0
 8003b9e:	d002      	beq.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x32>
 8003ba0:	2904      	cmp	r1, #4
 8003ba2:	d003      	beq.n	8003bac <HAL_RCC_GetSysClockFreq+0x38>
 8003ba4:	e08e      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ba6:	4b4c      	ldr	r3, [pc, #304]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003ba8:	60bb      	str	r3, [r7, #8]
      break;
 8003baa:	e08e      	b.n	8003cca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bac:	4b4b      	ldr	r3, [pc, #300]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x168>)
 8003bae:	60bb      	str	r3, [r7, #8]
      break;
 8003bb0:	e08b      	b.n	8003cca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bb2:	4948      	ldr	r1, [pc, #288]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bb4:	6849      	ldr	r1, [r1, #4]
 8003bb6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003bba:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003bbc:	4945      	ldr	r1, [pc, #276]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bbe:	6849      	ldr	r1, [r1, #4]
 8003bc0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003bc4:	2900      	cmp	r1, #0
 8003bc6:	d024      	beq.n	8003c12 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc8:	4942      	ldr	r1, [pc, #264]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bca:	6849      	ldr	r1, [r1, #4]
 8003bcc:	0989      	lsrs	r1, r1, #6
 8003bce:	4608      	mov	r0, r1
 8003bd0:	f04f 0100 	mov.w	r1, #0
 8003bd4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003bd8:	f04f 0500 	mov.w	r5, #0
 8003bdc:	ea00 0204 	and.w	r2, r0, r4
 8003be0:	ea01 0305 	and.w	r3, r1, r5
 8003be4:	493d      	ldr	r1, [pc, #244]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x168>)
 8003be6:	fb01 f003 	mul.w	r0, r1, r3
 8003bea:	2100      	movs	r1, #0
 8003bec:	fb01 f102 	mul.w	r1, r1, r2
 8003bf0:	1844      	adds	r4, r0, r1
 8003bf2:	493a      	ldr	r1, [pc, #232]	; (8003cdc <HAL_RCC_GetSysClockFreq+0x168>)
 8003bf4:	fba2 0101 	umull	r0, r1, r2, r1
 8003bf8:	1863      	adds	r3, r4, r1
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	f7fc fb04 	bl	8000210 <__aeabi_uldivmod>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	e04a      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c12:	4b30      	ldr	r3, [pc, #192]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	099b      	lsrs	r3, r3, #6
 8003c18:	461a      	mov	r2, r3
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c22:	f04f 0100 	mov.w	r1, #0
 8003c26:	ea02 0400 	and.w	r4, r2, r0
 8003c2a:	ea03 0501 	and.w	r5, r3, r1
 8003c2e:	4620      	mov	r0, r4
 8003c30:	4629      	mov	r1, r5
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	014b      	lsls	r3, r1, #5
 8003c3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c40:	0142      	lsls	r2, r0, #5
 8003c42:	4610      	mov	r0, r2
 8003c44:	4619      	mov	r1, r3
 8003c46:	1b00      	subs	r0, r0, r4
 8003c48:	eb61 0105 	sbc.w	r1, r1, r5
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	018b      	lsls	r3, r1, #6
 8003c56:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c5a:	0182      	lsls	r2, r0, #6
 8003c5c:	1a12      	subs	r2, r2, r0
 8003c5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c62:	f04f 0000 	mov.w	r0, #0
 8003c66:	f04f 0100 	mov.w	r1, #0
 8003c6a:	00d9      	lsls	r1, r3, #3
 8003c6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c70:	00d0      	lsls	r0, r2, #3
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	1912      	adds	r2, r2, r4
 8003c78:	eb45 0303 	adc.w	r3, r5, r3
 8003c7c:	f04f 0000 	mov.w	r0, #0
 8003c80:	f04f 0100 	mov.w	r1, #0
 8003c84:	0299      	lsls	r1, r3, #10
 8003c86:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c8a:	0290      	lsls	r0, r2, #10
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4610      	mov	r0, r2
 8003c92:	4619      	mov	r1, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	461a      	mov	r2, r3
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	f7fc fab8 	bl	8000210 <__aeabi_uldivmod>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	0c1b      	lsrs	r3, r3, #16
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc0:	60bb      	str	r3, [r7, #8]
      break;
 8003cc2:	e002      	b.n	8003cca <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cc4:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003cc6:	60bb      	str	r3, [r7, #8]
      break;
 8003cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cca:	68bb      	ldr	r3, [r7, #8]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	00f42400 	.word	0x00f42400
 8003cdc:	017d7840 	.word	0x017d7840

08003ce0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ce4:	4b03      	ldr	r3, [pc, #12]	; (8003cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	20000000 	.word	0x20000000

08003cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cfc:	f7ff fff0 	bl	8003ce0 <HAL_RCC_GetHCLKFreq>
 8003d00:	4602      	mov	r2, r0
 8003d02:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	0a9b      	lsrs	r3, r3, #10
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	4903      	ldr	r1, [pc, #12]	; (8003d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d0e:	5ccb      	ldrb	r3, [r1, r3]
 8003d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	080089e0 	.word	0x080089e0

08003d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d24:	f7ff ffdc 	bl	8003ce0 <HAL_RCC_GetHCLKFreq>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	0b5b      	lsrs	r3, r3, #13
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	4903      	ldr	r1, [pc, #12]	; (8003d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d36:	5ccb      	ldrb	r3, [r1, r3]
 8003d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40023800 	.word	0x40023800
 8003d44:	080089e0 	.word	0x080089e0

08003d48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	220f      	movs	r2, #15
 8003d56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d58:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <HAL_RCC_GetClockConfig+0x5c>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 0203 	and.w	r2, r3, #3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d64:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <HAL_RCC_GetClockConfig+0x5c>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d70:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <HAL_RCC_GetClockConfig+0x5c>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003d7c:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <HAL_RCC_GetClockConfig+0x5c>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	08db      	lsrs	r3, r3, #3
 8003d82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d8a:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <HAL_RCC_GetClockConfig+0x60>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 020f 	and.w	r2, r3, #15
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	601a      	str	r2, [r3, #0]
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40023c00 	.word	0x40023c00

08003dac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d012      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003dd4:	4b69      	ldr	r3, [pc, #420]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	4a68      	ldr	r2, [pc, #416]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dda:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003dde:	6093      	str	r3, [r2, #8]
 8003de0:	4b66      	ldr	r3, [pc, #408]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de8:	4964      	ldr	r1, [pc, #400]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003df6:	2301      	movs	r3, #1
 8003df8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d017      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e06:	4b5d      	ldr	r3, [pc, #372]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e14:	4959      	ldr	r1, [pc, #356]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e24:	d101      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e26:	2301      	movs	r3, #1
 8003e28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e32:	2301      	movs	r3, #1
 8003e34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d017      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e42:	4b4e      	ldr	r3, [pc, #312]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	494a      	ldr	r1, [pc, #296]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e60:	d101      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e62:	2301      	movs	r3, #1
 8003e64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0320 	and.w	r3, r3, #32
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 808b 	beq.w	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e90:	4b3a      	ldr	r3, [pc, #232]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	4a39      	ldr	r2, [pc, #228]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e9c:	4b37      	ldr	r3, [pc, #220]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ea8:	4b35      	ldr	r3, [pc, #212]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a34      	ldr	r2, [pc, #208]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb4:	f7fe f82c 	bl	8001f10 <HAL_GetTick>
 8003eb8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ebc:	f7fe f828 	bl	8001f10 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b64      	cmp	r3, #100	; 0x64
 8003ec8:	d901      	bls.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e357      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ece:	4b2c      	ldr	r3, [pc, #176]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003eda:	4b28      	ldr	r3, [pc, #160]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d035      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d02e      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ef8:	4b20      	ldr	r3, [pc, #128]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f00:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f02:	4b1e      	ldr	r3, [pc, #120]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f06:	4a1d      	ldr	r2, [pc, #116]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f0e:	4b1b      	ldr	r3, [pc, #108]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	4a1a      	ldr	r2, [pc, #104]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003f1a:	4a18      	ldr	r2, [pc, #96]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f20:	4b16      	ldr	r3, [pc, #88]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d114      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2c:	f7fd fff0 	bl	8001f10 <HAL_GetTick>
 8003f30:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f32:	e00a      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f34:	f7fd ffec 	bl	8001f10 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e319      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4a:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0ee      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f62:	d111      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f64:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f70:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f72:	400b      	ands	r3, r1
 8003f74:	4901      	ldr	r1, [pc, #4]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	608b      	str	r3, [r1, #8]
 8003f7a:	e00b      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	40007000 	.word	0x40007000
 8003f84:	0ffffcff 	.word	0x0ffffcff
 8003f88:	4bb1      	ldr	r3, [pc, #708]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4ab0      	ldr	r2, [pc, #704]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f92:	6093      	str	r3, [r2, #8]
 8003f94:	4bae      	ldr	r3, [pc, #696]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa0:	49ab      	ldr	r1, [pc, #684]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0310 	and.w	r3, r3, #16
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d010      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fb2:	4ba7      	ldr	r3, [pc, #668]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fb8:	4aa5      	ldr	r2, [pc, #660]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fbe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003fc2:	4ba3      	ldr	r3, [pc, #652]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fc4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	49a0      	ldr	r1, [pc, #640]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fe0:	4b9b      	ldr	r3, [pc, #620]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fee:	4998      	ldr	r1, [pc, #608]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004002:	4b93      	ldr	r3, [pc, #588]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004008:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004010:	498f      	ldr	r1, [pc, #572]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00a      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004024:	4b8a      	ldr	r3, [pc, #552]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004032:	4987      	ldr	r1, [pc, #540]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004046:	4b82      	ldr	r3, [pc, #520]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004054:	497e      	ldr	r1, [pc, #504]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00a      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004068:	4b79      	ldr	r3, [pc, #484]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800406a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406e:	f023 0203 	bic.w	r2, r3, #3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004076:	4976      	ldr	r1, [pc, #472]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800408a:	4b71      	ldr	r3, [pc, #452]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800408c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004090:	f023 020c 	bic.w	r2, r3, #12
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004098:	496d      	ldr	r1, [pc, #436]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040ac:	4b68      	ldr	r3, [pc, #416]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ba:	4965      	ldr	r1, [pc, #404]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040ce:	4b60      	ldr	r3, [pc, #384]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040dc:	495c      	ldr	r1, [pc, #368]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040f0:	4b57      	ldr	r3, [pc, #348]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fe:	4954      	ldr	r1, [pc, #336]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004112:	4b4f      	ldr	r3, [pc, #316]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004118:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004120:	494b      	ldr	r1, [pc, #300]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004134:	4b46      	ldr	r3, [pc, #280]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004142:	4943      	ldr	r1, [pc, #268]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004156:	4b3e      	ldr	r3, [pc, #248]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004164:	493a      	ldr	r1, [pc, #232]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004178:	4b35      	ldr	r3, [pc, #212]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004186:	4932      	ldr	r1, [pc, #200]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d011      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800419a:	4b2d      	ldr	r3, [pc, #180]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800419c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041a8:	4929      	ldr	r1, [pc, #164]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041b8:	d101      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80041ba:	2301      	movs	r3, #1
 80041bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80041ca:	2301      	movs	r3, #1
 80041cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041da:	4b1d      	ldr	r3, [pc, #116]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e8:	4919      	ldr	r1, [pc, #100]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00b      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041fc:	4b14      	ldr	r3, [pc, #80]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004202:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800420c:	4910      	ldr	r1, [pc, #64]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d006      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 80d9 	beq.w	80043da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004228:	4b09      	ldr	r3, [pc, #36]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a08      	ldr	r2, [pc, #32]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800422e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004232:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004234:	f7fd fe6c 	bl	8001f10 <HAL_GetTick>
 8004238:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800423a:	e00b      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800423c:	f7fd fe68 	bl	8001f10 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b64      	cmp	r3, #100	; 0x64
 8004248:	d904      	bls.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e197      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800424e:	bf00      	nop
 8004250:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004254:	4b6c      	ldr	r3, [pc, #432]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1ed      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d021      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004270:	2b00      	cmp	r3, #0
 8004272:	d11d      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004274:	4b64      	ldr	r3, [pc, #400]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800427a:	0c1b      	lsrs	r3, r3, #16
 800427c:	f003 0303 	and.w	r3, r3, #3
 8004280:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004282:	4b61      	ldr	r3, [pc, #388]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004288:	0e1b      	lsrs	r3, r3, #24
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	019a      	lsls	r2, r3, #6
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	041b      	lsls	r3, r3, #16
 800429a:	431a      	orrs	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	061b      	lsls	r3, r3, #24
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	071b      	lsls	r3, r3, #28
 80042a8:	4957      	ldr	r1, [pc, #348]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d004      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042c4:	d00a      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d02e      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042da:	d129      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042dc:	4b4a      	ldr	r3, [pc, #296]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e2:	0c1b      	lsrs	r3, r3, #16
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042ea:	4b47      	ldr	r3, [pc, #284]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f0:	0f1b      	lsrs	r3, r3, #28
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	019a      	lsls	r2, r3, #6
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	041b      	lsls	r3, r3, #16
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	061b      	lsls	r3, r3, #24
 800430a:	431a      	orrs	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	071b      	lsls	r3, r3, #28
 8004310:	493d      	ldr	r1, [pc, #244]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004318:	4b3b      	ldr	r3, [pc, #236]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800431a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800431e:	f023 021f 	bic.w	r2, r3, #31
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	3b01      	subs	r3, #1
 8004328:	4937      	ldr	r1, [pc, #220]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d01d      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800433c:	4b32      	ldr	r3, [pc, #200]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800433e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004342:	0e1b      	lsrs	r3, r3, #24
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800434a:	4b2f      	ldr	r3, [pc, #188]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800434c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004350:	0f1b      	lsrs	r3, r3, #28
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	019a      	lsls	r2, r3, #6
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	041b      	lsls	r3, r3, #16
 8004364:	431a      	orrs	r2, r3
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	061b      	lsls	r3, r3, #24
 800436a:	431a      	orrs	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	071b      	lsls	r3, r3, #28
 8004370:	4925      	ldr	r1, [pc, #148]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d011      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	019a      	lsls	r2, r3, #6
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	041b      	lsls	r3, r3, #16
 8004390:	431a      	orrs	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	061b      	lsls	r3, r3, #24
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	071b      	lsls	r3, r3, #28
 80043a0:	4919      	ldr	r1, [pc, #100]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043a8:	4b17      	ldr	r3, [pc, #92]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a16      	ldr	r2, [pc, #88]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043b4:	f7fd fdac 	bl	8001f10 <HAL_GetTick>
 80043b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043bc:	f7fd fda8 	bl	8001f10 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b64      	cmp	r3, #100	; 0x64
 80043c8:	d901      	bls.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e0d7      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043ce:	4b0e      	ldr	r3, [pc, #56]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0f0      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	f040 80cd 	bne.w	800457c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043e2:	4b09      	ldr	r3, [pc, #36]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a08      	ldr	r2, [pc, #32]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ee:	f7fd fd8f 	bl	8001f10 <HAL_GetTick>
 80043f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043f4:	e00a      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043f6:	f7fd fd8b 	bl	8001f10 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b64      	cmp	r3, #100	; 0x64
 8004402:	d903      	bls.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e0ba      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004408:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800440c:	4b5e      	ldr	r3, [pc, #376]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004418:	d0ed      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442a:	2b00      	cmp	r3, #0
 800442c:	d009      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004436:	2b00      	cmp	r3, #0
 8004438:	d02e      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	d12a      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004442:	4b51      	ldr	r3, [pc, #324]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004448:	0c1b      	lsrs	r3, r3, #16
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004450:	4b4d      	ldr	r3, [pc, #308]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004456:	0f1b      	lsrs	r3, r3, #28
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	019a      	lsls	r2, r3, #6
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	041b      	lsls	r3, r3, #16
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	061b      	lsls	r3, r3, #24
 8004470:	431a      	orrs	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	071b      	lsls	r3, r3, #28
 8004476:	4944      	ldr	r1, [pc, #272]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800447e:	4b42      	ldr	r3, [pc, #264]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004484:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448c:	3b01      	subs	r3, #1
 800448e:	021b      	lsls	r3, r3, #8
 8004490:	493d      	ldr	r1, [pc, #244]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004492:	4313      	orrs	r3, r2
 8004494:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d022      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044ac:	d11d      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044ae:	4b36      	ldr	r3, [pc, #216]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b4:	0e1b      	lsrs	r3, r3, #24
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044bc:	4b32      	ldr	r3, [pc, #200]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c2:	0f1b      	lsrs	r3, r3, #28
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	019a      	lsls	r2, r3, #6
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	041b      	lsls	r3, r3, #16
 80044d6:	431a      	orrs	r2, r3
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	061b      	lsls	r3, r3, #24
 80044dc:	431a      	orrs	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	071b      	lsls	r3, r3, #28
 80044e2:	4929      	ldr	r1, [pc, #164]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d028      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044f6:	4b24      	ldr	r3, [pc, #144]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fc:	0e1b      	lsrs	r3, r3, #24
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004504:	4b20      	ldr	r3, [pc, #128]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450a:	0c1b      	lsrs	r3, r3, #16
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	019a      	lsls	r2, r3, #6
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	041b      	lsls	r3, r3, #16
 800451c:	431a      	orrs	r2, r3
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	061b      	lsls	r3, r3, #24
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	071b      	lsls	r3, r3, #28
 800452a:	4917      	ldr	r1, [pc, #92]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004532:	4b15      	ldr	r3, [pc, #84]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004538:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	4911      	ldr	r1, [pc, #68]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004548:	4b0f      	ldr	r3, [pc, #60]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a0e      	ldr	r2, [pc, #56]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800454e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004552:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004554:	f7fd fcdc 	bl	8001f10 <HAL_GetTick>
 8004558:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800455a:	e008      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800455c:	f7fd fcd8 	bl	8001f10 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b64      	cmp	r3, #100	; 0x64
 8004568:	d901      	bls.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e007      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800456e:	4b06      	ldr	r3, [pc, #24]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800457a:	d1ef      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3720      	adds	r7, #32
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40023800 	.word	0x40023800

0800458c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004594:	2300      	movs	r3, #0
 8004596:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800459c:	2300      	movs	r3, #0
 800459e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045aa:	f040 808c 	bne.w	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 80045ae:	4b95      	ldr	r3, [pc, #596]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80045b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045b4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80045bc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045c4:	d07c      	beq.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045cc:	d87d      	bhi.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d004      	beq.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045da:	d039      	beq.n	8004650 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80045dc:	e075      	b.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80045de:	4b89      	ldr	r3, [pc, #548]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d108      	bne.n	80045fc <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80045ea:	4b86      	ldr	r3, [pc, #536]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045f2:	4a85      	ldr	r2, [pc, #532]	; (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80045f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	e007      	b.n	800460c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80045fc:	4b81      	ldr	r3, [pc, #516]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004604:	4a81      	ldr	r2, [pc, #516]	; (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004606:	fbb2 f3f3 	udiv	r3, r2, r3
 800460a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800460c:	4b7d      	ldr	r3, [pc, #500]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004612:	0e1b      	lsrs	r3, r3, #24
 8004614:	f003 030f 	and.w	r3, r3, #15
 8004618:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800461a:	4b7a      	ldr	r3, [pc, #488]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800461c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004620:	099b      	lsrs	r3, r3, #6
 8004622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	fb02 f203 	mul.w	r2, r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004632:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004634:	4b73      	ldr	r3, [pc, #460]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004636:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800463a:	0a1b      	lsrs	r3, r3, #8
 800463c:	f003 031f 	and.w	r3, r3, #31
 8004640:	3301      	adds	r3, #1
 8004642:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	fbb2 f3f3 	udiv	r3, r2, r3
 800464c:	617b      	str	r3, [r7, #20]
        break;
 800464e:	e03d      	b.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004650:	4b6c      	ldr	r3, [pc, #432]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d108      	bne.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800465c:	4b69      	ldr	r3, [pc, #420]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004664:	4a68      	ldr	r2, [pc, #416]	; (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004666:	fbb2 f3f3 	udiv	r3, r2, r3
 800466a:	613b      	str	r3, [r7, #16]
 800466c:	e007      	b.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800466e:	4b65      	ldr	r3, [pc, #404]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004676:	4a65      	ldr	r2, [pc, #404]	; (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004678:	fbb2 f3f3 	udiv	r3, r2, r3
 800467c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800467e:	4b61      	ldr	r3, [pc, #388]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004684:	0e1b      	lsrs	r3, r3, #24
 8004686:	f003 030f 	and.w	r3, r3, #15
 800468a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800468c:	4b5d      	ldr	r3, [pc, #372]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800468e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004692:	099b      	lsrs	r3, r3, #6
 8004694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	fb02 f203 	mul.w	r2, r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80046a6:	4b57      	ldr	r3, [pc, #348]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80046a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ac:	f003 031f 	and.w	r3, r3, #31
 80046b0:	3301      	adds	r3, #1
 80046b2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046bc:	617b      	str	r3, [r7, #20]
        break;
 80046be:	e005      	b.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 80046c0:	4b53      	ldr	r3, [pc, #332]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80046c2:	617b      	str	r3, [r7, #20]
        break;
 80046c4:	e002      	b.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 80046c6:	bf00      	nop
 80046c8:	e000      	b.n	80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 80046ca:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046d2:	f040 808c 	bne.w	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 80046d6:	4b4b      	ldr	r3, [pc, #300]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80046d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046dc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80046e4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046ec:	d07c      	beq.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046f4:	d87d      	bhi.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d004      	beq.n	8004706 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004702:	d039      	beq.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004704:	e075      	b.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004706:	4b3f      	ldr	r3, [pc, #252]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d108      	bne.n	8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004712:	4b3c      	ldr	r3, [pc, #240]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800471a:	4a3b      	ldr	r2, [pc, #236]	; (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800471c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	e007      	b.n	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004724:	4b37      	ldr	r3, [pc, #220]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800472c:	4a37      	ldr	r2, [pc, #220]	; (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800472e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004732:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004734:	4b33      	ldr	r3, [pc, #204]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473a:	0e1b      	lsrs	r3, r3, #24
 800473c:	f003 030f 	and.w	r3, r3, #15
 8004740:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004742:	4b30      	ldr	r3, [pc, #192]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004748:	099b      	lsrs	r3, r3, #6
 800474a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	fb02 f203 	mul.w	r2, r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	fbb2 f3f3 	udiv	r3, r2, r3
 800475a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800475c:	4b29      	ldr	r3, [pc, #164]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800475e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004762:	0a1b      	lsrs	r3, r3, #8
 8004764:	f003 031f 	and.w	r3, r3, #31
 8004768:	3301      	adds	r3, #1
 800476a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	fbb2 f3f3 	udiv	r3, r2, r3
 8004774:	617b      	str	r3, [r7, #20]
        break;
 8004776:	e03d      	b.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004778:	4b22      	ldr	r3, [pc, #136]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d108      	bne.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004784:	4b1f      	ldr	r3, [pc, #124]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800478c:	4a1e      	ldr	r2, [pc, #120]	; (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800478e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004792:	613b      	str	r3, [r7, #16]
 8004794:	e007      	b.n	80047a6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004796:	4b1b      	ldr	r3, [pc, #108]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800479e:	4a1b      	ldr	r2, [pc, #108]	; (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80047a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80047a6:	4b17      	ldr	r3, [pc, #92]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80047a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ac:	0e1b      	lsrs	r3, r3, #24
 80047ae:	f003 030f 	and.w	r3, r3, #15
 80047b2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80047b4:	4b13      	ldr	r3, [pc, #76]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80047b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ba:	099b      	lsrs	r3, r3, #6
 80047bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	fb02 f203 	mul.w	r2, r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047cc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80047ce:	4b0d      	ldr	r3, [pc, #52]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80047d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047d4:	f003 031f 	and.w	r3, r3, #31
 80047d8:	3301      	adds	r3, #1
 80047da:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e4:	617b      	str	r3, [r7, #20]
        break;
 80047e6:	e005      	b.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 80047e8:	4b09      	ldr	r3, [pc, #36]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80047ea:	617b      	str	r3, [r7, #20]
        break;
 80047ec:	e002      	b.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 80047ee:	bf00      	nop
 80047f0:	e000      	b.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 80047f2:	bf00      	nop

  return frequency;
 80047f4:	697b      	ldr	r3, [r7, #20]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	371c      	adds	r7, #28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40023800 	.word	0x40023800
 8004808:	00f42400 	.word	0x00f42400
 800480c:	017d7840 	.word	0x017d7840
 8004810:	00bb8000 	.word	0x00bb8000

08004814 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800481c:	2300      	movs	r3, #0
 800481e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8004820:	2300      	movs	r3, #0
 8004822:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8004824:	2300      	movs	r3, #0
 8004826:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e156      	b.n	8004ae0 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7fc fd4e 	bl	80012e8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f95b 	bl	8004b10 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d00c      	beq.n	800487c <HAL_SAI_Init+0x68>
 8004862:	2b02      	cmp	r3, #2
 8004864:	d80d      	bhi.n	8004882 <HAL_SAI_Init+0x6e>
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <HAL_SAI_Init+0x5c>
 800486a:	2b01      	cmp	r3, #1
 800486c:	d003      	beq.n	8004876 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800486e:	e008      	b.n	8004882 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	61fb      	str	r3, [r7, #28]
      break;
 8004874:	e006      	b.n	8004884 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004876:	2310      	movs	r3, #16
 8004878:	61fb      	str	r3, [r7, #28]
      break;
 800487a:	e003      	b.n	8004884 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800487c:	2320      	movs	r3, #32
 800487e:	61fb      	str	r3, [r7, #28]
      break;
 8004880:	e000      	b.n	8004884 <HAL_SAI_Init+0x70>
      break;
 8004882:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	2b03      	cmp	r3, #3
 800488a:	d81e      	bhi.n	80048ca <HAL_SAI_Init+0xb6>
 800488c:	a201      	add	r2, pc, #4	; (adr r2, 8004894 <HAL_SAI_Init+0x80>)
 800488e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004892:	bf00      	nop
 8004894:	080048a5 	.word	0x080048a5
 8004898:	080048ab 	.word	0x080048ab
 800489c:	080048b3 	.word	0x080048b3
 80048a0:	080048bb 	.word	0x080048bb
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]
    }
    break;
 80048a8:	e010      	b.n	80048cc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80048aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048ae:	617b      	str	r3, [r7, #20]
    }
    break;
 80048b0:	e00c      	b.n	80048cc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80048b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048b6:	617b      	str	r3, [r7, #20]
    }
    break;
 80048b8:	e008      	b.n	80048cc <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80048ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048be:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	f043 0301 	orr.w	r3, r3, #1
 80048c6:	61fb      	str	r3, [r7, #28]
    }
    break;
 80048c8:	e000      	b.n	80048cc <HAL_SAI_Init+0xb8>
    default:
      break;
 80048ca:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a85      	ldr	r2, [pc, #532]	; (8004ae8 <HAL_SAI_Init+0x2d4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d004      	beq.n	80048e0 <HAL_SAI_Init+0xcc>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a84      	ldr	r2, [pc, #528]	; (8004aec <HAL_SAI_Init+0x2d8>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d103      	bne.n	80048e8 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80048e0:	4a83      	ldr	r2, [pc, #524]	; (8004af0 <HAL_SAI_Init+0x2dc>)
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	e002      	b.n	80048ee <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80048e8:	4a82      	ldr	r2, [pc, #520]	; (8004af4 <HAL_SAI_Init+0x2e0>)
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d04c      	beq.n	8004990 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80048f6:	2300      	movs	r3, #0
 80048f8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a7a      	ldr	r2, [pc, #488]	; (8004ae8 <HAL_SAI_Init+0x2d4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d004      	beq.n	800490e <HAL_SAI_Init+0xfa>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a78      	ldr	r2, [pc, #480]	; (8004aec <HAL_SAI_Init+0x2d8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d104      	bne.n	8004918 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800490e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004912:	f7ff fe3b 	bl	800458c <HAL_RCCEx_GetPeriphCLKFreq>
 8004916:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a76      	ldr	r2, [pc, #472]	; (8004af8 <HAL_SAI_Init+0x2e4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <HAL_SAI_Init+0x118>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a75      	ldr	r2, [pc, #468]	; (8004afc <HAL_SAI_Init+0x2e8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d104      	bne.n	8004936 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800492c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004930:	f7ff fe2c 	bl	800458c <HAL_RCCEx_GetPeriphCLKFreq>
 8004934:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	461a      	mov	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	025b      	lsls	r3, r3, #9
 8004948:	fbb2 f3f3 	udiv	r3, r2, r3
 800494c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4a6b      	ldr	r2, [pc, #428]	; (8004b00 <HAL_SAI_Init+0x2ec>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	08da      	lsrs	r2, r3, #3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800495c:	68f9      	ldr	r1, [r7, #12]
 800495e:	4b68      	ldr	r3, [pc, #416]	; (8004b00 <HAL_SAI_Init+0x2ec>)
 8004960:	fba3 2301 	umull	r2, r3, r3, r1
 8004964:	08da      	lsrs	r2, r3, #3
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	1aca      	subs	r2, r1, r3
 8004970:	2a08      	cmp	r2, #8
 8004972:	d904      	bls.n	800497e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	2b04      	cmp	r3, #4
 8004984:	d104      	bne.n	8004990 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	085a      	lsrs	r2, r3, #1
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <HAL_SAI_Init+0x18c>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2b02      	cmp	r3, #2
 800499e:	d109      	bne.n	80049b4 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_SAI_Init+0x198>
 80049a8:	2300      	movs	r3, #0
 80049aa:	e001      	b.n	80049b0 <HAL_SAI_Init+0x19c>
 80049ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049b0:	61bb      	str	r3, [r7, #24]
 80049b2:	e008      	b.n	80049c6 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d102      	bne.n	80049c2 <HAL_SAI_Init+0x1ae>
 80049bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049c0:	e000      	b.n	80049c4 <HAL_SAI_Init+0x1b0>
 80049c2:	2300      	movs	r3, #0
 80049c4:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6819      	ldr	r1, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	4b4c      	ldr	r3, [pc, #304]	; (8004b04 <HAL_SAI_Init+0x2f0>)
 80049d2:	400b      	ands	r3, r1
 80049d4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6819      	ldr	r1, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80049ea:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	431a      	orrs	r2, r3
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 80049fe:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004a0a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	051b      	lsls	r3, r3, #20
 8004a12:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6859      	ldr	r1, [r3, #4]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4b38      	ldr	r3, [pc, #224]	; (8004b08 <HAL_SAI_Init+0x2f4>)
 8004a28:	400b      	ands	r3, r1
 8004a2a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6859      	ldr	r1, [r3, #4]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699a      	ldr	r2, [r3, #24]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6899      	ldr	r1, [r3, #8]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	4b2d      	ldr	r3, [pc, #180]	; (8004b0c <HAL_SAI_Init+0x2f8>)
 8004a56:	400b      	ands	r3, r1
 8004a58:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6899      	ldr	r1, [r3, #8]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004a6a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8004a70:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8004a76:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004a80:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68d9      	ldr	r1, [r3, #12]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004a98:	400b      	ands	r3, r1
 8004a9a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68d9      	ldr	r1, [r3, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aaa:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab0:	041b      	lsls	r3, r3, #16
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	021b      	lsls	r3, r3, #8
 8004abc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3720      	adds	r7, #32
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40015804 	.word	0x40015804
 8004aec:	40015824 	.word	0x40015824
 8004af0:	40015800 	.word	0x40015800
 8004af4:	40015c00 	.word	0x40015c00
 8004af8:	40015c04 	.word	0x40015c04
 8004afc:	40015c24 	.word	0x40015c24
 8004b00:	cccccccd 	.word	0xcccccccd
 8004b04:	ff05c010 	.word	0xff05c010
 8004b08:	ffff1ff0 	.word	0xffff1ff0
 8004b0c:	fff88000 	.word	0xfff88000

08004b10 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8004b18:	4b17      	ldr	r3, [pc, #92]	; (8004b78 <SAI_Disable+0x68>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a17      	ldr	r2, [pc, #92]	; (8004b7c <SAI_Disable+0x6c>)
 8004b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b22:	0b1b      	lsrs	r3, r3, #12
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004b3a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	1e5a      	subs	r2, r3, #1
 8004b40:	60fa      	str	r2, [r7, #12]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10a      	bne.n	8004b5c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	72fb      	strb	r3, [r7, #11]
      break;
 8004b5a:	e006      	b.n	8004b6a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1e8      	bne.n	8004b3c <SAI_Disable+0x2c>

  return status;
 8004b6a:	7afb      	ldrb	r3, [r7, #11]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	20000000 	.word	0x20000000
 8004b7c:	95cbec1b 	.word	0x95cbec1b

08004b80 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e025      	b.n	8004be0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d106      	bne.n	8004bae <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7fc fb93 	bl	80012d4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	f000 ff3d 	bl	8005a40 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6818      	ldr	r0, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	6839      	ldr	r1, [r7, #0]
 8004bd2:	f000 ffa7 	bl	8005b24 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d101      	bne.n	8004c04 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8004c00:	2302      	movs	r3, #2
 8004c02:	e018      	b.n	8004c36 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f001 f805 	bl	8005c24 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d104      	bne.n	8004c2c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2205      	movs	r2, #5
 8004c26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004c2a:	e003      	b.n	8004c34 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b082      	sub	sp, #8
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d101      	bne.n	8004c58 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004c54:	2302      	movs	r3, #2
 8004c56:	e00e      	b.n	8004c76 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6839      	ldr	r1, [r7, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f001 f800 	bl	8005c6c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b082      	sub	sp, #8
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e049      	b.n	8004d24 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d106      	bne.n	8004caa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f841 	bl	8004d2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2202      	movs	r2, #2
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	f000 f9ff 	bl	80050c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d001      	beq.n	8004d58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e054      	b.n	8004e02 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0201 	orr.w	r2, r2, #1
 8004d6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a26      	ldr	r2, [pc, #152]	; (8004e10 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d022      	beq.n	8004dc0 <HAL_TIM_Base_Start_IT+0x80>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d82:	d01d      	beq.n	8004dc0 <HAL_TIM_Base_Start_IT+0x80>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a22      	ldr	r2, [pc, #136]	; (8004e14 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d018      	beq.n	8004dc0 <HAL_TIM_Base_Start_IT+0x80>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a21      	ldr	r2, [pc, #132]	; (8004e18 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d013      	beq.n	8004dc0 <HAL_TIM_Base_Start_IT+0x80>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a1f      	ldr	r2, [pc, #124]	; (8004e1c <HAL_TIM_Base_Start_IT+0xdc>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d00e      	beq.n	8004dc0 <HAL_TIM_Base_Start_IT+0x80>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a1e      	ldr	r2, [pc, #120]	; (8004e20 <HAL_TIM_Base_Start_IT+0xe0>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d009      	beq.n	8004dc0 <HAL_TIM_Base_Start_IT+0x80>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a1c      	ldr	r2, [pc, #112]	; (8004e24 <HAL_TIM_Base_Start_IT+0xe4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d004      	beq.n	8004dc0 <HAL_TIM_Base_Start_IT+0x80>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a1b      	ldr	r2, [pc, #108]	; (8004e28 <HAL_TIM_Base_Start_IT+0xe8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d115      	bne.n	8004dec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	4b19      	ldr	r3, [pc, #100]	; (8004e2c <HAL_TIM_Base_Start_IT+0xec>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b06      	cmp	r3, #6
 8004dd0:	d015      	beq.n	8004dfe <HAL_TIM_Base_Start_IT+0xbe>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd8:	d011      	beq.n	8004dfe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f042 0201 	orr.w	r2, r2, #1
 8004de8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dea:	e008      	b.n	8004dfe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0201 	orr.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	e000      	b.n	8004e00 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dfe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40010000 	.word	0x40010000
 8004e14:	40000400 	.word	0x40000400
 8004e18:	40000800 	.word	0x40000800
 8004e1c:	40000c00 	.word	0x40000c00
 8004e20:	40010400 	.word	0x40010400
 8004e24:	40014000 	.word	0x40014000
 8004e28:	40001800 	.word	0x40001800
 8004e2c:	00010007 	.word	0x00010007

08004e30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d122      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d11b      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f06f 0202 	mvn.w	r2, #2
 8004e5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f905 	bl	8005082 <HAL_TIM_IC_CaptureCallback>
 8004e78:	e005      	b.n	8004e86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f8f7 	bl	800506e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f908 	bl	8005096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d122      	bne.n	8004ee0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	d11b      	bne.n	8004ee0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f06f 0204 	mvn.w	r2, #4
 8004eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f8db 	bl	8005082 <HAL_TIM_IC_CaptureCallback>
 8004ecc:	e005      	b.n	8004eda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f8cd 	bl	800506e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f8de 	bl	8005096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d122      	bne.n	8004f34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f003 0308 	and.w	r3, r3, #8
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d11b      	bne.n	8004f34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f06f 0208 	mvn.w	r2, #8
 8004f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2204      	movs	r2, #4
 8004f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f8b1 	bl	8005082 <HAL_TIM_IC_CaptureCallback>
 8004f20:	e005      	b.n	8004f2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f8a3 	bl	800506e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f8b4 	bl	8005096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f003 0310 	and.w	r3, r3, #16
 8004f3e:	2b10      	cmp	r3, #16
 8004f40:	d122      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f003 0310 	and.w	r3, r3, #16
 8004f4c:	2b10      	cmp	r3, #16
 8004f4e:	d11b      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f06f 0210 	mvn.w	r2, #16
 8004f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2208      	movs	r2, #8
 8004f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f887 	bl	8005082 <HAL_TIM_IC_CaptureCallback>
 8004f74:	e005      	b.n	8004f82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f879 	bl	800506e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f88a 	bl	8005096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d10e      	bne.n	8004fb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d107      	bne.n	8004fb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0201 	mvn.w	r2, #1
 8004fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7fb fe9e 	bl	8000cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fbe:	2b80      	cmp	r3, #128	; 0x80
 8004fc0:	d10e      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fcc:	2b80      	cmp	r3, #128	; 0x80
 8004fce:	d107      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f91a 	bl	8005214 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fee:	d10e      	bne.n	800500e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffa:	2b80      	cmp	r3, #128	; 0x80
 8004ffc:	d107      	bne.n	800500e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f90d 	bl	8005228 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005018:	2b40      	cmp	r3, #64	; 0x40
 800501a:	d10e      	bne.n	800503a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005026:	2b40      	cmp	r3, #64	; 0x40
 8005028:	d107      	bne.n	800503a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f838 	bl	80050aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	f003 0320 	and.w	r3, r3, #32
 8005044:	2b20      	cmp	r3, #32
 8005046:	d10e      	bne.n	8005066 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	2b20      	cmp	r3, #32
 8005054:	d107      	bne.n	8005066 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f06f 0220 	mvn.w	r2, #32
 800505e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f8cd 	bl	8005200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005066:	bf00      	nop
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
	...

080050c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a40      	ldr	r2, [pc, #256]	; (80051d4 <TIM_Base_SetConfig+0x114>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d013      	beq.n	8005100 <TIM_Base_SetConfig+0x40>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050de:	d00f      	beq.n	8005100 <TIM_Base_SetConfig+0x40>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a3d      	ldr	r2, [pc, #244]	; (80051d8 <TIM_Base_SetConfig+0x118>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00b      	beq.n	8005100 <TIM_Base_SetConfig+0x40>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a3c      	ldr	r2, [pc, #240]	; (80051dc <TIM_Base_SetConfig+0x11c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d007      	beq.n	8005100 <TIM_Base_SetConfig+0x40>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a3b      	ldr	r2, [pc, #236]	; (80051e0 <TIM_Base_SetConfig+0x120>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d003      	beq.n	8005100 <TIM_Base_SetConfig+0x40>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a3a      	ldr	r2, [pc, #232]	; (80051e4 <TIM_Base_SetConfig+0x124>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d108      	bne.n	8005112 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a2f      	ldr	r2, [pc, #188]	; (80051d4 <TIM_Base_SetConfig+0x114>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d02b      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005120:	d027      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a2c      	ldr	r2, [pc, #176]	; (80051d8 <TIM_Base_SetConfig+0x118>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d023      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a2b      	ldr	r2, [pc, #172]	; (80051dc <TIM_Base_SetConfig+0x11c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d01f      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a2a      	ldr	r2, [pc, #168]	; (80051e0 <TIM_Base_SetConfig+0x120>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d01b      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a29      	ldr	r2, [pc, #164]	; (80051e4 <TIM_Base_SetConfig+0x124>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d017      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a28      	ldr	r2, [pc, #160]	; (80051e8 <TIM_Base_SetConfig+0x128>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d013      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a27      	ldr	r2, [pc, #156]	; (80051ec <TIM_Base_SetConfig+0x12c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00f      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a26      	ldr	r2, [pc, #152]	; (80051f0 <TIM_Base_SetConfig+0x130>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d00b      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a25      	ldr	r2, [pc, #148]	; (80051f4 <TIM_Base_SetConfig+0x134>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d007      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a24      	ldr	r2, [pc, #144]	; (80051f8 <TIM_Base_SetConfig+0x138>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d003      	beq.n	8005172 <TIM_Base_SetConfig+0xb2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a23      	ldr	r2, [pc, #140]	; (80051fc <TIM_Base_SetConfig+0x13c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d108      	bne.n	8005184 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a0a      	ldr	r2, [pc, #40]	; (80051d4 <TIM_Base_SetConfig+0x114>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d003      	beq.n	80051b8 <TIM_Base_SetConfig+0xf8>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a0c      	ldr	r2, [pc, #48]	; (80051e4 <TIM_Base_SetConfig+0x124>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d103      	bne.n	80051c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	615a      	str	r2, [r3, #20]
}
 80051c6:	bf00      	nop
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40010000 	.word	0x40010000
 80051d8:	40000400 	.word	0x40000400
 80051dc:	40000800 	.word	0x40000800
 80051e0:	40000c00 	.word	0x40000c00
 80051e4:	40010400 	.word	0x40010400
 80051e8:	40014000 	.word	0x40014000
 80051ec:	40014400 	.word	0x40014400
 80051f0:	40014800 	.word	0x40014800
 80051f4:	40001800 	.word	0x40001800
 80051f8:	40001c00 	.word	0x40001c00
 80051fc:	40002000 	.word	0x40002000

08005200 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e040      	b.n	80052d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005252:	2b00      	cmp	r3, #0
 8005254:	d106      	bne.n	8005264 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7fb ff74 	bl	800114c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2224      	movs	r2, #36	; 0x24
 8005268:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0201 	bic.w	r2, r2, #1
 8005278:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f82c 	bl	80052d8 <UART_SetConfig>
 8005280:	4603      	mov	r3, r0
 8005282:	2b01      	cmp	r3, #1
 8005284:	d101      	bne.n	800528a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e022      	b.n	80052d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	2b00      	cmp	r3, #0
 8005290:	d002      	beq.n	8005298 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fa82 	bl	800579c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0201 	orr.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fb09 	bl	80058e0 <UART_CheckIdleState>
 80052ce:	4603      	mov	r3, r0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b088      	sub	sp, #32
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	431a      	orrs	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	4ba7      	ldr	r3, [pc, #668]	; (80055a0 <UART_SetConfig+0x2c8>)
 8005304:	4013      	ands	r3, r2
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	6812      	ldr	r2, [r2, #0]
 800530a:	6979      	ldr	r1, [r7, #20]
 800530c:	430b      	orrs	r3, r1
 800530e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68da      	ldr	r2, [r3, #12]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	430a      	orrs	r2, r1
 8005348:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a95      	ldr	r2, [pc, #596]	; (80055a4 <UART_SetConfig+0x2cc>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d120      	bne.n	8005396 <UART_SetConfig+0xbe>
 8005354:	4b94      	ldr	r3, [pc, #592]	; (80055a8 <UART_SetConfig+0x2d0>)
 8005356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535a:	f003 0303 	and.w	r3, r3, #3
 800535e:	2b03      	cmp	r3, #3
 8005360:	d816      	bhi.n	8005390 <UART_SetConfig+0xb8>
 8005362:	a201      	add	r2, pc, #4	; (adr r2, 8005368 <UART_SetConfig+0x90>)
 8005364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005368:	08005379 	.word	0x08005379
 800536c:	08005385 	.word	0x08005385
 8005370:	0800537f 	.word	0x0800537f
 8005374:	0800538b 	.word	0x0800538b
 8005378:	2301      	movs	r3, #1
 800537a:	77fb      	strb	r3, [r7, #31]
 800537c:	e14f      	b.n	800561e <UART_SetConfig+0x346>
 800537e:	2302      	movs	r3, #2
 8005380:	77fb      	strb	r3, [r7, #31]
 8005382:	e14c      	b.n	800561e <UART_SetConfig+0x346>
 8005384:	2304      	movs	r3, #4
 8005386:	77fb      	strb	r3, [r7, #31]
 8005388:	e149      	b.n	800561e <UART_SetConfig+0x346>
 800538a:	2308      	movs	r3, #8
 800538c:	77fb      	strb	r3, [r7, #31]
 800538e:	e146      	b.n	800561e <UART_SetConfig+0x346>
 8005390:	2310      	movs	r3, #16
 8005392:	77fb      	strb	r3, [r7, #31]
 8005394:	e143      	b.n	800561e <UART_SetConfig+0x346>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a84      	ldr	r2, [pc, #528]	; (80055ac <UART_SetConfig+0x2d4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d132      	bne.n	8005406 <UART_SetConfig+0x12e>
 80053a0:	4b81      	ldr	r3, [pc, #516]	; (80055a8 <UART_SetConfig+0x2d0>)
 80053a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a6:	f003 030c 	and.w	r3, r3, #12
 80053aa:	2b0c      	cmp	r3, #12
 80053ac:	d828      	bhi.n	8005400 <UART_SetConfig+0x128>
 80053ae:	a201      	add	r2, pc, #4	; (adr r2, 80053b4 <UART_SetConfig+0xdc>)
 80053b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b4:	080053e9 	.word	0x080053e9
 80053b8:	08005401 	.word	0x08005401
 80053bc:	08005401 	.word	0x08005401
 80053c0:	08005401 	.word	0x08005401
 80053c4:	080053f5 	.word	0x080053f5
 80053c8:	08005401 	.word	0x08005401
 80053cc:	08005401 	.word	0x08005401
 80053d0:	08005401 	.word	0x08005401
 80053d4:	080053ef 	.word	0x080053ef
 80053d8:	08005401 	.word	0x08005401
 80053dc:	08005401 	.word	0x08005401
 80053e0:	08005401 	.word	0x08005401
 80053e4:	080053fb 	.word	0x080053fb
 80053e8:	2300      	movs	r3, #0
 80053ea:	77fb      	strb	r3, [r7, #31]
 80053ec:	e117      	b.n	800561e <UART_SetConfig+0x346>
 80053ee:	2302      	movs	r3, #2
 80053f0:	77fb      	strb	r3, [r7, #31]
 80053f2:	e114      	b.n	800561e <UART_SetConfig+0x346>
 80053f4:	2304      	movs	r3, #4
 80053f6:	77fb      	strb	r3, [r7, #31]
 80053f8:	e111      	b.n	800561e <UART_SetConfig+0x346>
 80053fa:	2308      	movs	r3, #8
 80053fc:	77fb      	strb	r3, [r7, #31]
 80053fe:	e10e      	b.n	800561e <UART_SetConfig+0x346>
 8005400:	2310      	movs	r3, #16
 8005402:	77fb      	strb	r3, [r7, #31]
 8005404:	e10b      	b.n	800561e <UART_SetConfig+0x346>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a69      	ldr	r2, [pc, #420]	; (80055b0 <UART_SetConfig+0x2d8>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d120      	bne.n	8005452 <UART_SetConfig+0x17a>
 8005410:	4b65      	ldr	r3, [pc, #404]	; (80055a8 <UART_SetConfig+0x2d0>)
 8005412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005416:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800541a:	2b30      	cmp	r3, #48	; 0x30
 800541c:	d013      	beq.n	8005446 <UART_SetConfig+0x16e>
 800541e:	2b30      	cmp	r3, #48	; 0x30
 8005420:	d814      	bhi.n	800544c <UART_SetConfig+0x174>
 8005422:	2b20      	cmp	r3, #32
 8005424:	d009      	beq.n	800543a <UART_SetConfig+0x162>
 8005426:	2b20      	cmp	r3, #32
 8005428:	d810      	bhi.n	800544c <UART_SetConfig+0x174>
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <UART_SetConfig+0x15c>
 800542e:	2b10      	cmp	r3, #16
 8005430:	d006      	beq.n	8005440 <UART_SetConfig+0x168>
 8005432:	e00b      	b.n	800544c <UART_SetConfig+0x174>
 8005434:	2300      	movs	r3, #0
 8005436:	77fb      	strb	r3, [r7, #31]
 8005438:	e0f1      	b.n	800561e <UART_SetConfig+0x346>
 800543a:	2302      	movs	r3, #2
 800543c:	77fb      	strb	r3, [r7, #31]
 800543e:	e0ee      	b.n	800561e <UART_SetConfig+0x346>
 8005440:	2304      	movs	r3, #4
 8005442:	77fb      	strb	r3, [r7, #31]
 8005444:	e0eb      	b.n	800561e <UART_SetConfig+0x346>
 8005446:	2308      	movs	r3, #8
 8005448:	77fb      	strb	r3, [r7, #31]
 800544a:	e0e8      	b.n	800561e <UART_SetConfig+0x346>
 800544c:	2310      	movs	r3, #16
 800544e:	77fb      	strb	r3, [r7, #31]
 8005450:	e0e5      	b.n	800561e <UART_SetConfig+0x346>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a57      	ldr	r2, [pc, #348]	; (80055b4 <UART_SetConfig+0x2dc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d120      	bne.n	800549e <UART_SetConfig+0x1c6>
 800545c:	4b52      	ldr	r3, [pc, #328]	; (80055a8 <UART_SetConfig+0x2d0>)
 800545e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005462:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005466:	2bc0      	cmp	r3, #192	; 0xc0
 8005468:	d013      	beq.n	8005492 <UART_SetConfig+0x1ba>
 800546a:	2bc0      	cmp	r3, #192	; 0xc0
 800546c:	d814      	bhi.n	8005498 <UART_SetConfig+0x1c0>
 800546e:	2b80      	cmp	r3, #128	; 0x80
 8005470:	d009      	beq.n	8005486 <UART_SetConfig+0x1ae>
 8005472:	2b80      	cmp	r3, #128	; 0x80
 8005474:	d810      	bhi.n	8005498 <UART_SetConfig+0x1c0>
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <UART_SetConfig+0x1a8>
 800547a:	2b40      	cmp	r3, #64	; 0x40
 800547c:	d006      	beq.n	800548c <UART_SetConfig+0x1b4>
 800547e:	e00b      	b.n	8005498 <UART_SetConfig+0x1c0>
 8005480:	2300      	movs	r3, #0
 8005482:	77fb      	strb	r3, [r7, #31]
 8005484:	e0cb      	b.n	800561e <UART_SetConfig+0x346>
 8005486:	2302      	movs	r3, #2
 8005488:	77fb      	strb	r3, [r7, #31]
 800548a:	e0c8      	b.n	800561e <UART_SetConfig+0x346>
 800548c:	2304      	movs	r3, #4
 800548e:	77fb      	strb	r3, [r7, #31]
 8005490:	e0c5      	b.n	800561e <UART_SetConfig+0x346>
 8005492:	2308      	movs	r3, #8
 8005494:	77fb      	strb	r3, [r7, #31]
 8005496:	e0c2      	b.n	800561e <UART_SetConfig+0x346>
 8005498:	2310      	movs	r3, #16
 800549a:	77fb      	strb	r3, [r7, #31]
 800549c:	e0bf      	b.n	800561e <UART_SetConfig+0x346>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a45      	ldr	r2, [pc, #276]	; (80055b8 <UART_SetConfig+0x2e0>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d125      	bne.n	80054f4 <UART_SetConfig+0x21c>
 80054a8:	4b3f      	ldr	r3, [pc, #252]	; (80055a8 <UART_SetConfig+0x2d0>)
 80054aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054b6:	d017      	beq.n	80054e8 <UART_SetConfig+0x210>
 80054b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054bc:	d817      	bhi.n	80054ee <UART_SetConfig+0x216>
 80054be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054c2:	d00b      	beq.n	80054dc <UART_SetConfig+0x204>
 80054c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054c8:	d811      	bhi.n	80054ee <UART_SetConfig+0x216>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <UART_SetConfig+0x1fe>
 80054ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054d2:	d006      	beq.n	80054e2 <UART_SetConfig+0x20a>
 80054d4:	e00b      	b.n	80054ee <UART_SetConfig+0x216>
 80054d6:	2300      	movs	r3, #0
 80054d8:	77fb      	strb	r3, [r7, #31]
 80054da:	e0a0      	b.n	800561e <UART_SetConfig+0x346>
 80054dc:	2302      	movs	r3, #2
 80054de:	77fb      	strb	r3, [r7, #31]
 80054e0:	e09d      	b.n	800561e <UART_SetConfig+0x346>
 80054e2:	2304      	movs	r3, #4
 80054e4:	77fb      	strb	r3, [r7, #31]
 80054e6:	e09a      	b.n	800561e <UART_SetConfig+0x346>
 80054e8:	2308      	movs	r3, #8
 80054ea:	77fb      	strb	r3, [r7, #31]
 80054ec:	e097      	b.n	800561e <UART_SetConfig+0x346>
 80054ee:	2310      	movs	r3, #16
 80054f0:	77fb      	strb	r3, [r7, #31]
 80054f2:	e094      	b.n	800561e <UART_SetConfig+0x346>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a30      	ldr	r2, [pc, #192]	; (80055bc <UART_SetConfig+0x2e4>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d125      	bne.n	800554a <UART_SetConfig+0x272>
 80054fe:	4b2a      	ldr	r3, [pc, #168]	; (80055a8 <UART_SetConfig+0x2d0>)
 8005500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005504:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005508:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800550c:	d017      	beq.n	800553e <UART_SetConfig+0x266>
 800550e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005512:	d817      	bhi.n	8005544 <UART_SetConfig+0x26c>
 8005514:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005518:	d00b      	beq.n	8005532 <UART_SetConfig+0x25a>
 800551a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800551e:	d811      	bhi.n	8005544 <UART_SetConfig+0x26c>
 8005520:	2b00      	cmp	r3, #0
 8005522:	d003      	beq.n	800552c <UART_SetConfig+0x254>
 8005524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005528:	d006      	beq.n	8005538 <UART_SetConfig+0x260>
 800552a:	e00b      	b.n	8005544 <UART_SetConfig+0x26c>
 800552c:	2301      	movs	r3, #1
 800552e:	77fb      	strb	r3, [r7, #31]
 8005530:	e075      	b.n	800561e <UART_SetConfig+0x346>
 8005532:	2302      	movs	r3, #2
 8005534:	77fb      	strb	r3, [r7, #31]
 8005536:	e072      	b.n	800561e <UART_SetConfig+0x346>
 8005538:	2304      	movs	r3, #4
 800553a:	77fb      	strb	r3, [r7, #31]
 800553c:	e06f      	b.n	800561e <UART_SetConfig+0x346>
 800553e:	2308      	movs	r3, #8
 8005540:	77fb      	strb	r3, [r7, #31]
 8005542:	e06c      	b.n	800561e <UART_SetConfig+0x346>
 8005544:	2310      	movs	r3, #16
 8005546:	77fb      	strb	r3, [r7, #31]
 8005548:	e069      	b.n	800561e <UART_SetConfig+0x346>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a1c      	ldr	r2, [pc, #112]	; (80055c0 <UART_SetConfig+0x2e8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d137      	bne.n	80055c4 <UART_SetConfig+0x2ec>
 8005554:	4b14      	ldr	r3, [pc, #80]	; (80055a8 <UART_SetConfig+0x2d0>)
 8005556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800555e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005562:	d017      	beq.n	8005594 <UART_SetConfig+0x2bc>
 8005564:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005568:	d817      	bhi.n	800559a <UART_SetConfig+0x2c2>
 800556a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800556e:	d00b      	beq.n	8005588 <UART_SetConfig+0x2b0>
 8005570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005574:	d811      	bhi.n	800559a <UART_SetConfig+0x2c2>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <UART_SetConfig+0x2aa>
 800557a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800557e:	d006      	beq.n	800558e <UART_SetConfig+0x2b6>
 8005580:	e00b      	b.n	800559a <UART_SetConfig+0x2c2>
 8005582:	2300      	movs	r3, #0
 8005584:	77fb      	strb	r3, [r7, #31]
 8005586:	e04a      	b.n	800561e <UART_SetConfig+0x346>
 8005588:	2302      	movs	r3, #2
 800558a:	77fb      	strb	r3, [r7, #31]
 800558c:	e047      	b.n	800561e <UART_SetConfig+0x346>
 800558e:	2304      	movs	r3, #4
 8005590:	77fb      	strb	r3, [r7, #31]
 8005592:	e044      	b.n	800561e <UART_SetConfig+0x346>
 8005594:	2308      	movs	r3, #8
 8005596:	77fb      	strb	r3, [r7, #31]
 8005598:	e041      	b.n	800561e <UART_SetConfig+0x346>
 800559a:	2310      	movs	r3, #16
 800559c:	77fb      	strb	r3, [r7, #31]
 800559e:	e03e      	b.n	800561e <UART_SetConfig+0x346>
 80055a0:	efff69f3 	.word	0xefff69f3
 80055a4:	40011000 	.word	0x40011000
 80055a8:	40023800 	.word	0x40023800
 80055ac:	40004400 	.word	0x40004400
 80055b0:	40004800 	.word	0x40004800
 80055b4:	40004c00 	.word	0x40004c00
 80055b8:	40005000 	.word	0x40005000
 80055bc:	40011400 	.word	0x40011400
 80055c0:	40007800 	.word	0x40007800
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a71      	ldr	r2, [pc, #452]	; (8005790 <UART_SetConfig+0x4b8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d125      	bne.n	800561a <UART_SetConfig+0x342>
 80055ce:	4b71      	ldr	r3, [pc, #452]	; (8005794 <UART_SetConfig+0x4bc>)
 80055d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80055d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80055dc:	d017      	beq.n	800560e <UART_SetConfig+0x336>
 80055de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80055e2:	d817      	bhi.n	8005614 <UART_SetConfig+0x33c>
 80055e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e8:	d00b      	beq.n	8005602 <UART_SetConfig+0x32a>
 80055ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ee:	d811      	bhi.n	8005614 <UART_SetConfig+0x33c>
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <UART_SetConfig+0x324>
 80055f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055f8:	d006      	beq.n	8005608 <UART_SetConfig+0x330>
 80055fa:	e00b      	b.n	8005614 <UART_SetConfig+0x33c>
 80055fc:	2300      	movs	r3, #0
 80055fe:	77fb      	strb	r3, [r7, #31]
 8005600:	e00d      	b.n	800561e <UART_SetConfig+0x346>
 8005602:	2302      	movs	r3, #2
 8005604:	77fb      	strb	r3, [r7, #31]
 8005606:	e00a      	b.n	800561e <UART_SetConfig+0x346>
 8005608:	2304      	movs	r3, #4
 800560a:	77fb      	strb	r3, [r7, #31]
 800560c:	e007      	b.n	800561e <UART_SetConfig+0x346>
 800560e:	2308      	movs	r3, #8
 8005610:	77fb      	strb	r3, [r7, #31]
 8005612:	e004      	b.n	800561e <UART_SetConfig+0x346>
 8005614:	2310      	movs	r3, #16
 8005616:	77fb      	strb	r3, [r7, #31]
 8005618:	e001      	b.n	800561e <UART_SetConfig+0x346>
 800561a:	2310      	movs	r3, #16
 800561c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005626:	d15b      	bne.n	80056e0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005628:	7ffb      	ldrb	r3, [r7, #31]
 800562a:	2b08      	cmp	r3, #8
 800562c:	d827      	bhi.n	800567e <UART_SetConfig+0x3a6>
 800562e:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <UART_SetConfig+0x35c>)
 8005630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005634:	08005659 	.word	0x08005659
 8005638:	08005661 	.word	0x08005661
 800563c:	08005669 	.word	0x08005669
 8005640:	0800567f 	.word	0x0800567f
 8005644:	0800566f 	.word	0x0800566f
 8005648:	0800567f 	.word	0x0800567f
 800564c:	0800567f 	.word	0x0800567f
 8005650:	0800567f 	.word	0x0800567f
 8005654:	08005677 	.word	0x08005677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005658:	f7fe fb4e 	bl	8003cf8 <HAL_RCC_GetPCLK1Freq>
 800565c:	61b8      	str	r0, [r7, #24]
        break;
 800565e:	e013      	b.n	8005688 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005660:	f7fe fb5e 	bl	8003d20 <HAL_RCC_GetPCLK2Freq>
 8005664:	61b8      	str	r0, [r7, #24]
        break;
 8005666:	e00f      	b.n	8005688 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005668:	4b4b      	ldr	r3, [pc, #300]	; (8005798 <UART_SetConfig+0x4c0>)
 800566a:	61bb      	str	r3, [r7, #24]
        break;
 800566c:	e00c      	b.n	8005688 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800566e:	f7fe fa81 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 8005672:	61b8      	str	r0, [r7, #24]
        break;
 8005674:	e008      	b.n	8005688 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800567a:	61bb      	str	r3, [r7, #24]
        break;
 800567c:	e004      	b.n	8005688 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	77bb      	strb	r3, [r7, #30]
        break;
 8005686:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d074      	beq.n	8005778 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	005a      	lsls	r2, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	085b      	lsrs	r3, r3, #1
 8005698:	441a      	add	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	2b0f      	cmp	r3, #15
 80056aa:	d916      	bls.n	80056da <UART_SetConfig+0x402>
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b2:	d212      	bcs.n	80056da <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	f023 030f 	bic.w	r3, r3, #15
 80056bc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	085b      	lsrs	r3, r3, #1
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f003 0307 	and.w	r3, r3, #7
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	89fb      	ldrh	r3, [r7, #14]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	89fa      	ldrh	r2, [r7, #14]
 80056d6:	60da      	str	r2, [r3, #12]
 80056d8:	e04e      	b.n	8005778 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	77bb      	strb	r3, [r7, #30]
 80056de:	e04b      	b.n	8005778 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056e0:	7ffb      	ldrb	r3, [r7, #31]
 80056e2:	2b08      	cmp	r3, #8
 80056e4:	d827      	bhi.n	8005736 <UART_SetConfig+0x45e>
 80056e6:	a201      	add	r2, pc, #4	; (adr r2, 80056ec <UART_SetConfig+0x414>)
 80056e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ec:	08005711 	.word	0x08005711
 80056f0:	08005719 	.word	0x08005719
 80056f4:	08005721 	.word	0x08005721
 80056f8:	08005737 	.word	0x08005737
 80056fc:	08005727 	.word	0x08005727
 8005700:	08005737 	.word	0x08005737
 8005704:	08005737 	.word	0x08005737
 8005708:	08005737 	.word	0x08005737
 800570c:	0800572f 	.word	0x0800572f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005710:	f7fe faf2 	bl	8003cf8 <HAL_RCC_GetPCLK1Freq>
 8005714:	61b8      	str	r0, [r7, #24]
        break;
 8005716:	e013      	b.n	8005740 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005718:	f7fe fb02 	bl	8003d20 <HAL_RCC_GetPCLK2Freq>
 800571c:	61b8      	str	r0, [r7, #24]
        break;
 800571e:	e00f      	b.n	8005740 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005720:	4b1d      	ldr	r3, [pc, #116]	; (8005798 <UART_SetConfig+0x4c0>)
 8005722:	61bb      	str	r3, [r7, #24]
        break;
 8005724:	e00c      	b.n	8005740 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005726:	f7fe fa25 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 800572a:	61b8      	str	r0, [r7, #24]
        break;
 800572c:	e008      	b.n	8005740 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800572e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005732:	61bb      	str	r3, [r7, #24]
        break;
 8005734:	e004      	b.n	8005740 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	77bb      	strb	r3, [r7, #30]
        break;
 800573e:	bf00      	nop
    }

    if (pclk != 0U)
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d018      	beq.n	8005778 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	085a      	lsrs	r2, r3, #1
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	441a      	add	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	fbb2 f3f3 	udiv	r3, r2, r3
 8005758:	b29b      	uxth	r3, r3
 800575a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	2b0f      	cmp	r3, #15
 8005760:	d908      	bls.n	8005774 <UART_SetConfig+0x49c>
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005768:	d204      	bcs.n	8005774 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	60da      	str	r2, [r3, #12]
 8005772:	e001      	b.n	8005778 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005784:	7fbb      	ldrb	r3, [r7, #30]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3720      	adds	r7, #32
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40007c00 	.word	0x40007c00
 8005794:	40023800 	.word	0x40023800
 8005798:	00f42400 	.word	0x00f42400

0800579c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	f003 0304 	and.w	r3, r3, #4
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580e:	f003 0308 	and.w	r3, r3, #8
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	f003 0310 	and.w	r3, r3, #16
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005878:	2b00      	cmp	r3, #0
 800587a:	d01a      	beq.n	80058b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800589a:	d10a      	bne.n	80058b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	605a      	str	r2, [r3, #4]
  }
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af02      	add	r7, sp, #8
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058f0:	f7fc fb0e 	bl	8001f10 <HAL_GetTick>
 80058f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b08      	cmp	r3, #8
 8005902:	d10e      	bne.n	8005922 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005904:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f817 	bl	8005946 <UART_WaitOnFlagUntilTimeout>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e00d      	b.n	800593e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2220      	movs	r2, #32
 8005926:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2220      	movs	r2, #32
 800592c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b084      	sub	sp, #16
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	603b      	str	r3, [r7, #0]
 8005952:	4613      	mov	r3, r2
 8005954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005956:	e05e      	b.n	8005a16 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595e:	d05a      	beq.n	8005a16 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005960:	f7fc fad6 	bl	8001f10 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	429a      	cmp	r2, r3
 800596e:	d302      	bcc.n	8005976 <UART_WaitOnFlagUntilTimeout+0x30>
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d11b      	bne.n	80059ae <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005984:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0201 	bic.w	r2, r2, #1
 8005994:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2220      	movs	r2, #32
 800599a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2220      	movs	r2, #32
 80059a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e043      	b.n	8005a36 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0304 	and.w	r3, r3, #4
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d02c      	beq.n	8005a16 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ca:	d124      	bne.n	8005a16 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059e4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 0201 	bic.w	r2, r2, #1
 80059f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2220      	movs	r2, #32
 80059fa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2220      	movs	r2, #32
 8005a00:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e00f      	b.n	8005a36 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	69da      	ldr	r2, [r3, #28]
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	bf0c      	ite	eq
 8005a26:	2301      	moveq	r3, #1
 8005a28:	2300      	movne	r3, #0
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	79fb      	ldrb	r3, [r7, #7]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d091      	beq.n	8005958 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
	...

08005a40 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d027      	beq.n	8005aaa <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4b2f      	ldr	r3, [pc, #188]	; (8005b20 <FMC_SDRAM_Init+0xe0>)
 8005a64:	4013      	ands	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005a70:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8005a76:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8005a7c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8005a82:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8005a88:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8005a8e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8005a94:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005a9a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	e032      	b.n	8005b10 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ab6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005ac0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005ac6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	4b12      	ldr	r3, [pc, #72]	; (8005b20 <FMC_SDRAM_Init+0xe0>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005ae4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8005aea:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8005af0:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8005af6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8005afc:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	ffff8000 	.word	0xffff8000

08005b24 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8005b34:	2300      	movs	r3, #0
 8005b36:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d02e      	beq.n	8005b9c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005b4a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	3b01      	subs	r3, #1
 8005b58:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005b5a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	3b01      	subs	r3, #1
 8005b62:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8005b64:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8005b6e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8005b78:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8005b82:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	609a      	str	r2, [r3, #8]
 8005b9a:	e039      	b.n	8005c10 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4b1e      	ldr	r3, [pc, #120]	; (8005c20 <FMC_SDRAM_Timing_Init+0xfc>)
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005bce:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005bde:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8005be8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8005bf2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	371c      	adds	r7, #28
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	ff0f0fff 	.word	0xff0f0fff

08005c24 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	691a      	ldr	r2, [r3, #16]
 8005c34:	4b0c      	ldr	r3, [pc, #48]	; (8005c68 <FMC_SDRAM_SendCommand+0x44>)
 8005c36:	4013      	ands	r3, r2
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	6811      	ldr	r1, [r2, #0]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	6852      	ldr	r2, [r2, #4]
 8005c40:	4311      	orrs	r1, r2
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	6892      	ldr	r2, [r2, #8]
 8005c46:	3a01      	subs	r2, #1
 8005c48:	0152      	lsls	r2, r2, #5
 8005c4a:	4311      	orrs	r1, r2
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	68d2      	ldr	r2, [r2, #12]
 8005c50:	0252      	lsls	r2, r2, #9
 8005c52:	430a      	orrs	r2, r1
 8005c54:	431a      	orrs	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	ffc00000 	.word	0xffc00000

08005c6c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	695a      	ldr	r2, [r3, #20]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005c92:	b480      	push	{r7}
 8005c94:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005c96:	bf00      	nop
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ca6:	f3ef 8305 	mrs	r3, IPSR
 8005caa:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10f      	bne.n	8005cd2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8005cb6:	607b      	str	r3, [r7, #4]
  return(result);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d105      	bne.n	8005cca <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005cbe:	f3ef 8311 	mrs	r3, BASEPRI
 8005cc2:	603b      	str	r3, [r7, #0]
  return(result);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d007      	beq.n	8005cda <osKernelInitialize+0x3a>
 8005cca:	4b0e      	ldr	r3, [pc, #56]	; (8005d04 <osKernelInitialize+0x64>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d103      	bne.n	8005cda <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005cd2:	f06f 0305 	mvn.w	r3, #5
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	e00c      	b.n	8005cf4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005cda:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <osKernelInitialize+0x64>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d105      	bne.n	8005cee <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005ce2:	4b08      	ldr	r3, [pc, #32]	; (8005d04 <osKernelInitialize+0x64>)
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	e002      	b.n	8005cf4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005cee:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	200001ac 	.word	0x200001ac

08005d08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d0e:	f3ef 8305 	mrs	r3, IPSR
 8005d12:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10f      	bne.n	8005d3a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d1e:	607b      	str	r3, [r7, #4]
  return(result);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d105      	bne.n	8005d32 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d26:	f3ef 8311 	mrs	r3, BASEPRI
 8005d2a:	603b      	str	r3, [r7, #0]
  return(result);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d007      	beq.n	8005d42 <osKernelStart+0x3a>
 8005d32:	4b0f      	ldr	r3, [pc, #60]	; (8005d70 <osKernelStart+0x68>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d103      	bne.n	8005d42 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005d3a:	f06f 0305 	mvn.w	r3, #5
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	e010      	b.n	8005d64 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005d42:	4b0b      	ldr	r3, [pc, #44]	; (8005d70 <osKernelStart+0x68>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d109      	bne.n	8005d5e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005d4a:	f7ff ffa2 	bl	8005c92 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005d4e:	4b08      	ldr	r3, [pc, #32]	; (8005d70 <osKernelStart+0x68>)
 8005d50:	2202      	movs	r2, #2
 8005d52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005d54:	f001 f8b4 	bl	8006ec0 <vTaskStartScheduler>
      stat = osOK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	e002      	b.n	8005d64 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005d64:	68fb      	ldr	r3, [r7, #12]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	200001ac 	.word	0x200001ac

08005d74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b090      	sub	sp, #64	; 0x40
 8005d78:	af04      	add	r7, sp, #16
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005d80:	2300      	movs	r3, #0
 8005d82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d84:	f3ef 8305 	mrs	r3, IPSR
 8005d88:	61fb      	str	r3, [r7, #28]
  return(result);
 8005d8a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f040 808f 	bne.w	8005eb0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d92:	f3ef 8310 	mrs	r3, PRIMASK
 8005d96:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d105      	bne.n	8005daa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d9e:	f3ef 8311 	mrs	r3, BASEPRI
 8005da2:	617b      	str	r3, [r7, #20]
  return(result);
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <osThreadNew+0x3e>
 8005daa:	4b44      	ldr	r3, [pc, #272]	; (8005ebc <osThreadNew+0x148>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d07e      	beq.n	8005eb0 <osThreadNew+0x13c>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d07b      	beq.n	8005eb0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005db8:	2380      	movs	r3, #128	; 0x80
 8005dba:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005dbc:	2318      	movs	r3, #24
 8005dbe:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d045      	beq.n	8005e5c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <osThreadNew+0x6a>
        name = attr->name;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d008      	beq.n	8005e04 <osThreadNew+0x90>
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	2b38      	cmp	r3, #56	; 0x38
 8005df6:	d805      	bhi.n	8005e04 <osThreadNew+0x90>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <osThreadNew+0x94>
        return (NULL);
 8005e04:	2300      	movs	r3, #0
 8005e06:	e054      	b.n	8005eb2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	089b      	lsrs	r3, r3, #2
 8005e16:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00e      	beq.n	8005e3e <osThreadNew+0xca>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	2b5b      	cmp	r3, #91	; 0x5b
 8005e26:	d90a      	bls.n	8005e3e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d006      	beq.n	8005e3e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d002      	beq.n	8005e3e <osThreadNew+0xca>
        mem = 1;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	623b      	str	r3, [r7, #32]
 8005e3c:	e010      	b.n	8005e60 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10c      	bne.n	8005e60 <osThreadNew+0xec>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d108      	bne.n	8005e60 <osThreadNew+0xec>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d104      	bne.n	8005e60 <osThreadNew+0xec>
          mem = 0;
 8005e56:	2300      	movs	r3, #0
 8005e58:	623b      	str	r3, [r7, #32]
 8005e5a:	e001      	b.n	8005e60 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d110      	bne.n	8005e88 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e6e:	9202      	str	r2, [sp, #8]
 8005e70:	9301      	str	r3, [sp, #4]
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 fe3f 	bl	8006b00 <xTaskCreateStatic>
 8005e82:	4603      	mov	r3, r0
 8005e84:	613b      	str	r3, [r7, #16]
 8005e86:	e013      	b.n	8005eb0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d110      	bne.n	8005eb0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	f107 0310 	add.w	r3, r7, #16
 8005e96:	9301      	str	r3, [sp, #4]
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	9300      	str	r3, [sp, #0]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 fe90 	bl	8006bc6 <xTaskCreate>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d001      	beq.n	8005eb0 <osThreadNew+0x13c>
          hTask = NULL;
 8005eac:	2300      	movs	r3, #0
 8005eae:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005eb0:	693b      	ldr	r3, [r7, #16]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3730      	adds	r7, #48	; 0x30
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	200001ac 	.word	0x200001ac

08005ec0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ec8:	f3ef 8305 	mrs	r3, IPSR
 8005ecc:	613b      	str	r3, [r7, #16]
  return(result);
 8005ece:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10f      	bne.n	8005ef4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ed8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d105      	bne.n	8005eec <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ee0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ee4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d007      	beq.n	8005efc <osDelay+0x3c>
 8005eec:	4b0a      	ldr	r3, [pc, #40]	; (8005f18 <osDelay+0x58>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d103      	bne.n	8005efc <osDelay+0x3c>
    stat = osErrorISR;
 8005ef4:	f06f 0305 	mvn.w	r3, #5
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	e007      	b.n	8005f0c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005efc:	2300      	movs	r3, #0
 8005efe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <osDelay+0x4c>
      vTaskDelay(ticks);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 ffa4 	bl	8006e54 <vTaskDelay>
    }
  }

  return (stat);
 8005f0c:	697b      	ldr	r3, [r7, #20]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	200001ac 	.word	0x200001ac

08005f1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4a07      	ldr	r2, [pc, #28]	; (8005f48 <vApplicationGetIdleTaskMemory+0x2c>)
 8005f2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	4a06      	ldr	r2, [pc, #24]	; (8005f4c <vApplicationGetIdleTaskMemory+0x30>)
 8005f32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2280      	movs	r2, #128	; 0x80
 8005f38:	601a      	str	r2, [r3, #0]
}
 8005f3a:	bf00      	nop
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	200001b0 	.word	0x200001b0
 8005f4c:	2000020c 	.word	0x2000020c

08005f50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4a07      	ldr	r2, [pc, #28]	; (8005f7c <vApplicationGetTimerTaskMemory+0x2c>)
 8005f60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	4a06      	ldr	r2, [pc, #24]	; (8005f80 <vApplicationGetTimerTaskMemory+0x30>)
 8005f66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f6e:	601a      	str	r2, [r3, #0]
}
 8005f70:	bf00      	nop
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	2000040c 	.word	0x2000040c
 8005f80:	20000468 	.word	0x20000468

08005f84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f103 0208 	add.w	r2, r3, #8
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f04f 32ff 	mov.w	r2, #4294967295
 8005f9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f103 0208 	add.w	r2, r3, #8
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f103 0208 	add.w	r2, r3, #8
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fd2:	bf00      	nop
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b085      	sub	sp, #20
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	601a      	str	r2, [r3, #0]
}
 800601a:	bf00      	nop
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006026:	b480      	push	{r7}
 8006028:	b085      	sub	sp, #20
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603c:	d103      	bne.n	8006046 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	e00c      	b.n	8006060 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	3308      	adds	r3, #8
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	e002      	b.n	8006054 <vListInsert+0x2e>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	429a      	cmp	r2, r3
 800605e:	d2f6      	bcs.n	800604e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	601a      	str	r2, [r3, #0]
}
 800608c:	bf00      	nop
 800608e:	3714      	adds	r7, #20
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	6892      	ldr	r2, [r2, #8]
 80060ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	6852      	ldr	r2, [r2, #4]
 80060b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d103      	bne.n	80060cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	1e5a      	subs	r2, r3, #1
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10c      	bne.n	800611a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	b672      	cpsid	i
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	b662      	cpsie	i
 8006114:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006116:	bf00      	nop
 8006118:	e7fe      	b.n	8006118 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800611a:	f002 f87f 	bl	800821c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006126:	68f9      	ldr	r1, [r7, #12]
 8006128:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800612a:	fb01 f303 	mul.w	r3, r1, r3
 800612e:	441a      	add	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614a:	3b01      	subs	r3, #1
 800614c:	68f9      	ldr	r1, [r7, #12]
 800614e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006150:	fb01 f303 	mul.w	r3, r1, r3
 8006154:	441a      	add	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	22ff      	movs	r2, #255	; 0xff
 800615e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	22ff      	movs	r2, #255	; 0xff
 8006166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d114      	bne.n	800619a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d01a      	beq.n	80061ae <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	3310      	adds	r3, #16
 800617c:	4618      	mov	r0, r3
 800617e:	f001 f937 	bl	80073f0 <xTaskRemoveFromEventList>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d012      	beq.n	80061ae <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006188:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <xQueueGenericReset+0xd0>)
 800618a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	e009      	b.n	80061ae <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	3310      	adds	r3, #16
 800619e:	4618      	mov	r0, r3
 80061a0:	f7ff fef0 	bl	8005f84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	3324      	adds	r3, #36	; 0x24
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7ff feeb 	bl	8005f84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80061ae:	f002 f869 	bl	8008284 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80061b2:	2301      	movs	r3, #1
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	e000ed04 	.word	0xe000ed04

080061c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08e      	sub	sp, #56	; 0x38
 80061c4:	af02      	add	r7, sp, #8
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10c      	bne.n	80061ee <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80061d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d8:	b672      	cpsid	i
 80061da:	f383 8811 	msr	BASEPRI, r3
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f3bf 8f4f 	dsb	sy
 80061e6:	b662      	cpsie	i
 80061e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061ea:	bf00      	nop
 80061ec:	e7fe      	b.n	80061ec <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10c      	bne.n	800620e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f8:	b672      	cpsid	i
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	b662      	cpsie	i
 8006208:	627b      	str	r3, [r7, #36]	; 0x24
}
 800620a:	bf00      	nop
 800620c:	e7fe      	b.n	800620c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <xQueueGenericCreateStatic+0x5a>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <xQueueGenericCreateStatic+0x5e>
 800621a:	2301      	movs	r3, #1
 800621c:	e000      	b.n	8006220 <xQueueGenericCreateStatic+0x60>
 800621e:	2300      	movs	r3, #0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10c      	bne.n	800623e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006228:	b672      	cpsid	i
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	b662      	cpsie	i
 8006238:	623b      	str	r3, [r7, #32]
}
 800623a:	bf00      	nop
 800623c:	e7fe      	b.n	800623c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d102      	bne.n	800624a <xQueueGenericCreateStatic+0x8a>
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <xQueueGenericCreateStatic+0x8e>
 800624a:	2301      	movs	r3, #1
 800624c:	e000      	b.n	8006250 <xQueueGenericCreateStatic+0x90>
 800624e:	2300      	movs	r3, #0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10c      	bne.n	800626e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006258:	b672      	cpsid	i
 800625a:	f383 8811 	msr	BASEPRI, r3
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	b662      	cpsie	i
 8006268:	61fb      	str	r3, [r7, #28]
}
 800626a:	bf00      	nop
 800626c:	e7fe      	b.n	800626c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800626e:	2350      	movs	r3, #80	; 0x50
 8006270:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	2b50      	cmp	r3, #80	; 0x50
 8006276:	d00c      	beq.n	8006292 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	b672      	cpsid	i
 800627e:	f383 8811 	msr	BASEPRI, r3
 8006282:	f3bf 8f6f 	isb	sy
 8006286:	f3bf 8f4f 	dsb	sy
 800628a:	b662      	cpsie	i
 800628c:	61bb      	str	r3, [r7, #24]
}
 800628e:	bf00      	nop
 8006290:	e7fe      	b.n	8006290 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006292:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00d      	beq.n	80062ba <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80062aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	4613      	mov	r3, r2
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	68b9      	ldr	r1, [r7, #8]
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 f805 	bl	80062c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80062ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80062bc:	4618      	mov	r0, r3
 80062be:	3730      	adds	r7, #48	; 0x30
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d103      	bne.n	80062e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	e002      	b.n	80062e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062f2:	2101      	movs	r1, #1
 80062f4:	69b8      	ldr	r0, [r7, #24]
 80062f6:	f7ff fef9 	bl	80060ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	78fa      	ldrb	r2, [r7, #3]
 80062fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006302:	bf00      	nop
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08e      	sub	sp, #56	; 0x38
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800631a:	2300      	movs	r3, #0
 800631c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10c      	bne.n	8006342 <xQueueGenericSend+0x36>
	__asm volatile
 8006328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632c:	b672      	cpsid	i
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	b662      	cpsie	i
 800633c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800633e:	bf00      	nop
 8006340:	e7fe      	b.n	8006340 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d103      	bne.n	8006350 <xQueueGenericSend+0x44>
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <xQueueGenericSend+0x48>
 8006350:	2301      	movs	r3, #1
 8006352:	e000      	b.n	8006356 <xQueueGenericSend+0x4a>
 8006354:	2300      	movs	r3, #0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10c      	bne.n	8006374 <xQueueGenericSend+0x68>
	__asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635e:	b672      	cpsid	i
 8006360:	f383 8811 	msr	BASEPRI, r3
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	b662      	cpsie	i
 800636e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006370:	bf00      	nop
 8006372:	e7fe      	b.n	8006372 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b02      	cmp	r3, #2
 8006378:	d103      	bne.n	8006382 <xQueueGenericSend+0x76>
 800637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <xQueueGenericSend+0x7a>
 8006382:	2301      	movs	r3, #1
 8006384:	e000      	b.n	8006388 <xQueueGenericSend+0x7c>
 8006386:	2300      	movs	r3, #0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10c      	bne.n	80063a6 <xQueueGenericSend+0x9a>
	__asm volatile
 800638c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006390:	b672      	cpsid	i
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	b662      	cpsie	i
 80063a0:	623b      	str	r3, [r7, #32]
}
 80063a2:	bf00      	nop
 80063a4:	e7fe      	b.n	80063a4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063a6:	f001 f9e9 	bl	800777c <xTaskGetSchedulerState>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d102      	bne.n	80063b6 <xQueueGenericSend+0xaa>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <xQueueGenericSend+0xae>
 80063b6:	2301      	movs	r3, #1
 80063b8:	e000      	b.n	80063bc <xQueueGenericSend+0xb0>
 80063ba:	2300      	movs	r3, #0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10c      	bne.n	80063da <xQueueGenericSend+0xce>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	b672      	cpsid	i
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	b662      	cpsie	i
 80063d4:	61fb      	str	r3, [r7, #28]
}
 80063d6:	bf00      	nop
 80063d8:	e7fe      	b.n	80063d8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063da:	f001 ff1f 	bl	800821c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d302      	bcc.n	80063f0 <xQueueGenericSend+0xe4>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d129      	bne.n	8006444 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	68b9      	ldr	r1, [r7, #8]
 80063f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063f6:	f000 fa15 	bl	8006824 <prvCopyDataToQueue>
 80063fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	2b00      	cmp	r3, #0
 8006402:	d010      	beq.n	8006426 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006406:	3324      	adds	r3, #36	; 0x24
 8006408:	4618      	mov	r0, r3
 800640a:	f000 fff1 	bl	80073f0 <xTaskRemoveFromEventList>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d013      	beq.n	800643c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006414:	4b3f      	ldr	r3, [pc, #252]	; (8006514 <xQueueGenericSend+0x208>)
 8006416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800641a:	601a      	str	r2, [r3, #0]
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	e00a      	b.n	800643c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006428:	2b00      	cmp	r3, #0
 800642a:	d007      	beq.n	800643c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800642c:	4b39      	ldr	r3, [pc, #228]	; (8006514 <xQueueGenericSend+0x208>)
 800642e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800643c:	f001 ff22 	bl	8008284 <vPortExitCritical>
				return pdPASS;
 8006440:	2301      	movs	r3, #1
 8006442:	e063      	b.n	800650c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d103      	bne.n	8006452 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800644a:	f001 ff1b 	bl	8008284 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800644e:	2300      	movs	r3, #0
 8006450:	e05c      	b.n	800650c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006454:	2b00      	cmp	r3, #0
 8006456:	d106      	bne.n	8006466 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006458:	f107 0314 	add.w	r3, r7, #20
 800645c:	4618      	mov	r0, r3
 800645e:	f001 f82d 	bl	80074bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006462:	2301      	movs	r3, #1
 8006464:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006466:	f001 ff0d 	bl	8008284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800646a:	f000 fd93 	bl	8006f94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800646e:	f001 fed5 	bl	800821c <vPortEnterCritical>
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006478:	b25b      	sxtb	r3, r3
 800647a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647e:	d103      	bne.n	8006488 <xQueueGenericSend+0x17c>
 8006480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006482:	2200      	movs	r2, #0
 8006484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800648e:	b25b      	sxtb	r3, r3
 8006490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006494:	d103      	bne.n	800649e <xQueueGenericSend+0x192>
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800649e:	f001 fef1 	bl	8008284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064a2:	1d3a      	adds	r2, r7, #4
 80064a4:	f107 0314 	add.w	r3, r7, #20
 80064a8:	4611      	mov	r1, r2
 80064aa:	4618      	mov	r0, r3
 80064ac:	f001 f81c 	bl	80074e8 <xTaskCheckForTimeOut>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d124      	bne.n	8006500 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064b8:	f000 faac 	bl	8006a14 <prvIsQueueFull>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d018      	beq.n	80064f4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80064c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c4:	3310      	adds	r3, #16
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	4611      	mov	r1, r2
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 ff3c 	bl	8007348 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80064d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064d2:	f000 fa37 	bl	8006944 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80064d6:	f000 fd6b 	bl	8006fb0 <xTaskResumeAll>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f47f af7c 	bne.w	80063da <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80064e2:	4b0c      	ldr	r3, [pc, #48]	; (8006514 <xQueueGenericSend+0x208>)
 80064e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	e772      	b.n	80063da <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80064f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064f6:	f000 fa25 	bl	8006944 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064fa:	f000 fd59 	bl	8006fb0 <xTaskResumeAll>
 80064fe:	e76c      	b.n	80063da <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006502:	f000 fa1f 	bl	8006944 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006506:	f000 fd53 	bl	8006fb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800650a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800650c:	4618      	mov	r0, r3
 800650e:	3738      	adds	r7, #56	; 0x38
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	e000ed04 	.word	0xe000ed04

08006518 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b08e      	sub	sp, #56	; 0x38
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
 8006524:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10c      	bne.n	800654a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	b672      	cpsid	i
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	b662      	cpsie	i
 8006544:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006546:	bf00      	nop
 8006548:	e7fe      	b.n	8006548 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d103      	bne.n	8006558 <xQueueGenericSendFromISR+0x40>
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <xQueueGenericSendFromISR+0x44>
 8006558:	2301      	movs	r3, #1
 800655a:	e000      	b.n	800655e <xQueueGenericSendFromISR+0x46>
 800655c:	2300      	movs	r3, #0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10c      	bne.n	800657c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006566:	b672      	cpsid	i
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	b662      	cpsie	i
 8006576:	623b      	str	r3, [r7, #32]
}
 8006578:	bf00      	nop
 800657a:	e7fe      	b.n	800657a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	2b02      	cmp	r3, #2
 8006580:	d103      	bne.n	800658a <xQueueGenericSendFromISR+0x72>
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006586:	2b01      	cmp	r3, #1
 8006588:	d101      	bne.n	800658e <xQueueGenericSendFromISR+0x76>
 800658a:	2301      	movs	r3, #1
 800658c:	e000      	b.n	8006590 <xQueueGenericSendFromISR+0x78>
 800658e:	2300      	movs	r3, #0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10c      	bne.n	80065ae <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006598:	b672      	cpsid	i
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	b662      	cpsie	i
 80065a8:	61fb      	str	r3, [r7, #28]
}
 80065aa:	bf00      	nop
 80065ac:	e7fe      	b.n	80065ac <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065ae:	f001 ff1d 	bl	80083ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80065b2:	f3ef 8211 	mrs	r2, BASEPRI
 80065b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ba:	b672      	cpsid	i
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	b662      	cpsie	i
 80065ca:	61ba      	str	r2, [r7, #24]
 80065cc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80065ce:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065da:	429a      	cmp	r2, r3
 80065dc:	d302      	bcc.n	80065e4 <xQueueGenericSendFromISR+0xcc>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d12c      	bne.n	800663e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80065e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	68b9      	ldr	r1, [r7, #8]
 80065f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065f4:	f000 f916 	bl	8006824 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80065f8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80065fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006600:	d112      	bne.n	8006628 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	2b00      	cmp	r3, #0
 8006608:	d016      	beq.n	8006638 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800660a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660c:	3324      	adds	r3, #36	; 0x24
 800660e:	4618      	mov	r0, r3
 8006610:	f000 feee 	bl	80073f0 <xTaskRemoveFromEventList>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00e      	beq.n	8006638 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00b      	beq.n	8006638 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	e007      	b.n	8006638 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006628:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800662c:	3301      	adds	r3, #1
 800662e:	b2db      	uxtb	r3, r3
 8006630:	b25a      	sxtb	r2, r3
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006638:	2301      	movs	r3, #1
 800663a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800663c:	e001      	b.n	8006642 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800663e:	2300      	movs	r3, #0
 8006640:	637b      	str	r3, [r7, #52]	; 0x34
 8006642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006644:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800664c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800664e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006650:	4618      	mov	r0, r3
 8006652:	3738      	adds	r7, #56	; 0x38
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08c      	sub	sp, #48	; 0x30
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006664:	2300      	movs	r3, #0
 8006666:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10c      	bne.n	800668c <xQueueReceive+0x34>
	__asm volatile
 8006672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006676:	b672      	cpsid	i
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	b662      	cpsie	i
 8006686:	623b      	str	r3, [r7, #32]
}
 8006688:	bf00      	nop
 800668a:	e7fe      	b.n	800668a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d103      	bne.n	800669a <xQueueReceive+0x42>
 8006692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <xQueueReceive+0x46>
 800669a:	2301      	movs	r3, #1
 800669c:	e000      	b.n	80066a0 <xQueueReceive+0x48>
 800669e:	2300      	movs	r3, #0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10c      	bne.n	80066be <xQueueReceive+0x66>
	__asm volatile
 80066a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a8:	b672      	cpsid	i
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	b662      	cpsie	i
 80066b8:	61fb      	str	r3, [r7, #28]
}
 80066ba:	bf00      	nop
 80066bc:	e7fe      	b.n	80066bc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066be:	f001 f85d 	bl	800777c <xTaskGetSchedulerState>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d102      	bne.n	80066ce <xQueueReceive+0x76>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <xQueueReceive+0x7a>
 80066ce:	2301      	movs	r3, #1
 80066d0:	e000      	b.n	80066d4 <xQueueReceive+0x7c>
 80066d2:	2300      	movs	r3, #0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10c      	bne.n	80066f2 <xQueueReceive+0x9a>
	__asm volatile
 80066d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066dc:	b672      	cpsid	i
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	b662      	cpsie	i
 80066ec:	61bb      	str	r3, [r7, #24]
}
 80066ee:	bf00      	nop
 80066f0:	e7fe      	b.n	80066f0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066f2:	f001 fd93 	bl	800821c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d01f      	beq.n	8006742 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006702:	68b9      	ldr	r1, [r7, #8]
 8006704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006706:	f000 f8f7 	bl	80068f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	1e5a      	subs	r2, r3, #1
 800670e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006710:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00f      	beq.n	800673a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671c:	3310      	adds	r3, #16
 800671e:	4618      	mov	r0, r3
 8006720:	f000 fe66 	bl	80073f0 <xTaskRemoveFromEventList>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d007      	beq.n	800673a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800672a:	4b3d      	ldr	r3, [pc, #244]	; (8006820 <xQueueReceive+0x1c8>)
 800672c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800673a:	f001 fda3 	bl	8008284 <vPortExitCritical>
				return pdPASS;
 800673e:	2301      	movs	r3, #1
 8006740:	e069      	b.n	8006816 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d103      	bne.n	8006750 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006748:	f001 fd9c 	bl	8008284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800674c:	2300      	movs	r3, #0
 800674e:	e062      	b.n	8006816 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	2b00      	cmp	r3, #0
 8006754:	d106      	bne.n	8006764 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006756:	f107 0310 	add.w	r3, r7, #16
 800675a:	4618      	mov	r0, r3
 800675c:	f000 feae 	bl	80074bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006760:	2301      	movs	r3, #1
 8006762:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006764:	f001 fd8e 	bl	8008284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006768:	f000 fc14 	bl	8006f94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800676c:	f001 fd56 	bl	800821c <vPortEnterCritical>
 8006770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006772:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006776:	b25b      	sxtb	r3, r3
 8006778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677c:	d103      	bne.n	8006786 <xQueueReceive+0x12e>
 800677e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006788:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800678c:	b25b      	sxtb	r3, r3
 800678e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006792:	d103      	bne.n	800679c <xQueueReceive+0x144>
 8006794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800679c:	f001 fd72 	bl	8008284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067a0:	1d3a      	adds	r2, r7, #4
 80067a2:	f107 0310 	add.w	r3, r7, #16
 80067a6:	4611      	mov	r1, r2
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 fe9d 	bl	80074e8 <xTaskCheckForTimeOut>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d123      	bne.n	80067fc <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067b6:	f000 f917 	bl	80069e8 <prvIsQueueEmpty>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d017      	beq.n	80067f0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c2:	3324      	adds	r3, #36	; 0x24
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	4611      	mov	r1, r2
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 fdbd 	bl	8007348 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067d0:	f000 f8b8 	bl	8006944 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067d4:	f000 fbec 	bl	8006fb0 <xTaskResumeAll>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d189      	bne.n	80066f2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80067de:	4b10      	ldr	r3, [pc, #64]	; (8006820 <xQueueReceive+0x1c8>)
 80067e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e4:	601a      	str	r2, [r3, #0]
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	e780      	b.n	80066f2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80067f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067f2:	f000 f8a7 	bl	8006944 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067f6:	f000 fbdb 	bl	8006fb0 <xTaskResumeAll>
 80067fa:	e77a      	b.n	80066f2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80067fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067fe:	f000 f8a1 	bl	8006944 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006802:	f000 fbd5 	bl	8006fb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006808:	f000 f8ee 	bl	80069e8 <prvIsQueueEmpty>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	f43f af6f 	beq.w	80066f2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006814:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006816:	4618      	mov	r0, r3
 8006818:	3730      	adds	r7, #48	; 0x30
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	e000ed04 	.word	0xe000ed04

08006824 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006830:	2300      	movs	r3, #0
 8006832:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006838:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10d      	bne.n	800685e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d14d      	bne.n	80068e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	4618      	mov	r0, r3
 8006850:	f000 ffb2 	bl	80077b8 <xTaskPriorityDisinherit>
 8006854:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	609a      	str	r2, [r3, #8]
 800685c:	e043      	b.n	80068e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d119      	bne.n	8006898 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6858      	ldr	r0, [r3, #4]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686c:	461a      	mov	r2, r3
 800686e:	68b9      	ldr	r1, [r7, #8]
 8006870:	f002 f808 	bl	8008884 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687c:	441a      	add	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	429a      	cmp	r2, r3
 800688c:	d32b      	bcc.n	80068e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	605a      	str	r2, [r3, #4]
 8006896:	e026      	b.n	80068e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	68d8      	ldr	r0, [r3, #12]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a0:	461a      	mov	r2, r3
 80068a2:	68b9      	ldr	r1, [r7, #8]
 80068a4:	f001 ffee 	bl	8008884 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	68da      	ldr	r2, [r3, #12]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b0:	425b      	negs	r3, r3
 80068b2:	441a      	add	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	68da      	ldr	r2, [r3, #12]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d207      	bcs.n	80068d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	689a      	ldr	r2, [r3, #8]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068cc:	425b      	negs	r3, r3
 80068ce:	441a      	add	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d105      	bne.n	80068e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d002      	beq.n	80068e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	3b01      	subs	r3, #1
 80068e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80068ee:	697b      	ldr	r3, [r7, #20]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3718      	adds	r7, #24
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	2b00      	cmp	r3, #0
 8006908:	d018      	beq.n	800693c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68da      	ldr	r2, [r3, #12]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	441a      	add	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68da      	ldr	r2, [r3, #12]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	429a      	cmp	r2, r3
 8006922:	d303      	bcc.n	800692c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68d9      	ldr	r1, [r3, #12]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006934:	461a      	mov	r2, r3
 8006936:	6838      	ldr	r0, [r7, #0]
 8006938:	f001 ffa4 	bl	8008884 <memcpy>
	}
}
 800693c:	bf00      	nop
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800694c:	f001 fc66 	bl	800821c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006956:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006958:	e011      	b.n	800697e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	2b00      	cmp	r3, #0
 8006960:	d012      	beq.n	8006988 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	3324      	adds	r3, #36	; 0x24
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fd42 	bl	80073f0 <xTaskRemoveFromEventList>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006972:	f000 fe1f 	bl	80075b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006976:	7bfb      	ldrb	r3, [r7, #15]
 8006978:	3b01      	subs	r3, #1
 800697a:	b2db      	uxtb	r3, r3
 800697c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800697e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006982:	2b00      	cmp	r3, #0
 8006984:	dce9      	bgt.n	800695a <prvUnlockQueue+0x16>
 8006986:	e000      	b.n	800698a <prvUnlockQueue+0x46>
					break;
 8006988:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	22ff      	movs	r2, #255	; 0xff
 800698e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006992:	f001 fc77 	bl	8008284 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006996:	f001 fc41 	bl	800821c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069a2:	e011      	b.n	80069c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d012      	beq.n	80069d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3310      	adds	r3, #16
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 fd1d 	bl	80073f0 <xTaskRemoveFromEventList>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d001      	beq.n	80069c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069bc:	f000 fdfa 	bl	80075b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80069c0:	7bbb      	ldrb	r3, [r7, #14]
 80069c2:	3b01      	subs	r3, #1
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	dce9      	bgt.n	80069a4 <prvUnlockQueue+0x60>
 80069d0:	e000      	b.n	80069d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80069d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	22ff      	movs	r2, #255	; 0xff
 80069d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80069dc:	f001 fc52 	bl	8008284 <vPortExitCritical>
}
 80069e0:	bf00      	nop
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069f0:	f001 fc14 	bl	800821c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d102      	bne.n	8006a02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80069fc:	2301      	movs	r3, #1
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	e001      	b.n	8006a06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a06:	f001 fc3d 	bl	8008284 <vPortExitCritical>

	return xReturn;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a1c:	f001 fbfe 	bl	800821c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d102      	bne.n	8006a32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	60fb      	str	r3, [r7, #12]
 8006a30:	e001      	b.n	8006a36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a32:	2300      	movs	r3, #0
 8006a34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a36:	f001 fc25 	bl	8008284 <vPortExitCritical>

	return xReturn;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60fb      	str	r3, [r7, #12]
 8006a52:	e014      	b.n	8006a7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a54:	4a0f      	ldr	r2, [pc, #60]	; (8006a94 <vQueueAddToRegistry+0x50>)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10b      	bne.n	8006a78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a60:	490c      	ldr	r1, [pc, #48]	; (8006a94 <vQueueAddToRegistry+0x50>)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a6a:	4a0a      	ldr	r2, [pc, #40]	; (8006a94 <vQueueAddToRegistry+0x50>)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	00db      	lsls	r3, r3, #3
 8006a70:	4413      	add	r3, r2
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a76:	e006      	b.n	8006a86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	60fb      	str	r3, [r7, #12]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2b07      	cmp	r3, #7
 8006a82:	d9e7      	bls.n	8006a54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006a84:	bf00      	nop
 8006a86:	bf00      	nop
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	20004e68 	.word	0x20004e68

08006a98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006aa8:	f001 fbb8 	bl	800821c <vPortEnterCritical>
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ab2:	b25b      	sxtb	r3, r3
 8006ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab8:	d103      	bne.n	8006ac2 <vQueueWaitForMessageRestricted+0x2a>
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ac8:	b25b      	sxtb	r3, r3
 8006aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ace:	d103      	bne.n	8006ad8 <vQueueWaitForMessageRestricted+0x40>
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ad8:	f001 fbd4 	bl	8008284 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d106      	bne.n	8006af2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	3324      	adds	r3, #36	; 0x24
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	68b9      	ldr	r1, [r7, #8]
 8006aec:	4618      	mov	r0, r3
 8006aee:	f000 fc51 	bl	8007394 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006af2:	6978      	ldr	r0, [r7, #20]
 8006af4:	f7ff ff26 	bl	8006944 <prvUnlockQueue>
	}
 8006af8:	bf00      	nop
 8006afa:	3718      	adds	r7, #24
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08e      	sub	sp, #56	; 0x38
 8006b04:	af04      	add	r7, sp, #16
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
 8006b0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10c      	bne.n	8006b2e <xTaskCreateStatic+0x2e>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	b672      	cpsid	i
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	b662      	cpsie	i
 8006b28:	623b      	str	r3, [r7, #32]
}
 8006b2a:	bf00      	nop
 8006b2c:	e7fe      	b.n	8006b2c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10c      	bne.n	8006b4e <xTaskCreateStatic+0x4e>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b38:	b672      	cpsid	i
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	b662      	cpsie	i
 8006b48:	61fb      	str	r3, [r7, #28]
}
 8006b4a:	bf00      	nop
 8006b4c:	e7fe      	b.n	8006b4c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b4e:	235c      	movs	r3, #92	; 0x5c
 8006b50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	2b5c      	cmp	r3, #92	; 0x5c
 8006b56:	d00c      	beq.n	8006b72 <xTaskCreateStatic+0x72>
	__asm volatile
 8006b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5c:	b672      	cpsid	i
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	b662      	cpsie	i
 8006b6c:	61bb      	str	r3, [r7, #24]
}
 8006b6e:	bf00      	nop
 8006b70:	e7fe      	b.n	8006b70 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b72:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d01e      	beq.n	8006bb8 <xTaskCreateStatic+0xb8>
 8006b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d01b      	beq.n	8006bb8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b82:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b88:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b92:	2300      	movs	r3, #0
 8006b94:	9303      	str	r3, [sp, #12]
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	9302      	str	r3, [sp, #8]
 8006b9a:	f107 0314 	add.w	r3, r7, #20
 8006b9e:	9301      	str	r3, [sp, #4]
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	68b9      	ldr	r1, [r7, #8]
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 f850 	bl	8006c50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bb2:	f000 f8df 	bl	8006d74 <prvAddNewTaskToReadyList>
 8006bb6:	e001      	b.n	8006bbc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006bbc:	697b      	ldr	r3, [r7, #20]
	}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3728      	adds	r7, #40	; 0x28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b08c      	sub	sp, #48	; 0x30
 8006bca:	af04      	add	r7, sp, #16
 8006bcc:	60f8      	str	r0, [r7, #12]
 8006bce:	60b9      	str	r1, [r7, #8]
 8006bd0:	603b      	str	r3, [r7, #0]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006bd6:	88fb      	ldrh	r3, [r7, #6]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f001 fc4a 	bl	8008474 <pvPortMalloc>
 8006be0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00e      	beq.n	8006c06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006be8:	205c      	movs	r0, #92	; 0x5c
 8006bea:	f001 fc43 	bl	8008474 <pvPortMalloc>
 8006bee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	631a      	str	r2, [r3, #48]	; 0x30
 8006bfc:	e005      	b.n	8006c0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006bfe:	6978      	ldr	r0, [r7, #20]
 8006c00:	f001 fd02 	bl	8008608 <vPortFree>
 8006c04:	e001      	b.n	8006c0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d017      	beq.n	8006c40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c18:	88fa      	ldrh	r2, [r7, #6]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	9303      	str	r3, [sp, #12]
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	9302      	str	r3, [sp, #8]
 8006c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c24:	9301      	str	r3, [sp, #4]
 8006c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	68b9      	ldr	r1, [r7, #8]
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 f80e 	bl	8006c50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c34:	69f8      	ldr	r0, [r7, #28]
 8006c36:	f000 f89d 	bl	8006d74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	61bb      	str	r3, [r7, #24]
 8006c3e:	e002      	b.n	8006c46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c40:	f04f 33ff 	mov.w	r3, #4294967295
 8006c44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c46:	69bb      	ldr	r3, [r7, #24]
	}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3720      	adds	r7, #32
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b088      	sub	sp, #32
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
 8006c5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	461a      	mov	r2, r3
 8006c68:	21a5      	movs	r1, #165	; 0xa5
 8006c6a:	f001 fe19 	bl	80088a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c72:	6879      	ldr	r1, [r7, #4]
 8006c74:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006c78:	440b      	add	r3, r1
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	f023 0307 	bic.w	r3, r3, #7
 8006c86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	f003 0307 	and.w	r3, r3, #7
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00c      	beq.n	8006cac <prvInitialiseNewTask+0x5c>
	__asm volatile
 8006c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c96:	b672      	cpsid	i
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	b662      	cpsie	i
 8006ca6:	617b      	str	r3, [r7, #20]
}
 8006ca8:	bf00      	nop
 8006caa:	e7fe      	b.n	8006caa <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d01f      	beq.n	8006cf2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	61fb      	str	r3, [r7, #28]
 8006cb6:	e012      	b.n	8006cde <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	7819      	ldrb	r1, [r3, #0]
 8006cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	3334      	adds	r3, #52	; 0x34
 8006cc8:	460a      	mov	r2, r1
 8006cca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d006      	beq.n	8006ce6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	61fb      	str	r3, [r7, #28]
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	2b0f      	cmp	r3, #15
 8006ce2:	d9e9      	bls.n	8006cb8 <prvInitialiseNewTask+0x68>
 8006ce4:	e000      	b.n	8006ce8 <prvInitialiseNewTask+0x98>
			{
				break;
 8006ce6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cf0:	e003      	b.n	8006cfa <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfc:	2b37      	cmp	r3, #55	; 0x37
 8006cfe:	d901      	bls.n	8006d04 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d00:	2337      	movs	r3, #55	; 0x37
 8006d02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d0e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d12:	2200      	movs	r2, #0
 8006d14:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	3304      	adds	r3, #4
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7ff f952 	bl	8005fc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d22:	3318      	adds	r3, #24
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff f94d 	bl	8005fc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d42:	2200      	movs	r2, #0
 8006d44:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	68f9      	ldr	r1, [r7, #12]
 8006d52:	69b8      	ldr	r0, [r7, #24]
 8006d54:	f001 f952 	bl	8007ffc <pxPortInitialiseStack>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d6a:	bf00      	nop
 8006d6c:	3720      	adds	r7, #32
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d7c:	f001 fa4e 	bl	800821c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d80:	4b2d      	ldr	r3, [pc, #180]	; (8006e38 <prvAddNewTaskToReadyList+0xc4>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3301      	adds	r3, #1
 8006d86:	4a2c      	ldr	r2, [pc, #176]	; (8006e38 <prvAddNewTaskToReadyList+0xc4>)
 8006d88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d8a:	4b2c      	ldr	r3, [pc, #176]	; (8006e3c <prvAddNewTaskToReadyList+0xc8>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d109      	bne.n	8006da6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d92:	4a2a      	ldr	r2, [pc, #168]	; (8006e3c <prvAddNewTaskToReadyList+0xc8>)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d98:	4b27      	ldr	r3, [pc, #156]	; (8006e38 <prvAddNewTaskToReadyList+0xc4>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d110      	bne.n	8006dc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006da0:	f000 fc2c 	bl	80075fc <prvInitialiseTaskLists>
 8006da4:	e00d      	b.n	8006dc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006da6:	4b26      	ldr	r3, [pc, #152]	; (8006e40 <prvAddNewTaskToReadyList+0xcc>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d109      	bne.n	8006dc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dae:	4b23      	ldr	r3, [pc, #140]	; (8006e3c <prvAddNewTaskToReadyList+0xc8>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d802      	bhi.n	8006dc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006dbc:	4a1f      	ldr	r2, [pc, #124]	; (8006e3c <prvAddNewTaskToReadyList+0xc8>)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006dc2:	4b20      	ldr	r3, [pc, #128]	; (8006e44 <prvAddNewTaskToReadyList+0xd0>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	4a1e      	ldr	r2, [pc, #120]	; (8006e44 <prvAddNewTaskToReadyList+0xd0>)
 8006dca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006dcc:	4b1d      	ldr	r3, [pc, #116]	; (8006e44 <prvAddNewTaskToReadyList+0xd0>)
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd8:	4b1b      	ldr	r3, [pc, #108]	; (8006e48 <prvAddNewTaskToReadyList+0xd4>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d903      	bls.n	8006de8 <prvAddNewTaskToReadyList+0x74>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de4:	4a18      	ldr	r2, [pc, #96]	; (8006e48 <prvAddNewTaskToReadyList+0xd4>)
 8006de6:	6013      	str	r3, [r2, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dec:	4613      	mov	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4a15      	ldr	r2, [pc, #84]	; (8006e4c <prvAddNewTaskToReadyList+0xd8>)
 8006df6:	441a      	add	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4610      	mov	r0, r2
 8006e00:	f7ff f8ed 	bl	8005fde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e04:	f001 fa3e 	bl	8008284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e08:	4b0d      	ldr	r3, [pc, #52]	; (8006e40 <prvAddNewTaskToReadyList+0xcc>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00e      	beq.n	8006e2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e10:	4b0a      	ldr	r3, [pc, #40]	; (8006e3c <prvAddNewTaskToReadyList+0xc8>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d207      	bcs.n	8006e2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e1e:	4b0c      	ldr	r3, [pc, #48]	; (8006e50 <prvAddNewTaskToReadyList+0xdc>)
 8006e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e2e:	bf00      	nop
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20000d3c 	.word	0x20000d3c
 8006e3c:	20000868 	.word	0x20000868
 8006e40:	20000d48 	.word	0x20000d48
 8006e44:	20000d58 	.word	0x20000d58
 8006e48:	20000d44 	.word	0x20000d44
 8006e4c:	2000086c 	.word	0x2000086c
 8006e50:	e000ed04 	.word	0xe000ed04

08006e54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d019      	beq.n	8006e9a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e66:	4b14      	ldr	r3, [pc, #80]	; (8006eb8 <vTaskDelay+0x64>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00c      	beq.n	8006e88 <vTaskDelay+0x34>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	b672      	cpsid	i
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	b662      	cpsie	i
 8006e82:	60bb      	str	r3, [r7, #8]
}
 8006e84:	bf00      	nop
 8006e86:	e7fe      	b.n	8006e86 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006e88:	f000 f884 	bl	8006f94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fd04 	bl	800789c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e94:	f000 f88c 	bl	8006fb0 <xTaskResumeAll>
 8006e98:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d107      	bne.n	8006eb0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006ea0:	4b06      	ldr	r3, [pc, #24]	; (8006ebc <vTaskDelay+0x68>)
 8006ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006eb0:	bf00      	nop
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	20000d64 	.word	0x20000d64
 8006ebc:	e000ed04 	.word	0xe000ed04

08006ec0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b08a      	sub	sp, #40	; 0x28
 8006ec4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ece:	463a      	mov	r2, r7
 8006ed0:	1d39      	adds	r1, r7, #4
 8006ed2:	f107 0308 	add.w	r3, r7, #8
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff f820 	bl	8005f1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	9202      	str	r2, [sp, #8]
 8006ee4:	9301      	str	r3, [sp, #4]
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	2300      	movs	r3, #0
 8006eec:	460a      	mov	r2, r1
 8006eee:	4923      	ldr	r1, [pc, #140]	; (8006f7c <vTaskStartScheduler+0xbc>)
 8006ef0:	4823      	ldr	r0, [pc, #140]	; (8006f80 <vTaskStartScheduler+0xc0>)
 8006ef2:	f7ff fe05 	bl	8006b00 <xTaskCreateStatic>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4a22      	ldr	r2, [pc, #136]	; (8006f84 <vTaskStartScheduler+0xc4>)
 8006efa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006efc:	4b21      	ldr	r3, [pc, #132]	; (8006f84 <vTaskStartScheduler+0xc4>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f04:	2301      	movs	r3, #1
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	e001      	b.n	8006f0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d102      	bne.n	8006f1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f14:	f000 fd16 	bl	8007944 <xTimerCreateTimerTask>
 8006f18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d118      	bne.n	8006f52 <vTaskStartScheduler+0x92>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	b672      	cpsid	i
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	b662      	cpsie	i
 8006f34:	613b      	str	r3, [r7, #16]
}
 8006f36:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f38:	4b13      	ldr	r3, [pc, #76]	; (8006f88 <vTaskStartScheduler+0xc8>)
 8006f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f3e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f40:	4b12      	ldr	r3, [pc, #72]	; (8006f8c <vTaskStartScheduler+0xcc>)
 8006f42:	2201      	movs	r2, #1
 8006f44:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f46:	4b12      	ldr	r3, [pc, #72]	; (8006f90 <vTaskStartScheduler+0xd0>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f4c:	f001 f8e8 	bl	8008120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f50:	e010      	b.n	8006f74 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f58:	d10c      	bne.n	8006f74 <vTaskStartScheduler+0xb4>
	__asm volatile
 8006f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5e:	b672      	cpsid	i
 8006f60:	f383 8811 	msr	BASEPRI, r3
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	b662      	cpsie	i
 8006f6e:	60fb      	str	r3, [r7, #12]
}
 8006f70:	bf00      	nop
 8006f72:	e7fe      	b.n	8006f72 <vTaskStartScheduler+0xb2>
}
 8006f74:	bf00      	nop
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	08008904 	.word	0x08008904
 8006f80:	080075cd 	.word	0x080075cd
 8006f84:	20000d60 	.word	0x20000d60
 8006f88:	20000d5c 	.word	0x20000d5c
 8006f8c:	20000d48 	.word	0x20000d48
 8006f90:	20000d40 	.word	0x20000d40

08006f94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f94:	b480      	push	{r7}
 8006f96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006f98:	4b04      	ldr	r3, [pc, #16]	; (8006fac <vTaskSuspendAll+0x18>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	4a03      	ldr	r2, [pc, #12]	; (8006fac <vTaskSuspendAll+0x18>)
 8006fa0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006fa2:	bf00      	nop
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	20000d64 	.word	0x20000d64

08006fb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fbe:	4b43      	ldr	r3, [pc, #268]	; (80070cc <xTaskResumeAll+0x11c>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10c      	bne.n	8006fe0 <xTaskResumeAll+0x30>
	__asm volatile
 8006fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fca:	b672      	cpsid	i
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	b662      	cpsie	i
 8006fda:	603b      	str	r3, [r7, #0]
}
 8006fdc:	bf00      	nop
 8006fde:	e7fe      	b.n	8006fde <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006fe0:	f001 f91c 	bl	800821c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006fe4:	4b39      	ldr	r3, [pc, #228]	; (80070cc <xTaskResumeAll+0x11c>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	4a38      	ldr	r2, [pc, #224]	; (80070cc <xTaskResumeAll+0x11c>)
 8006fec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fee:	4b37      	ldr	r3, [pc, #220]	; (80070cc <xTaskResumeAll+0x11c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d162      	bne.n	80070bc <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ff6:	4b36      	ldr	r3, [pc, #216]	; (80070d0 <xTaskResumeAll+0x120>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d05e      	beq.n	80070bc <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ffe:	e02f      	b.n	8007060 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007000:	4b34      	ldr	r3, [pc, #208]	; (80070d4 <xTaskResumeAll+0x124>)
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	3318      	adds	r3, #24
 800700c:	4618      	mov	r0, r3
 800700e:	f7ff f843 	bl	8006098 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	3304      	adds	r3, #4
 8007016:	4618      	mov	r0, r3
 8007018:	f7ff f83e 	bl	8006098 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007020:	4b2d      	ldr	r3, [pc, #180]	; (80070d8 <xTaskResumeAll+0x128>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	429a      	cmp	r2, r3
 8007026:	d903      	bls.n	8007030 <xTaskResumeAll+0x80>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702c:	4a2a      	ldr	r2, [pc, #168]	; (80070d8 <xTaskResumeAll+0x128>)
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007034:	4613      	mov	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4a27      	ldr	r2, [pc, #156]	; (80070dc <xTaskResumeAll+0x12c>)
 800703e:	441a      	add	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	3304      	adds	r3, #4
 8007044:	4619      	mov	r1, r3
 8007046:	4610      	mov	r0, r2
 8007048:	f7fe ffc9 	bl	8005fde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007050:	4b23      	ldr	r3, [pc, #140]	; (80070e0 <xTaskResumeAll+0x130>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007056:	429a      	cmp	r2, r3
 8007058:	d302      	bcc.n	8007060 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800705a:	4b22      	ldr	r3, [pc, #136]	; (80070e4 <xTaskResumeAll+0x134>)
 800705c:	2201      	movs	r2, #1
 800705e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007060:	4b1c      	ldr	r3, [pc, #112]	; (80070d4 <xTaskResumeAll+0x124>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1cb      	bne.n	8007000 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d001      	beq.n	8007072 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800706e:	f000 fb65 	bl	800773c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007072:	4b1d      	ldr	r3, [pc, #116]	; (80070e8 <xTaskResumeAll+0x138>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d010      	beq.n	80070a0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800707e:	f000 f847 	bl	8007110 <xTaskIncrementTick>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8007088:	4b16      	ldr	r3, [pc, #88]	; (80070e4 <xTaskResumeAll+0x134>)
 800708a:	2201      	movs	r2, #1
 800708c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	3b01      	subs	r3, #1
 8007092:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1f1      	bne.n	800707e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800709a:	4b13      	ldr	r3, [pc, #76]	; (80070e8 <xTaskResumeAll+0x138>)
 800709c:	2200      	movs	r2, #0
 800709e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070a0:	4b10      	ldr	r3, [pc, #64]	; (80070e4 <xTaskResumeAll+0x134>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d009      	beq.n	80070bc <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070a8:	2301      	movs	r3, #1
 80070aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070ac:	4b0f      	ldr	r3, [pc, #60]	; (80070ec <xTaskResumeAll+0x13c>)
 80070ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070b2:	601a      	str	r2, [r3, #0]
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070bc:	f001 f8e2 	bl	8008284 <vPortExitCritical>

	return xAlreadyYielded;
 80070c0:	68bb      	ldr	r3, [r7, #8]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	20000d64 	.word	0x20000d64
 80070d0:	20000d3c 	.word	0x20000d3c
 80070d4:	20000cfc 	.word	0x20000cfc
 80070d8:	20000d44 	.word	0x20000d44
 80070dc:	2000086c 	.word	0x2000086c
 80070e0:	20000868 	.word	0x20000868
 80070e4:	20000d50 	.word	0x20000d50
 80070e8:	20000d4c 	.word	0x20000d4c
 80070ec:	e000ed04 	.word	0xe000ed04

080070f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80070f6:	4b05      	ldr	r3, [pc, #20]	; (800710c <xTaskGetTickCount+0x1c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80070fc:	687b      	ldr	r3, [r7, #4]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	20000d40 	.word	0x20000d40

08007110 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007116:	2300      	movs	r3, #0
 8007118:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800711a:	4b50      	ldr	r3, [pc, #320]	; (800725c <xTaskIncrementTick+0x14c>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	f040 808b 	bne.w	800723a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007124:	4b4e      	ldr	r3, [pc, #312]	; (8007260 <xTaskIncrementTick+0x150>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	3301      	adds	r3, #1
 800712a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800712c:	4a4c      	ldr	r2, [pc, #304]	; (8007260 <xTaskIncrementTick+0x150>)
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d122      	bne.n	800717e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007138:	4b4a      	ldr	r3, [pc, #296]	; (8007264 <xTaskIncrementTick+0x154>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00c      	beq.n	800715c <xTaskIncrementTick+0x4c>
	__asm volatile
 8007142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007146:	b672      	cpsid	i
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	b662      	cpsie	i
 8007156:	603b      	str	r3, [r7, #0]
}
 8007158:	bf00      	nop
 800715a:	e7fe      	b.n	800715a <xTaskIncrementTick+0x4a>
 800715c:	4b41      	ldr	r3, [pc, #260]	; (8007264 <xTaskIncrementTick+0x154>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	4b41      	ldr	r3, [pc, #260]	; (8007268 <xTaskIncrementTick+0x158>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a3f      	ldr	r2, [pc, #252]	; (8007264 <xTaskIncrementTick+0x154>)
 8007168:	6013      	str	r3, [r2, #0]
 800716a:	4a3f      	ldr	r2, [pc, #252]	; (8007268 <xTaskIncrementTick+0x158>)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6013      	str	r3, [r2, #0]
 8007170:	4b3e      	ldr	r3, [pc, #248]	; (800726c <xTaskIncrementTick+0x15c>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	3301      	adds	r3, #1
 8007176:	4a3d      	ldr	r2, [pc, #244]	; (800726c <xTaskIncrementTick+0x15c>)
 8007178:	6013      	str	r3, [r2, #0]
 800717a:	f000 fadf 	bl	800773c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800717e:	4b3c      	ldr	r3, [pc, #240]	; (8007270 <xTaskIncrementTick+0x160>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	429a      	cmp	r2, r3
 8007186:	d349      	bcc.n	800721c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007188:	4b36      	ldr	r3, [pc, #216]	; (8007264 <xTaskIncrementTick+0x154>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d104      	bne.n	800719c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007192:	4b37      	ldr	r3, [pc, #220]	; (8007270 <xTaskIncrementTick+0x160>)
 8007194:	f04f 32ff 	mov.w	r2, #4294967295
 8007198:	601a      	str	r2, [r3, #0]
					break;
 800719a:	e03f      	b.n	800721c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800719c:	4b31      	ldr	r3, [pc, #196]	; (8007264 <xTaskIncrementTick+0x154>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d203      	bcs.n	80071bc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071b4:	4a2e      	ldr	r2, [pc, #184]	; (8007270 <xTaskIncrementTick+0x160>)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071ba:	e02f      	b.n	800721c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	3304      	adds	r3, #4
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fe ff69 	bl	8006098 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d004      	beq.n	80071d8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	3318      	adds	r3, #24
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fe ff60 	bl	8006098 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071dc:	4b25      	ldr	r3, [pc, #148]	; (8007274 <xTaskIncrementTick+0x164>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d903      	bls.n	80071ec <xTaskIncrementTick+0xdc>
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e8:	4a22      	ldr	r2, [pc, #136]	; (8007274 <xTaskIncrementTick+0x164>)
 80071ea:	6013      	str	r3, [r2, #0]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f0:	4613      	mov	r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4a1f      	ldr	r2, [pc, #124]	; (8007278 <xTaskIncrementTick+0x168>)
 80071fa:	441a      	add	r2, r3
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	3304      	adds	r3, #4
 8007200:	4619      	mov	r1, r3
 8007202:	4610      	mov	r0, r2
 8007204:	f7fe feeb 	bl	8005fde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800720c:	4b1b      	ldr	r3, [pc, #108]	; (800727c <xTaskIncrementTick+0x16c>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007212:	429a      	cmp	r2, r3
 8007214:	d3b8      	bcc.n	8007188 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007216:	2301      	movs	r3, #1
 8007218:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800721a:	e7b5      	b.n	8007188 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800721c:	4b17      	ldr	r3, [pc, #92]	; (800727c <xTaskIncrementTick+0x16c>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007222:	4915      	ldr	r1, [pc, #84]	; (8007278 <xTaskIncrementTick+0x168>)
 8007224:	4613      	mov	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	440b      	add	r3, r1
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d907      	bls.n	8007244 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8007234:	2301      	movs	r3, #1
 8007236:	617b      	str	r3, [r7, #20]
 8007238:	e004      	b.n	8007244 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800723a:	4b11      	ldr	r3, [pc, #68]	; (8007280 <xTaskIncrementTick+0x170>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3301      	adds	r3, #1
 8007240:	4a0f      	ldr	r2, [pc, #60]	; (8007280 <xTaskIncrementTick+0x170>)
 8007242:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007244:	4b0f      	ldr	r3, [pc, #60]	; (8007284 <xTaskIncrementTick+0x174>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800724c:	2301      	movs	r3, #1
 800724e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007250:	697b      	ldr	r3, [r7, #20]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3718      	adds	r7, #24
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20000d64 	.word	0x20000d64
 8007260:	20000d40 	.word	0x20000d40
 8007264:	20000cf4 	.word	0x20000cf4
 8007268:	20000cf8 	.word	0x20000cf8
 800726c:	20000d54 	.word	0x20000d54
 8007270:	20000d5c 	.word	0x20000d5c
 8007274:	20000d44 	.word	0x20000d44
 8007278:	2000086c 	.word	0x2000086c
 800727c:	20000868 	.word	0x20000868
 8007280:	20000d4c 	.word	0x20000d4c
 8007284:	20000d50 	.word	0x20000d50

08007288 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800728e:	4b29      	ldr	r3, [pc, #164]	; (8007334 <vTaskSwitchContext+0xac>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d003      	beq.n	800729e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007296:	4b28      	ldr	r3, [pc, #160]	; (8007338 <vTaskSwitchContext+0xb0>)
 8007298:	2201      	movs	r2, #1
 800729a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800729c:	e043      	b.n	8007326 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800729e:	4b26      	ldr	r3, [pc, #152]	; (8007338 <vTaskSwitchContext+0xb0>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072a4:	4b25      	ldr	r3, [pc, #148]	; (800733c <vTaskSwitchContext+0xb4>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	60fb      	str	r3, [r7, #12]
 80072aa:	e012      	b.n	80072d2 <vTaskSwitchContext+0x4a>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10c      	bne.n	80072cc <vTaskSwitchContext+0x44>
	__asm volatile
 80072b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b6:	b672      	cpsid	i
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	b662      	cpsie	i
 80072c6:	607b      	str	r3, [r7, #4]
}
 80072c8:	bf00      	nop
 80072ca:	e7fe      	b.n	80072ca <vTaskSwitchContext+0x42>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	491b      	ldr	r1, [pc, #108]	; (8007340 <vTaskSwitchContext+0xb8>)
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	4613      	mov	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	440b      	add	r3, r1
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d0e2      	beq.n	80072ac <vTaskSwitchContext+0x24>
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	4613      	mov	r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4a13      	ldr	r2, [pc, #76]	; (8007340 <vTaskSwitchContext+0xb8>)
 80072f2:	4413      	add	r3, r2
 80072f4:	60bb      	str	r3, [r7, #8]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	605a      	str	r2, [r3, #4]
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	3308      	adds	r3, #8
 8007308:	429a      	cmp	r2, r3
 800730a:	d104      	bne.n	8007316 <vTaskSwitchContext+0x8e>
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	605a      	str	r2, [r3, #4]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	4a09      	ldr	r2, [pc, #36]	; (8007344 <vTaskSwitchContext+0xbc>)
 800731e:	6013      	str	r3, [r2, #0]
 8007320:	4a06      	ldr	r2, [pc, #24]	; (800733c <vTaskSwitchContext+0xb4>)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6013      	str	r3, [r2, #0]
}
 8007326:	bf00      	nop
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	20000d64 	.word	0x20000d64
 8007338:	20000d50 	.word	0x20000d50
 800733c:	20000d44 	.word	0x20000d44
 8007340:	2000086c 	.word	0x2000086c
 8007344:	20000868 	.word	0x20000868

08007348 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10c      	bne.n	8007372 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735c:	b672      	cpsid	i
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	b662      	cpsie	i
 800736c:	60fb      	str	r3, [r7, #12]
}
 800736e:	bf00      	nop
 8007370:	e7fe      	b.n	8007370 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007372:	4b07      	ldr	r3, [pc, #28]	; (8007390 <vTaskPlaceOnEventList+0x48>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3318      	adds	r3, #24
 8007378:	4619      	mov	r1, r3
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7fe fe53 	bl	8006026 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007380:	2101      	movs	r1, #1
 8007382:	6838      	ldr	r0, [r7, #0]
 8007384:	f000 fa8a 	bl	800789c <prvAddCurrentTaskToDelayedList>
}
 8007388:	bf00      	nop
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	20000868 	.word	0x20000868

08007394 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10c      	bne.n	80073c0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80073a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073aa:	b672      	cpsid	i
 80073ac:	f383 8811 	msr	BASEPRI, r3
 80073b0:	f3bf 8f6f 	isb	sy
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	b662      	cpsie	i
 80073ba:	617b      	str	r3, [r7, #20]
}
 80073bc:	bf00      	nop
 80073be:	e7fe      	b.n	80073be <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073c0:	4b0a      	ldr	r3, [pc, #40]	; (80073ec <vTaskPlaceOnEventListRestricted+0x58>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3318      	adds	r3, #24
 80073c6:	4619      	mov	r1, r3
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f7fe fe08 	bl	8005fde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d002      	beq.n	80073da <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80073d4:	f04f 33ff 	mov.w	r3, #4294967295
 80073d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073da:	6879      	ldr	r1, [r7, #4]
 80073dc:	68b8      	ldr	r0, [r7, #8]
 80073de:	f000 fa5d 	bl	800789c <prvAddCurrentTaskToDelayedList>
	}
 80073e2:	bf00      	nop
 80073e4:	3718      	adds	r7, #24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	20000868 	.word	0x20000868

080073f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10c      	bne.n	8007420 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740a:	b672      	cpsid	i
 800740c:	f383 8811 	msr	BASEPRI, r3
 8007410:	f3bf 8f6f 	isb	sy
 8007414:	f3bf 8f4f 	dsb	sy
 8007418:	b662      	cpsie	i
 800741a:	60fb      	str	r3, [r7, #12]
}
 800741c:	bf00      	nop
 800741e:	e7fe      	b.n	800741e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	3318      	adds	r3, #24
 8007424:	4618      	mov	r0, r3
 8007426:	f7fe fe37 	bl	8006098 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800742a:	4b1e      	ldr	r3, [pc, #120]	; (80074a4 <xTaskRemoveFromEventList+0xb4>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d11d      	bne.n	800746e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	3304      	adds	r3, #4
 8007436:	4618      	mov	r0, r3
 8007438:	f7fe fe2e 	bl	8006098 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007440:	4b19      	ldr	r3, [pc, #100]	; (80074a8 <xTaskRemoveFromEventList+0xb8>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	429a      	cmp	r2, r3
 8007446:	d903      	bls.n	8007450 <xTaskRemoveFromEventList+0x60>
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744c:	4a16      	ldr	r2, [pc, #88]	; (80074a8 <xTaskRemoveFromEventList+0xb8>)
 800744e:	6013      	str	r3, [r2, #0]
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007454:	4613      	mov	r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4413      	add	r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4a13      	ldr	r2, [pc, #76]	; (80074ac <xTaskRemoveFromEventList+0xbc>)
 800745e:	441a      	add	r2, r3
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	3304      	adds	r3, #4
 8007464:	4619      	mov	r1, r3
 8007466:	4610      	mov	r0, r2
 8007468:	f7fe fdb9 	bl	8005fde <vListInsertEnd>
 800746c:	e005      	b.n	800747a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	3318      	adds	r3, #24
 8007472:	4619      	mov	r1, r3
 8007474:	480e      	ldr	r0, [pc, #56]	; (80074b0 <xTaskRemoveFromEventList+0xc0>)
 8007476:	f7fe fdb2 	bl	8005fde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747e:	4b0d      	ldr	r3, [pc, #52]	; (80074b4 <xTaskRemoveFromEventList+0xc4>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007484:	429a      	cmp	r2, r3
 8007486:	d905      	bls.n	8007494 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007488:	2301      	movs	r3, #1
 800748a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800748c:	4b0a      	ldr	r3, [pc, #40]	; (80074b8 <xTaskRemoveFromEventList+0xc8>)
 800748e:	2201      	movs	r2, #1
 8007490:	601a      	str	r2, [r3, #0]
 8007492:	e001      	b.n	8007498 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8007494:	2300      	movs	r3, #0
 8007496:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007498:	697b      	ldr	r3, [r7, #20]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	20000d64 	.word	0x20000d64
 80074a8:	20000d44 	.word	0x20000d44
 80074ac:	2000086c 	.word	0x2000086c
 80074b0:	20000cfc 	.word	0x20000cfc
 80074b4:	20000868 	.word	0x20000868
 80074b8:	20000d50 	.word	0x20000d50

080074bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074c4:	4b06      	ldr	r3, [pc, #24]	; (80074e0 <vTaskInternalSetTimeOutState+0x24>)
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074cc:	4b05      	ldr	r3, [pc, #20]	; (80074e4 <vTaskInternalSetTimeOutState+0x28>)
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	605a      	str	r2, [r3, #4]
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	20000d54 	.word	0x20000d54
 80074e4:	20000d40 	.word	0x20000d40

080074e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10c      	bne.n	8007512 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80074f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fc:	b672      	cpsid	i
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	b662      	cpsie	i
 800750c:	613b      	str	r3, [r7, #16]
}
 800750e:	bf00      	nop
 8007510:	e7fe      	b.n	8007510 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10c      	bne.n	8007532 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751c:	b672      	cpsid	i
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	b662      	cpsie	i
 800752c:	60fb      	str	r3, [r7, #12]
}
 800752e:	bf00      	nop
 8007530:	e7fe      	b.n	8007530 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007532:	f000 fe73 	bl	800821c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007536:	4b1d      	ldr	r3, [pc, #116]	; (80075ac <xTaskCheckForTimeOut+0xc4>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754e:	d102      	bne.n	8007556 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007550:	2300      	movs	r3, #0
 8007552:	61fb      	str	r3, [r7, #28]
 8007554:	e023      	b.n	800759e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	4b15      	ldr	r3, [pc, #84]	; (80075b0 <xTaskCheckForTimeOut+0xc8>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	429a      	cmp	r2, r3
 8007560:	d007      	beq.n	8007572 <xTaskCheckForTimeOut+0x8a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	69ba      	ldr	r2, [r7, #24]
 8007568:	429a      	cmp	r2, r3
 800756a:	d302      	bcc.n	8007572 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800756c:	2301      	movs	r3, #1
 800756e:	61fb      	str	r3, [r7, #28]
 8007570:	e015      	b.n	800759e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	429a      	cmp	r2, r3
 800757a:	d20b      	bcs.n	8007594 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	1ad2      	subs	r2, r2, r3
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7ff ff97 	bl	80074bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800758e:	2300      	movs	r3, #0
 8007590:	61fb      	str	r3, [r7, #28]
 8007592:	e004      	b.n	800759e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	2200      	movs	r2, #0
 8007598:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800759a:	2301      	movs	r3, #1
 800759c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800759e:	f000 fe71 	bl	8008284 <vPortExitCritical>

	return xReturn;
 80075a2:	69fb      	ldr	r3, [r7, #28]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3720      	adds	r7, #32
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	20000d40 	.word	0x20000d40
 80075b0:	20000d54 	.word	0x20000d54

080075b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80075b4:	b480      	push	{r7}
 80075b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80075b8:	4b03      	ldr	r3, [pc, #12]	; (80075c8 <vTaskMissedYield+0x14>)
 80075ba:	2201      	movs	r2, #1
 80075bc:	601a      	str	r2, [r3, #0]
}
 80075be:	bf00      	nop
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr
 80075c8:	20000d50 	.word	0x20000d50

080075cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075d4:	f000 f852 	bl	800767c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80075d8:	4b06      	ldr	r3, [pc, #24]	; (80075f4 <prvIdleTask+0x28>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d9f9      	bls.n	80075d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80075e0:	4b05      	ldr	r3, [pc, #20]	; (80075f8 <prvIdleTask+0x2c>)
 80075e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80075f0:	e7f0      	b.n	80075d4 <prvIdleTask+0x8>
 80075f2:	bf00      	nop
 80075f4:	2000086c 	.word	0x2000086c
 80075f8:	e000ed04 	.word	0xe000ed04

080075fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007602:	2300      	movs	r3, #0
 8007604:	607b      	str	r3, [r7, #4]
 8007606:	e00c      	b.n	8007622 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	4613      	mov	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4413      	add	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4a12      	ldr	r2, [pc, #72]	; (800765c <prvInitialiseTaskLists+0x60>)
 8007614:	4413      	add	r3, r2
 8007616:	4618      	mov	r0, r3
 8007618:	f7fe fcb4 	bl	8005f84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	3301      	adds	r3, #1
 8007620:	607b      	str	r3, [r7, #4]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2b37      	cmp	r3, #55	; 0x37
 8007626:	d9ef      	bls.n	8007608 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007628:	480d      	ldr	r0, [pc, #52]	; (8007660 <prvInitialiseTaskLists+0x64>)
 800762a:	f7fe fcab 	bl	8005f84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800762e:	480d      	ldr	r0, [pc, #52]	; (8007664 <prvInitialiseTaskLists+0x68>)
 8007630:	f7fe fca8 	bl	8005f84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007634:	480c      	ldr	r0, [pc, #48]	; (8007668 <prvInitialiseTaskLists+0x6c>)
 8007636:	f7fe fca5 	bl	8005f84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800763a:	480c      	ldr	r0, [pc, #48]	; (800766c <prvInitialiseTaskLists+0x70>)
 800763c:	f7fe fca2 	bl	8005f84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007640:	480b      	ldr	r0, [pc, #44]	; (8007670 <prvInitialiseTaskLists+0x74>)
 8007642:	f7fe fc9f 	bl	8005f84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007646:	4b0b      	ldr	r3, [pc, #44]	; (8007674 <prvInitialiseTaskLists+0x78>)
 8007648:	4a05      	ldr	r2, [pc, #20]	; (8007660 <prvInitialiseTaskLists+0x64>)
 800764a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800764c:	4b0a      	ldr	r3, [pc, #40]	; (8007678 <prvInitialiseTaskLists+0x7c>)
 800764e:	4a05      	ldr	r2, [pc, #20]	; (8007664 <prvInitialiseTaskLists+0x68>)
 8007650:	601a      	str	r2, [r3, #0]
}
 8007652:	bf00      	nop
 8007654:	3708      	adds	r7, #8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	2000086c 	.word	0x2000086c
 8007660:	20000ccc 	.word	0x20000ccc
 8007664:	20000ce0 	.word	0x20000ce0
 8007668:	20000cfc 	.word	0x20000cfc
 800766c:	20000d10 	.word	0x20000d10
 8007670:	20000d28 	.word	0x20000d28
 8007674:	20000cf4 	.word	0x20000cf4
 8007678:	20000cf8 	.word	0x20000cf8

0800767c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007682:	e019      	b.n	80076b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007684:	f000 fdca 	bl	800821c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007688:	4b10      	ldr	r3, [pc, #64]	; (80076cc <prvCheckTasksWaitingTermination+0x50>)
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3304      	adds	r3, #4
 8007694:	4618      	mov	r0, r3
 8007696:	f7fe fcff 	bl	8006098 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800769a:	4b0d      	ldr	r3, [pc, #52]	; (80076d0 <prvCheckTasksWaitingTermination+0x54>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	3b01      	subs	r3, #1
 80076a0:	4a0b      	ldr	r2, [pc, #44]	; (80076d0 <prvCheckTasksWaitingTermination+0x54>)
 80076a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80076a4:	4b0b      	ldr	r3, [pc, #44]	; (80076d4 <prvCheckTasksWaitingTermination+0x58>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3b01      	subs	r3, #1
 80076aa:	4a0a      	ldr	r2, [pc, #40]	; (80076d4 <prvCheckTasksWaitingTermination+0x58>)
 80076ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80076ae:	f000 fde9 	bl	8008284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f810 	bl	80076d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076b8:	4b06      	ldr	r3, [pc, #24]	; (80076d4 <prvCheckTasksWaitingTermination+0x58>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1e1      	bne.n	8007684 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076c0:	bf00      	nop
 80076c2:	bf00      	nop
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	20000d10 	.word	0x20000d10
 80076d0:	20000d3c 	.word	0x20000d3c
 80076d4:	20000d24 	.word	0x20000d24

080076d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d108      	bne.n	80076fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 ff8a 	bl	8008608 <vPortFree>
				vPortFree( pxTCB );
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 ff87 	bl	8008608 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076fa:	e01a      	b.n	8007732 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007702:	2b01      	cmp	r3, #1
 8007704:	d103      	bne.n	800770e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 ff7e 	bl	8008608 <vPortFree>
	}
 800770c:	e011      	b.n	8007732 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007714:	2b02      	cmp	r3, #2
 8007716:	d00c      	beq.n	8007732 <prvDeleteTCB+0x5a>
	__asm volatile
 8007718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771c:	b672      	cpsid	i
 800771e:	f383 8811 	msr	BASEPRI, r3
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	b662      	cpsie	i
 800772c:	60fb      	str	r3, [r7, #12]
}
 800772e:	bf00      	nop
 8007730:	e7fe      	b.n	8007730 <prvDeleteTCB+0x58>
	}
 8007732:	bf00      	nop
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
	...

0800773c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007742:	4b0c      	ldr	r3, [pc, #48]	; (8007774 <prvResetNextTaskUnblockTime+0x38>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d104      	bne.n	8007756 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800774c:	4b0a      	ldr	r3, [pc, #40]	; (8007778 <prvResetNextTaskUnblockTime+0x3c>)
 800774e:	f04f 32ff 	mov.w	r2, #4294967295
 8007752:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007754:	e008      	b.n	8007768 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007756:	4b07      	ldr	r3, [pc, #28]	; (8007774 <prvResetNextTaskUnblockTime+0x38>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	4a04      	ldr	r2, [pc, #16]	; (8007778 <prvResetNextTaskUnblockTime+0x3c>)
 8007766:	6013      	str	r3, [r2, #0]
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	20000cf4 	.word	0x20000cf4
 8007778:	20000d5c 	.word	0x20000d5c

0800777c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007782:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <xTaskGetSchedulerState+0x34>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d102      	bne.n	8007790 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800778a:	2301      	movs	r3, #1
 800778c:	607b      	str	r3, [r7, #4]
 800778e:	e008      	b.n	80077a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007790:	4b08      	ldr	r3, [pc, #32]	; (80077b4 <xTaskGetSchedulerState+0x38>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d102      	bne.n	800779e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007798:	2302      	movs	r3, #2
 800779a:	607b      	str	r3, [r7, #4]
 800779c:	e001      	b.n	80077a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800779e:	2300      	movs	r3, #0
 80077a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80077a2:	687b      	ldr	r3, [r7, #4]
	}
 80077a4:	4618      	mov	r0, r3
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	20000d48 	.word	0x20000d48
 80077b4:	20000d64 	.word	0x20000d64

080077b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80077c4:	2300      	movs	r3, #0
 80077c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d05a      	beq.n	8007884 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077ce:	4b30      	ldr	r3, [pc, #192]	; (8007890 <xTaskPriorityDisinherit+0xd8>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	693a      	ldr	r2, [r7, #16]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d00c      	beq.n	80077f2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80077d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077dc:	b672      	cpsid	i
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	b662      	cpsie	i
 80077ec:	60fb      	str	r3, [r7, #12]
}
 80077ee:	bf00      	nop
 80077f0:	e7fe      	b.n	80077f0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10c      	bne.n	8007814 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	b672      	cpsid	i
 8007800:	f383 8811 	msr	BASEPRI, r3
 8007804:	f3bf 8f6f 	isb	sy
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	b662      	cpsie	i
 800780e:	60bb      	str	r3, [r7, #8]
}
 8007810:	bf00      	nop
 8007812:	e7fe      	b.n	8007812 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007818:	1e5a      	subs	r2, r3, #1
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007826:	429a      	cmp	r2, r3
 8007828:	d02c      	beq.n	8007884 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800782e:	2b00      	cmp	r3, #0
 8007830:	d128      	bne.n	8007884 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	3304      	adds	r3, #4
 8007836:	4618      	mov	r0, r3
 8007838:	f7fe fc2e 	bl	8006098 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007848:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007854:	4b0f      	ldr	r3, [pc, #60]	; (8007894 <xTaskPriorityDisinherit+0xdc>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	429a      	cmp	r2, r3
 800785a:	d903      	bls.n	8007864 <xTaskPriorityDisinherit+0xac>
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007860:	4a0c      	ldr	r2, [pc, #48]	; (8007894 <xTaskPriorityDisinherit+0xdc>)
 8007862:	6013      	str	r3, [r2, #0]
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007868:	4613      	mov	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	4a09      	ldr	r2, [pc, #36]	; (8007898 <xTaskPriorityDisinherit+0xe0>)
 8007872:	441a      	add	r2, r3
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	3304      	adds	r3, #4
 8007878:	4619      	mov	r1, r3
 800787a:	4610      	mov	r0, r2
 800787c:	f7fe fbaf 	bl	8005fde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007880:	2301      	movs	r3, #1
 8007882:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007884:	697b      	ldr	r3, [r7, #20]
	}
 8007886:	4618      	mov	r0, r3
 8007888:	3718      	adds	r7, #24
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20000868 	.word	0x20000868
 8007894:	20000d44 	.word	0x20000d44
 8007898:	2000086c 	.word	0x2000086c

0800789c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80078a6:	4b21      	ldr	r3, [pc, #132]	; (800792c <prvAddCurrentTaskToDelayedList+0x90>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078ac:	4b20      	ldr	r3, [pc, #128]	; (8007930 <prvAddCurrentTaskToDelayedList+0x94>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	3304      	adds	r3, #4
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fe fbf0 	bl	8006098 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078be:	d10a      	bne.n	80078d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d007      	beq.n	80078d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078c6:	4b1a      	ldr	r3, [pc, #104]	; (8007930 <prvAddCurrentTaskToDelayedList+0x94>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	3304      	adds	r3, #4
 80078cc:	4619      	mov	r1, r3
 80078ce:	4819      	ldr	r0, [pc, #100]	; (8007934 <prvAddCurrentTaskToDelayedList+0x98>)
 80078d0:	f7fe fb85 	bl	8005fde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80078d4:	e026      	b.n	8007924 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4413      	add	r3, r2
 80078dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80078de:	4b14      	ldr	r3, [pc, #80]	; (8007930 <prvAddCurrentTaskToDelayedList+0x94>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d209      	bcs.n	8007902 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078ee:	4b12      	ldr	r3, [pc, #72]	; (8007938 <prvAddCurrentTaskToDelayedList+0x9c>)
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	4b0f      	ldr	r3, [pc, #60]	; (8007930 <prvAddCurrentTaskToDelayedList+0x94>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	3304      	adds	r3, #4
 80078f8:	4619      	mov	r1, r3
 80078fa:	4610      	mov	r0, r2
 80078fc:	f7fe fb93 	bl	8006026 <vListInsert>
}
 8007900:	e010      	b.n	8007924 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007902:	4b0e      	ldr	r3, [pc, #56]	; (800793c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	4b0a      	ldr	r3, [pc, #40]	; (8007930 <prvAddCurrentTaskToDelayedList+0x94>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3304      	adds	r3, #4
 800790c:	4619      	mov	r1, r3
 800790e:	4610      	mov	r0, r2
 8007910:	f7fe fb89 	bl	8006026 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007914:	4b0a      	ldr	r3, [pc, #40]	; (8007940 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	429a      	cmp	r2, r3
 800791c:	d202      	bcs.n	8007924 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800791e:	4a08      	ldr	r2, [pc, #32]	; (8007940 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	6013      	str	r3, [r2, #0]
}
 8007924:	bf00      	nop
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	20000d40 	.word	0x20000d40
 8007930:	20000868 	.word	0x20000868
 8007934:	20000d28 	.word	0x20000d28
 8007938:	20000cf8 	.word	0x20000cf8
 800793c:	20000cf4 	.word	0x20000cf4
 8007940:	20000d5c 	.word	0x20000d5c

08007944 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b08a      	sub	sp, #40	; 0x28
 8007948:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800794a:	2300      	movs	r3, #0
 800794c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800794e:	f000 fb15 	bl	8007f7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007952:	4b1d      	ldr	r3, [pc, #116]	; (80079c8 <xTimerCreateTimerTask+0x84>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d021      	beq.n	800799e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800795a:	2300      	movs	r3, #0
 800795c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800795e:	2300      	movs	r3, #0
 8007960:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007962:	1d3a      	adds	r2, r7, #4
 8007964:	f107 0108 	add.w	r1, r7, #8
 8007968:	f107 030c 	add.w	r3, r7, #12
 800796c:	4618      	mov	r0, r3
 800796e:	f7fe faef 	bl	8005f50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007972:	6879      	ldr	r1, [r7, #4]
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	9202      	str	r2, [sp, #8]
 800797a:	9301      	str	r3, [sp, #4]
 800797c:	2302      	movs	r3, #2
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	2300      	movs	r3, #0
 8007982:	460a      	mov	r2, r1
 8007984:	4911      	ldr	r1, [pc, #68]	; (80079cc <xTimerCreateTimerTask+0x88>)
 8007986:	4812      	ldr	r0, [pc, #72]	; (80079d0 <xTimerCreateTimerTask+0x8c>)
 8007988:	f7ff f8ba 	bl	8006b00 <xTaskCreateStatic>
 800798c:	4603      	mov	r3, r0
 800798e:	4a11      	ldr	r2, [pc, #68]	; (80079d4 <xTimerCreateTimerTask+0x90>)
 8007990:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007992:	4b10      	ldr	r3, [pc, #64]	; (80079d4 <xTimerCreateTimerTask+0x90>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d001      	beq.n	800799e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800799a:	2301      	movs	r3, #1
 800799c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10c      	bne.n	80079be <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80079a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a8:	b672      	cpsid	i
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	b662      	cpsie	i
 80079b8:	613b      	str	r3, [r7, #16]
}
 80079ba:	bf00      	nop
 80079bc:	e7fe      	b.n	80079bc <xTimerCreateTimerTask+0x78>
	return xReturn;
 80079be:	697b      	ldr	r3, [r7, #20]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3718      	adds	r7, #24
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	20000d98 	.word	0x20000d98
 80079cc:	0800890c 	.word	0x0800890c
 80079d0:	08007b15 	.word	0x08007b15
 80079d4:	20000d9c 	.word	0x20000d9c

080079d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b08a      	sub	sp, #40	; 0x28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
 80079e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80079e6:	2300      	movs	r3, #0
 80079e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10c      	bne.n	8007a0a <xTimerGenericCommand+0x32>
	__asm volatile
 80079f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f4:	b672      	cpsid	i
 80079f6:	f383 8811 	msr	BASEPRI, r3
 80079fa:	f3bf 8f6f 	isb	sy
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	b662      	cpsie	i
 8007a04:	623b      	str	r3, [r7, #32]
}
 8007a06:	bf00      	nop
 8007a08:	e7fe      	b.n	8007a08 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007a0a:	4b1a      	ldr	r3, [pc, #104]	; (8007a74 <xTimerGenericCommand+0x9c>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d02a      	beq.n	8007a68 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	2b05      	cmp	r3, #5
 8007a22:	dc18      	bgt.n	8007a56 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007a24:	f7ff feaa 	bl	800777c <xTaskGetSchedulerState>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d109      	bne.n	8007a42 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a2e:	4b11      	ldr	r3, [pc, #68]	; (8007a74 <xTimerGenericCommand+0x9c>)
 8007a30:	6818      	ldr	r0, [r3, #0]
 8007a32:	f107 0110 	add.w	r1, r7, #16
 8007a36:	2300      	movs	r3, #0
 8007a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a3a:	f7fe fc67 	bl	800630c <xQueueGenericSend>
 8007a3e:	6278      	str	r0, [r7, #36]	; 0x24
 8007a40:	e012      	b.n	8007a68 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a42:	4b0c      	ldr	r3, [pc, #48]	; (8007a74 <xTimerGenericCommand+0x9c>)
 8007a44:	6818      	ldr	r0, [r3, #0]
 8007a46:	f107 0110 	add.w	r1, r7, #16
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f7fe fc5d 	bl	800630c <xQueueGenericSend>
 8007a52:	6278      	str	r0, [r7, #36]	; 0x24
 8007a54:	e008      	b.n	8007a68 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a56:	4b07      	ldr	r3, [pc, #28]	; (8007a74 <xTimerGenericCommand+0x9c>)
 8007a58:	6818      	ldr	r0, [r3, #0]
 8007a5a:	f107 0110 	add.w	r1, r7, #16
 8007a5e:	2300      	movs	r3, #0
 8007a60:	683a      	ldr	r2, [r7, #0]
 8007a62:	f7fe fd59 	bl	8006518 <xQueueGenericSendFromISR>
 8007a66:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3728      	adds	r7, #40	; 0x28
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	20000d98 	.word	0x20000d98

08007a78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b088      	sub	sp, #32
 8007a7c:	af02      	add	r7, sp, #8
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a82:	4b23      	ldr	r3, [pc, #140]	; (8007b10 <prvProcessExpiredTimer+0x98>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	3304      	adds	r3, #4
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7fe fb01 	bl	8006098 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a9c:	f003 0304 	and.w	r3, r3, #4
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d024      	beq.n	8007aee <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	699a      	ldr	r2, [r3, #24]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	18d1      	adds	r1, r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	6978      	ldr	r0, [r7, #20]
 8007ab2:	f000 f8d3 	bl	8007c5c <prvInsertTimerInActiveList>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d021      	beq.n	8007b00 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007abc:	2300      	movs	r3, #0
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	6978      	ldr	r0, [r7, #20]
 8007ac8:	f7ff ff86 	bl	80079d8 <xTimerGenericCommand>
 8007acc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d115      	bne.n	8007b00 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8007ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad8:	b672      	cpsid	i
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	b662      	cpsie	i
 8007ae8:	60fb      	str	r3, [r7, #12]
}
 8007aea:	bf00      	nop
 8007aec:	e7fe      	b.n	8007aec <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007af4:	f023 0301 	bic.w	r3, r3, #1
 8007af8:	b2da      	uxtb	r2, r3
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	6a1b      	ldr	r3, [r3, #32]
 8007b04:	6978      	ldr	r0, [r7, #20]
 8007b06:	4798      	blx	r3
}
 8007b08:	bf00      	nop
 8007b0a:	3718      	adds	r7, #24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	20000d90 	.word	0x20000d90

08007b14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b1c:	f107 0308 	add.w	r3, r7, #8
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 f857 	bl	8007bd4 <prvGetNextExpireTime>
 8007b26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f000 f803 	bl	8007b38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007b32:	f000 f8d5 	bl	8007ce0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b36:	e7f1      	b.n	8007b1c <prvTimerTask+0x8>

08007b38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b42:	f7ff fa27 	bl	8006f94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b46:	f107 0308 	add.w	r3, r7, #8
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f000 f866 	bl	8007c1c <prvSampleTimeNow>
 8007b50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d130      	bne.n	8007bba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10a      	bne.n	8007b74 <prvProcessTimerOrBlockTask+0x3c>
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d806      	bhi.n	8007b74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b66:	f7ff fa23 	bl	8006fb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b6a:	68f9      	ldr	r1, [r7, #12]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f7ff ff83 	bl	8007a78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b72:	e024      	b.n	8007bbe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d008      	beq.n	8007b8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b7a:	4b13      	ldr	r3, [pc, #76]	; (8007bc8 <prvProcessTimerOrBlockTask+0x90>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d101      	bne.n	8007b88 <prvProcessTimerOrBlockTask+0x50>
 8007b84:	2301      	movs	r3, #1
 8007b86:	e000      	b.n	8007b8a <prvProcessTimerOrBlockTask+0x52>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b8c:	4b0f      	ldr	r3, [pc, #60]	; (8007bcc <prvProcessTimerOrBlockTask+0x94>)
 8007b8e:	6818      	ldr	r0, [r3, #0]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	683a      	ldr	r2, [r7, #0]
 8007b98:	4619      	mov	r1, r3
 8007b9a:	f7fe ff7d 	bl	8006a98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b9e:	f7ff fa07 	bl	8006fb0 <xTaskResumeAll>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10a      	bne.n	8007bbe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ba8:	4b09      	ldr	r3, [pc, #36]	; (8007bd0 <prvProcessTimerOrBlockTask+0x98>)
 8007baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bae:	601a      	str	r2, [r3, #0]
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	f3bf 8f6f 	isb	sy
}
 8007bb8:	e001      	b.n	8007bbe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007bba:	f7ff f9f9 	bl	8006fb0 <xTaskResumeAll>
}
 8007bbe:	bf00      	nop
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20000d94 	.word	0x20000d94
 8007bcc:	20000d98 	.word	0x20000d98
 8007bd0:	e000ed04 	.word	0xe000ed04

08007bd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007bdc:	4b0e      	ldr	r3, [pc, #56]	; (8007c18 <prvGetNextExpireTime+0x44>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <prvGetNextExpireTime+0x16>
 8007be6:	2201      	movs	r2, #1
 8007be8:	e000      	b.n	8007bec <prvGetNextExpireTime+0x18>
 8007bea:	2200      	movs	r2, #0
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d105      	bne.n	8007c04 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bf8:	4b07      	ldr	r3, [pc, #28]	; (8007c18 <prvGetNextExpireTime+0x44>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	60fb      	str	r3, [r7, #12]
 8007c02:	e001      	b.n	8007c08 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007c04:	2300      	movs	r3, #0
 8007c06:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007c08:	68fb      	ldr	r3, [r7, #12]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	20000d90 	.word	0x20000d90

08007c1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007c24:	f7ff fa64 	bl	80070f0 <xTaskGetTickCount>
 8007c28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007c2a:	4b0b      	ldr	r3, [pc, #44]	; (8007c58 <prvSampleTimeNow+0x3c>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d205      	bcs.n	8007c40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007c34:	f000 f93c 	bl	8007eb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	e002      	b.n	8007c46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007c46:	4a04      	ldr	r2, [pc, #16]	; (8007c58 <prvSampleTimeNow+0x3c>)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	20000da0 	.word	0x20000da0

08007c5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b086      	sub	sp, #24
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
 8007c68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d812      	bhi.n	8007ca8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	1ad2      	subs	r2, r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d302      	bcc.n	8007c96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c90:	2301      	movs	r3, #1
 8007c92:	617b      	str	r3, [r7, #20]
 8007c94:	e01b      	b.n	8007cce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c96:	4b10      	ldr	r3, [pc, #64]	; (8007cd8 <prvInsertTimerInActiveList+0x7c>)
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	f7fe f9c0 	bl	8006026 <vListInsert>
 8007ca6:	e012      	b.n	8007cce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d206      	bcs.n	8007cbe <prvInsertTimerInActiveList+0x62>
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d302      	bcc.n	8007cbe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	617b      	str	r3, [r7, #20]
 8007cbc:	e007      	b.n	8007cce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007cbe:	4b07      	ldr	r3, [pc, #28]	; (8007cdc <prvInsertTimerInActiveList+0x80>)
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	4610      	mov	r0, r2
 8007cca:	f7fe f9ac 	bl	8006026 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007cce:	697b      	ldr	r3, [r7, #20]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3718      	adds	r7, #24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	20000d94 	.word	0x20000d94
 8007cdc:	20000d90 	.word	0x20000d90

08007ce0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b08e      	sub	sp, #56	; 0x38
 8007ce4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ce6:	e0d0      	b.n	8007e8a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	da1a      	bge.n	8007d24 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007cee:	1d3b      	adds	r3, r7, #4
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d10c      	bne.n	8007d14 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8007cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfe:	b672      	cpsid	i
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	b662      	cpsie	i
 8007d0e:	61fb      	str	r3, [r7, #28]
}
 8007d10:	bf00      	nop
 8007d12:	e7fe      	b.n	8007d12 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d1a:	6850      	ldr	r0, [r2, #4]
 8007d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d1e:	6892      	ldr	r2, [r2, #8]
 8007d20:	4611      	mov	r1, r2
 8007d22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f2c0 80ae 	blt.w	8007e88 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d004      	beq.n	8007d42 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fe f9ab 	bl	8006098 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d42:	463b      	mov	r3, r7
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7ff ff69 	bl	8007c1c <prvSampleTimeNow>
 8007d4a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b09      	cmp	r3, #9
 8007d50:	f200 809b 	bhi.w	8007e8a <prvProcessReceivedCommands+0x1aa>
 8007d54:	a201      	add	r2, pc, #4	; (adr r2, 8007d5c <prvProcessReceivedCommands+0x7c>)
 8007d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5a:	bf00      	nop
 8007d5c:	08007d85 	.word	0x08007d85
 8007d60:	08007d85 	.word	0x08007d85
 8007d64:	08007d85 	.word	0x08007d85
 8007d68:	08007dfd 	.word	0x08007dfd
 8007d6c:	08007e11 	.word	0x08007e11
 8007d70:	08007e5f 	.word	0x08007e5f
 8007d74:	08007d85 	.word	0x08007d85
 8007d78:	08007d85 	.word	0x08007d85
 8007d7c:	08007dfd 	.word	0x08007dfd
 8007d80:	08007e11 	.word	0x08007e11
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d8a:	f043 0301 	orr.w	r3, r3, #1
 8007d8e:	b2da      	uxtb	r2, r3
 8007d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	18d1      	adds	r1, r2, r3
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007da2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007da4:	f7ff ff5a 	bl	8007c5c <prvInsertTimerInActiveList>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d06d      	beq.n	8007e8a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007db4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dbc:	f003 0304 	and.w	r3, r3, #4
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d062      	beq.n	8007e8a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	441a      	add	r2, r3
 8007dcc:	2300      	movs	r3, #0
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dd6:	f7ff fdff 	bl	80079d8 <xTimerGenericCommand>
 8007dda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d153      	bne.n	8007e8a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8007de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de6:	b672      	cpsid	i
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	b662      	cpsie	i
 8007df6:	61bb      	str	r3, [r7, #24]
}
 8007df8:	bf00      	nop
 8007dfa:	e7fe      	b.n	8007dfa <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e02:	f023 0301 	bic.w	r3, r3, #1
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007e0e:	e03c      	b.n	8007e8a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e16:	f043 0301 	orr.w	r3, r3, #1
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e26:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2a:	699b      	ldr	r3, [r3, #24]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10c      	bne.n	8007e4a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e34:	b672      	cpsid	i
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	b662      	cpsie	i
 8007e44:	617b      	str	r3, [r7, #20]
}
 8007e46:	bf00      	nop
 8007e48:	e7fe      	b.n	8007e48 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4c:	699a      	ldr	r2, [r3, #24]
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	18d1      	adds	r1, r2, r3
 8007e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e58:	f7ff ff00 	bl	8007c5c <prvInsertTimerInActiveList>
					break;
 8007e5c:	e015      	b.n	8007e8a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e64:	f003 0302 	and.w	r3, r3, #2
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d103      	bne.n	8007e74 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8007e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e6e:	f000 fbcb 	bl	8008608 <vPortFree>
 8007e72:	e00a      	b.n	8007e8a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e7a:	f023 0301 	bic.w	r3, r3, #1
 8007e7e:	b2da      	uxtb	r2, r3
 8007e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e86:	e000      	b.n	8007e8a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007e88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e8a:	4b08      	ldr	r3, [pc, #32]	; (8007eac <prvProcessReceivedCommands+0x1cc>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	1d39      	adds	r1, r7, #4
 8007e90:	2200      	movs	r2, #0
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7fe fbe0 	bl	8006658 <xQueueReceive>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f47f af24 	bne.w	8007ce8 <prvProcessReceivedCommands+0x8>
	}
}
 8007ea0:	bf00      	nop
 8007ea2:	bf00      	nop
 8007ea4:	3730      	adds	r7, #48	; 0x30
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	20000d98 	.word	0x20000d98

08007eb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b088      	sub	sp, #32
 8007eb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007eb6:	e04a      	b.n	8007f4e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007eb8:	4b2e      	ldr	r3, [pc, #184]	; (8007f74 <prvSwitchTimerLists+0xc4>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ec2:	4b2c      	ldr	r3, [pc, #176]	; (8007f74 <prvSwitchTimerLists+0xc4>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	3304      	adds	r3, #4
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fe f8e1 	bl	8006098 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ee4:	f003 0304 	and.w	r3, r3, #4
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d030      	beq.n	8007f4e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d90e      	bls.n	8007f1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f0a:	4b1a      	ldr	r3, [pc, #104]	; (8007f74 <prvSwitchTimerLists+0xc4>)
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	3304      	adds	r3, #4
 8007f12:	4619      	mov	r1, r3
 8007f14:	4610      	mov	r0, r2
 8007f16:	f7fe f886 	bl	8006026 <vListInsert>
 8007f1a:	e018      	b.n	8007f4e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	2300      	movs	r3, #0
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	2100      	movs	r1, #0
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f7ff fd56 	bl	80079d8 <xTimerGenericCommand>
 8007f2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10c      	bne.n	8007f4e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8007f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f38:	b672      	cpsid	i
 8007f3a:	f383 8811 	msr	BASEPRI, r3
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f3bf 8f4f 	dsb	sy
 8007f46:	b662      	cpsie	i
 8007f48:	603b      	str	r3, [r7, #0]
}
 8007f4a:	bf00      	nop
 8007f4c:	e7fe      	b.n	8007f4c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f4e:	4b09      	ldr	r3, [pc, #36]	; (8007f74 <prvSwitchTimerLists+0xc4>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1af      	bne.n	8007eb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007f58:	4b06      	ldr	r3, [pc, #24]	; (8007f74 <prvSwitchTimerLists+0xc4>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007f5e:	4b06      	ldr	r3, [pc, #24]	; (8007f78 <prvSwitchTimerLists+0xc8>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a04      	ldr	r2, [pc, #16]	; (8007f74 <prvSwitchTimerLists+0xc4>)
 8007f64:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007f66:	4a04      	ldr	r2, [pc, #16]	; (8007f78 <prvSwitchTimerLists+0xc8>)
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	6013      	str	r3, [r2, #0]
}
 8007f6c:	bf00      	nop
 8007f6e:	3718      	adds	r7, #24
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	20000d90 	.word	0x20000d90
 8007f78:	20000d94 	.word	0x20000d94

08007f7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007f82:	f000 f94b 	bl	800821c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007f86:	4b15      	ldr	r3, [pc, #84]	; (8007fdc <prvCheckForValidListAndQueue+0x60>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d120      	bne.n	8007fd0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f8e:	4814      	ldr	r0, [pc, #80]	; (8007fe0 <prvCheckForValidListAndQueue+0x64>)
 8007f90:	f7fd fff8 	bl	8005f84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007f94:	4813      	ldr	r0, [pc, #76]	; (8007fe4 <prvCheckForValidListAndQueue+0x68>)
 8007f96:	f7fd fff5 	bl	8005f84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007f9a:	4b13      	ldr	r3, [pc, #76]	; (8007fe8 <prvCheckForValidListAndQueue+0x6c>)
 8007f9c:	4a10      	ldr	r2, [pc, #64]	; (8007fe0 <prvCheckForValidListAndQueue+0x64>)
 8007f9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007fa0:	4b12      	ldr	r3, [pc, #72]	; (8007fec <prvCheckForValidListAndQueue+0x70>)
 8007fa2:	4a10      	ldr	r2, [pc, #64]	; (8007fe4 <prvCheckForValidListAndQueue+0x68>)
 8007fa4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	4b11      	ldr	r3, [pc, #68]	; (8007ff0 <prvCheckForValidListAndQueue+0x74>)
 8007fac:	4a11      	ldr	r2, [pc, #68]	; (8007ff4 <prvCheckForValidListAndQueue+0x78>)
 8007fae:	2110      	movs	r1, #16
 8007fb0:	200a      	movs	r0, #10
 8007fb2:	f7fe f905 	bl	80061c0 <xQueueGenericCreateStatic>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	4a08      	ldr	r2, [pc, #32]	; (8007fdc <prvCheckForValidListAndQueue+0x60>)
 8007fba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007fbc:	4b07      	ldr	r3, [pc, #28]	; (8007fdc <prvCheckForValidListAndQueue+0x60>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d005      	beq.n	8007fd0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007fc4:	4b05      	ldr	r3, [pc, #20]	; (8007fdc <prvCheckForValidListAndQueue+0x60>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	490b      	ldr	r1, [pc, #44]	; (8007ff8 <prvCheckForValidListAndQueue+0x7c>)
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fe fd3a 	bl	8006a44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007fd0:	f000 f958 	bl	8008284 <vPortExitCritical>
}
 8007fd4:	bf00      	nop
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	20000d98 	.word	0x20000d98
 8007fe0:	20000d68 	.word	0x20000d68
 8007fe4:	20000d7c 	.word	0x20000d7c
 8007fe8:	20000d90 	.word	0x20000d90
 8007fec:	20000d94 	.word	0x20000d94
 8007ff0:	20000e44 	.word	0x20000e44
 8007ff4:	20000da4 	.word	0x20000da4
 8007ff8:	08008914 	.word	0x08008914

08007ffc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	3b04      	subs	r3, #4
 800800c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008014:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	3b04      	subs	r3, #4
 800801a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	f023 0201 	bic.w	r2, r3, #1
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	3b04      	subs	r3, #4
 800802a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800802c:	4a0c      	ldr	r2, [pc, #48]	; (8008060 <pxPortInitialiseStack+0x64>)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	3b14      	subs	r3, #20
 8008036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	3b04      	subs	r3, #4
 8008042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f06f 0202 	mvn.w	r2, #2
 800804a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	3b20      	subs	r3, #32
 8008050:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008052:	68fb      	ldr	r3, [r7, #12]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	08008065 	.word	0x08008065

08008064 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800806a:	2300      	movs	r3, #0
 800806c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800806e:	4b14      	ldr	r3, [pc, #80]	; (80080c0 <prvTaskExitError+0x5c>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008076:	d00c      	beq.n	8008092 <prvTaskExitError+0x2e>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807c:	b672      	cpsid	i
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	b662      	cpsie	i
 800808c:	60fb      	str	r3, [r7, #12]
}
 800808e:	bf00      	nop
 8008090:	e7fe      	b.n	8008090 <prvTaskExitError+0x2c>
	__asm volatile
 8008092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008096:	b672      	cpsid	i
 8008098:	f383 8811 	msr	BASEPRI, r3
 800809c:	f3bf 8f6f 	isb	sy
 80080a0:	f3bf 8f4f 	dsb	sy
 80080a4:	b662      	cpsie	i
 80080a6:	60bb      	str	r3, [r7, #8]
}
 80080a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80080aa:	bf00      	nop
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d0fc      	beq.n	80080ac <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80080b2:	bf00      	nop
 80080b4:	bf00      	nop
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	20000018 	.word	0x20000018
	...

080080d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80080d0:	4b07      	ldr	r3, [pc, #28]	; (80080f0 <pxCurrentTCBConst2>)
 80080d2:	6819      	ldr	r1, [r3, #0]
 80080d4:	6808      	ldr	r0, [r1, #0]
 80080d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080da:	f380 8809 	msr	PSP, r0
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f04f 0000 	mov.w	r0, #0
 80080e6:	f380 8811 	msr	BASEPRI, r0
 80080ea:	4770      	bx	lr
 80080ec:	f3af 8000 	nop.w

080080f0 <pxCurrentTCBConst2>:
 80080f0:	20000868 	.word	0x20000868
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80080f4:	bf00      	nop
 80080f6:	bf00      	nop

080080f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80080f8:	4808      	ldr	r0, [pc, #32]	; (800811c <prvPortStartFirstTask+0x24>)
 80080fa:	6800      	ldr	r0, [r0, #0]
 80080fc:	6800      	ldr	r0, [r0, #0]
 80080fe:	f380 8808 	msr	MSP, r0
 8008102:	f04f 0000 	mov.w	r0, #0
 8008106:	f380 8814 	msr	CONTROL, r0
 800810a:	b662      	cpsie	i
 800810c:	b661      	cpsie	f
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	df00      	svc	0
 8008118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800811a:	bf00      	nop
 800811c:	e000ed08 	.word	0xe000ed08

08008120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008126:	4b37      	ldr	r3, [pc, #220]	; (8008204 <xPortStartScheduler+0xe4>)
 8008128:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	b2db      	uxtb	r3, r3
 8008130:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	22ff      	movs	r2, #255	; 0xff
 8008136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	b2db      	uxtb	r3, r3
 800813e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008140:	78fb      	ldrb	r3, [r7, #3]
 8008142:	b2db      	uxtb	r3, r3
 8008144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008148:	b2da      	uxtb	r2, r3
 800814a:	4b2f      	ldr	r3, [pc, #188]	; (8008208 <xPortStartScheduler+0xe8>)
 800814c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800814e:	4b2f      	ldr	r3, [pc, #188]	; (800820c <xPortStartScheduler+0xec>)
 8008150:	2207      	movs	r2, #7
 8008152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008154:	e009      	b.n	800816a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008156:	4b2d      	ldr	r3, [pc, #180]	; (800820c <xPortStartScheduler+0xec>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3b01      	subs	r3, #1
 800815c:	4a2b      	ldr	r2, [pc, #172]	; (800820c <xPortStartScheduler+0xec>)
 800815e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008160:	78fb      	ldrb	r3, [r7, #3]
 8008162:	b2db      	uxtb	r3, r3
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	b2db      	uxtb	r3, r3
 8008168:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800816a:	78fb      	ldrb	r3, [r7, #3]
 800816c:	b2db      	uxtb	r3, r3
 800816e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008172:	2b80      	cmp	r3, #128	; 0x80
 8008174:	d0ef      	beq.n	8008156 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008176:	4b25      	ldr	r3, [pc, #148]	; (800820c <xPortStartScheduler+0xec>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f1c3 0307 	rsb	r3, r3, #7
 800817e:	2b04      	cmp	r3, #4
 8008180:	d00c      	beq.n	800819c <xPortStartScheduler+0x7c>
	__asm volatile
 8008182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008186:	b672      	cpsid	i
 8008188:	f383 8811 	msr	BASEPRI, r3
 800818c:	f3bf 8f6f 	isb	sy
 8008190:	f3bf 8f4f 	dsb	sy
 8008194:	b662      	cpsie	i
 8008196:	60bb      	str	r3, [r7, #8]
}
 8008198:	bf00      	nop
 800819a:	e7fe      	b.n	800819a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800819c:	4b1b      	ldr	r3, [pc, #108]	; (800820c <xPortStartScheduler+0xec>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	021b      	lsls	r3, r3, #8
 80081a2:	4a1a      	ldr	r2, [pc, #104]	; (800820c <xPortStartScheduler+0xec>)
 80081a4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081a6:	4b19      	ldr	r3, [pc, #100]	; (800820c <xPortStartScheduler+0xec>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081ae:	4a17      	ldr	r2, [pc, #92]	; (800820c <xPortStartScheduler+0xec>)
 80081b0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80081ba:	4b15      	ldr	r3, [pc, #84]	; (8008210 <xPortStartScheduler+0xf0>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a14      	ldr	r2, [pc, #80]	; (8008210 <xPortStartScheduler+0xf0>)
 80081c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80081c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80081c6:	4b12      	ldr	r3, [pc, #72]	; (8008210 <xPortStartScheduler+0xf0>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a11      	ldr	r2, [pc, #68]	; (8008210 <xPortStartScheduler+0xf0>)
 80081cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80081d0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80081d2:	f000 f8dd 	bl	8008390 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80081d6:	4b0f      	ldr	r3, [pc, #60]	; (8008214 <xPortStartScheduler+0xf4>)
 80081d8:	2200      	movs	r2, #0
 80081da:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80081dc:	f000 f8fc 	bl	80083d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80081e0:	4b0d      	ldr	r3, [pc, #52]	; (8008218 <xPortStartScheduler+0xf8>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a0c      	ldr	r2, [pc, #48]	; (8008218 <xPortStartScheduler+0xf8>)
 80081e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80081ea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80081ec:	f7ff ff84 	bl	80080f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80081f0:	f7ff f84a 	bl	8007288 <vTaskSwitchContext>
	prvTaskExitError();
 80081f4:	f7ff ff36 	bl	8008064 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	e000e400 	.word	0xe000e400
 8008208:	20000e94 	.word	0x20000e94
 800820c:	20000e98 	.word	0x20000e98
 8008210:	e000ed20 	.word	0xe000ed20
 8008214:	20000018 	.word	0x20000018
 8008218:	e000ef34 	.word	0xe000ef34

0800821c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
	__asm volatile
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	b672      	cpsid	i
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	b662      	cpsie	i
 8008236:	607b      	str	r3, [r7, #4]
}
 8008238:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800823a:	4b10      	ldr	r3, [pc, #64]	; (800827c <vPortEnterCritical+0x60>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3301      	adds	r3, #1
 8008240:	4a0e      	ldr	r2, [pc, #56]	; (800827c <vPortEnterCritical+0x60>)
 8008242:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008244:	4b0d      	ldr	r3, [pc, #52]	; (800827c <vPortEnterCritical+0x60>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d111      	bne.n	8008270 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800824c:	4b0c      	ldr	r3, [pc, #48]	; (8008280 <vPortEnterCritical+0x64>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00c      	beq.n	8008270 <vPortEnterCritical+0x54>
	__asm volatile
 8008256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825a:	b672      	cpsid	i
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	b662      	cpsie	i
 800826a:	603b      	str	r3, [r7, #0]
}
 800826c:	bf00      	nop
 800826e:	e7fe      	b.n	800826e <vPortEnterCritical+0x52>
	}
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	20000018 	.word	0x20000018
 8008280:	e000ed04 	.word	0xe000ed04

08008284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800828a:	4b13      	ldr	r3, [pc, #76]	; (80082d8 <vPortExitCritical+0x54>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10c      	bne.n	80082ac <vPortExitCritical+0x28>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008296:	b672      	cpsid	i
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	b662      	cpsie	i
 80082a6:	607b      	str	r3, [r7, #4]
}
 80082a8:	bf00      	nop
 80082aa:	e7fe      	b.n	80082aa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80082ac:	4b0a      	ldr	r3, [pc, #40]	; (80082d8 <vPortExitCritical+0x54>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3b01      	subs	r3, #1
 80082b2:	4a09      	ldr	r2, [pc, #36]	; (80082d8 <vPortExitCritical+0x54>)
 80082b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082b6:	4b08      	ldr	r3, [pc, #32]	; (80082d8 <vPortExitCritical+0x54>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d105      	bne.n	80082ca <vPortExitCritical+0x46>
 80082be:	2300      	movs	r3, #0
 80082c0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	f383 8811 	msr	BASEPRI, r3
}
 80082c8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80082ca:	bf00      	nop
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	20000018 	.word	0x20000018
 80082dc:	00000000 	.word	0x00000000

080082e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80082e0:	f3ef 8009 	mrs	r0, PSP
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	4b15      	ldr	r3, [pc, #84]	; (8008340 <pxCurrentTCBConst>)
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	f01e 0f10 	tst.w	lr, #16
 80082f0:	bf08      	it	eq
 80082f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80082f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fa:	6010      	str	r0, [r2, #0]
 80082fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008304:	b672      	cpsid	i
 8008306:	f380 8811 	msr	BASEPRI, r0
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	b662      	cpsie	i
 8008314:	f7fe ffb8 	bl	8007288 <vTaskSwitchContext>
 8008318:	f04f 0000 	mov.w	r0, #0
 800831c:	f380 8811 	msr	BASEPRI, r0
 8008320:	bc09      	pop	{r0, r3}
 8008322:	6819      	ldr	r1, [r3, #0]
 8008324:	6808      	ldr	r0, [r1, #0]
 8008326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800832a:	f01e 0f10 	tst.w	lr, #16
 800832e:	bf08      	it	eq
 8008330:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008334:	f380 8809 	msr	PSP, r0
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop

08008340 <pxCurrentTCBConst>:
 8008340:	20000868 	.word	0x20000868
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008344:	bf00      	nop
 8008346:	bf00      	nop

08008348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
	__asm volatile
 800834e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008352:	b672      	cpsid	i
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	b662      	cpsie	i
 8008362:	607b      	str	r3, [r7, #4]
}
 8008364:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008366:	f7fe fed3 	bl	8007110 <xTaskIncrementTick>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d003      	beq.n	8008378 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008370:	4b06      	ldr	r3, [pc, #24]	; (800838c <SysTick_Handler+0x44>)
 8008372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008376:	601a      	str	r2, [r3, #0]
 8008378:	2300      	movs	r3, #0
 800837a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	f383 8811 	msr	BASEPRI, r3
}
 8008382:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008384:	bf00      	nop
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	e000ed04 	.word	0xe000ed04

08008390 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008390:	b480      	push	{r7}
 8008392:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008394:	4b0b      	ldr	r3, [pc, #44]	; (80083c4 <vPortSetupTimerInterrupt+0x34>)
 8008396:	2200      	movs	r2, #0
 8008398:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800839a:	4b0b      	ldr	r3, [pc, #44]	; (80083c8 <vPortSetupTimerInterrupt+0x38>)
 800839c:	2200      	movs	r2, #0
 800839e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083a0:	4b0a      	ldr	r3, [pc, #40]	; (80083cc <vPortSetupTimerInterrupt+0x3c>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a0a      	ldr	r2, [pc, #40]	; (80083d0 <vPortSetupTimerInterrupt+0x40>)
 80083a6:	fba2 2303 	umull	r2, r3, r2, r3
 80083aa:	099b      	lsrs	r3, r3, #6
 80083ac:	4a09      	ldr	r2, [pc, #36]	; (80083d4 <vPortSetupTimerInterrupt+0x44>)
 80083ae:	3b01      	subs	r3, #1
 80083b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083b2:	4b04      	ldr	r3, [pc, #16]	; (80083c4 <vPortSetupTimerInterrupt+0x34>)
 80083b4:	2207      	movs	r2, #7
 80083b6:	601a      	str	r2, [r3, #0]
}
 80083b8:	bf00      	nop
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	e000e010 	.word	0xe000e010
 80083c8:	e000e018 	.word	0xe000e018
 80083cc:	20000000 	.word	0x20000000
 80083d0:	10624dd3 	.word	0x10624dd3
 80083d4:	e000e014 	.word	0xe000e014

080083d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80083d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80083e8 <vPortEnableVFP+0x10>
 80083dc:	6801      	ldr	r1, [r0, #0]
 80083de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80083e2:	6001      	str	r1, [r0, #0]
 80083e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80083e6:	bf00      	nop
 80083e8:	e000ed88 	.word	0xe000ed88

080083ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80083f2:	f3ef 8305 	mrs	r3, IPSR
 80083f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b0f      	cmp	r3, #15
 80083fc:	d916      	bls.n	800842c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80083fe:	4a19      	ldr	r2, [pc, #100]	; (8008464 <vPortValidateInterruptPriority+0x78>)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	4413      	add	r3, r2
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008408:	4b17      	ldr	r3, [pc, #92]	; (8008468 <vPortValidateInterruptPriority+0x7c>)
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	7afa      	ldrb	r2, [r7, #11]
 800840e:	429a      	cmp	r2, r3
 8008410:	d20c      	bcs.n	800842c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008416:	b672      	cpsid	i
 8008418:	f383 8811 	msr	BASEPRI, r3
 800841c:	f3bf 8f6f 	isb	sy
 8008420:	f3bf 8f4f 	dsb	sy
 8008424:	b662      	cpsie	i
 8008426:	607b      	str	r3, [r7, #4]
}
 8008428:	bf00      	nop
 800842a:	e7fe      	b.n	800842a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800842c:	4b0f      	ldr	r3, [pc, #60]	; (800846c <vPortValidateInterruptPriority+0x80>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008434:	4b0e      	ldr	r3, [pc, #56]	; (8008470 <vPortValidateInterruptPriority+0x84>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	429a      	cmp	r2, r3
 800843a:	d90c      	bls.n	8008456 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800843c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008440:	b672      	cpsid	i
 8008442:	f383 8811 	msr	BASEPRI, r3
 8008446:	f3bf 8f6f 	isb	sy
 800844a:	f3bf 8f4f 	dsb	sy
 800844e:	b662      	cpsie	i
 8008450:	603b      	str	r3, [r7, #0]
}
 8008452:	bf00      	nop
 8008454:	e7fe      	b.n	8008454 <vPortValidateInterruptPriority+0x68>
	}
 8008456:	bf00      	nop
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	e000e3f0 	.word	0xe000e3f0
 8008468:	20000e94 	.word	0x20000e94
 800846c:	e000ed0c 	.word	0xe000ed0c
 8008470:	20000e98 	.word	0x20000e98

08008474 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b08a      	sub	sp, #40	; 0x28
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800847c:	2300      	movs	r3, #0
 800847e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008480:	f7fe fd88 	bl	8006f94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008484:	4b5b      	ldr	r3, [pc, #364]	; (80085f4 <pvPortMalloc+0x180>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d101      	bne.n	8008490 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800848c:	f000 f91a 	bl	80086c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008490:	4b59      	ldr	r3, [pc, #356]	; (80085f8 <pvPortMalloc+0x184>)
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4013      	ands	r3, r2
 8008498:	2b00      	cmp	r3, #0
 800849a:	f040 8092 	bne.w	80085c2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d01f      	beq.n	80084e4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80084a4:	2208      	movs	r2, #8
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4413      	add	r3, r2
 80084aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f003 0307 	and.w	r3, r3, #7
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d016      	beq.n	80084e4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f023 0307 	bic.w	r3, r3, #7
 80084bc:	3308      	adds	r3, #8
 80084be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f003 0307 	and.w	r3, r3, #7
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00c      	beq.n	80084e4 <pvPortMalloc+0x70>
	__asm volatile
 80084ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ce:	b672      	cpsid	i
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	b662      	cpsie	i
 80084de:	617b      	str	r3, [r7, #20]
}
 80084e0:	bf00      	nop
 80084e2:	e7fe      	b.n	80084e2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d06b      	beq.n	80085c2 <pvPortMalloc+0x14e>
 80084ea:	4b44      	ldr	r3, [pc, #272]	; (80085fc <pvPortMalloc+0x188>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d866      	bhi.n	80085c2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084f4:	4b42      	ldr	r3, [pc, #264]	; (8008600 <pvPortMalloc+0x18c>)
 80084f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80084f8:	4b41      	ldr	r3, [pc, #260]	; (8008600 <pvPortMalloc+0x18c>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084fe:	e004      	b.n	800850a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008502:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	429a      	cmp	r2, r3
 8008512:	d903      	bls.n	800851c <pvPortMalloc+0xa8>
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1f1      	bne.n	8008500 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800851c:	4b35      	ldr	r3, [pc, #212]	; (80085f4 <pvPortMalloc+0x180>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008522:	429a      	cmp	r2, r3
 8008524:	d04d      	beq.n	80085c2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008526:	6a3b      	ldr	r3, [r7, #32]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2208      	movs	r2, #8
 800852c:	4413      	add	r3, r2
 800852e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	6a3b      	ldr	r3, [r7, #32]
 8008536:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853a:	685a      	ldr	r2, [r3, #4]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	1ad2      	subs	r2, r2, r3
 8008540:	2308      	movs	r3, #8
 8008542:	005b      	lsls	r3, r3, #1
 8008544:	429a      	cmp	r2, r3
 8008546:	d921      	bls.n	800858c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4413      	add	r3, r2
 800854e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	f003 0307 	and.w	r3, r3, #7
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00c      	beq.n	8008574 <pvPortMalloc+0x100>
	__asm volatile
 800855a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855e:	b672      	cpsid	i
 8008560:	f383 8811 	msr	BASEPRI, r3
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	b662      	cpsie	i
 800856e:	613b      	str	r3, [r7, #16]
}
 8008570:	bf00      	nop
 8008572:	e7fe      	b.n	8008572 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008576:	685a      	ldr	r2, [r3, #4]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	1ad2      	subs	r2, r2, r3
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008586:	69b8      	ldr	r0, [r7, #24]
 8008588:	f000 f8fe 	bl	8008788 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800858c:	4b1b      	ldr	r3, [pc, #108]	; (80085fc <pvPortMalloc+0x188>)
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	4a19      	ldr	r2, [pc, #100]	; (80085fc <pvPortMalloc+0x188>)
 8008598:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800859a:	4b18      	ldr	r3, [pc, #96]	; (80085fc <pvPortMalloc+0x188>)
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	4b19      	ldr	r3, [pc, #100]	; (8008604 <pvPortMalloc+0x190>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d203      	bcs.n	80085ae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085a6:	4b15      	ldr	r3, [pc, #84]	; (80085fc <pvPortMalloc+0x188>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a16      	ldr	r2, [pc, #88]	; (8008604 <pvPortMalloc+0x190>)
 80085ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b0:	685a      	ldr	r2, [r3, #4]
 80085b2:	4b11      	ldr	r3, [pc, #68]	; (80085f8 <pvPortMalloc+0x184>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	431a      	orrs	r2, r3
 80085b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085be:	2200      	movs	r2, #0
 80085c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085c2:	f7fe fcf5 	bl	8006fb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	f003 0307 	and.w	r3, r3, #7
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00c      	beq.n	80085ea <pvPortMalloc+0x176>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d4:	b672      	cpsid	i
 80085d6:	f383 8811 	msr	BASEPRI, r3
 80085da:	f3bf 8f6f 	isb	sy
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	b662      	cpsie	i
 80085e4:	60fb      	str	r3, [r7, #12]
}
 80085e6:	bf00      	nop
 80085e8:	e7fe      	b.n	80085e8 <pvPortMalloc+0x174>
	return pvReturn;
 80085ea:	69fb      	ldr	r3, [r7, #28]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3728      	adds	r7, #40	; 0x28
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	20004aa4 	.word	0x20004aa4
 80085f8:	20004ab0 	.word	0x20004ab0
 80085fc:	20004aa8 	.word	0x20004aa8
 8008600:	20004a9c 	.word	0x20004a9c
 8008604:	20004aac 	.word	0x20004aac

08008608 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d04c      	beq.n	80086b4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800861a:	2308      	movs	r3, #8
 800861c:	425b      	negs	r3, r3
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	4413      	add	r3, r2
 8008622:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	4b23      	ldr	r3, [pc, #140]	; (80086bc <vPortFree+0xb4>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4013      	ands	r3, r2
 8008632:	2b00      	cmp	r3, #0
 8008634:	d10c      	bne.n	8008650 <vPortFree+0x48>
	__asm volatile
 8008636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863a:	b672      	cpsid	i
 800863c:	f383 8811 	msr	BASEPRI, r3
 8008640:	f3bf 8f6f 	isb	sy
 8008644:	f3bf 8f4f 	dsb	sy
 8008648:	b662      	cpsie	i
 800864a:	60fb      	str	r3, [r7, #12]
}
 800864c:	bf00      	nop
 800864e:	e7fe      	b.n	800864e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00c      	beq.n	8008672 <vPortFree+0x6a>
	__asm volatile
 8008658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865c:	b672      	cpsid	i
 800865e:	f383 8811 	msr	BASEPRI, r3
 8008662:	f3bf 8f6f 	isb	sy
 8008666:	f3bf 8f4f 	dsb	sy
 800866a:	b662      	cpsie	i
 800866c:	60bb      	str	r3, [r7, #8]
}
 800866e:	bf00      	nop
 8008670:	e7fe      	b.n	8008670 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	685a      	ldr	r2, [r3, #4]
 8008676:	4b11      	ldr	r3, [pc, #68]	; (80086bc <vPortFree+0xb4>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4013      	ands	r3, r2
 800867c:	2b00      	cmp	r3, #0
 800867e:	d019      	beq.n	80086b4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d115      	bne.n	80086b4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	4b0b      	ldr	r3, [pc, #44]	; (80086bc <vPortFree+0xb4>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	43db      	mvns	r3, r3
 8008692:	401a      	ands	r2, r3
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008698:	f7fe fc7c 	bl	8006f94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	685a      	ldr	r2, [r3, #4]
 80086a0:	4b07      	ldr	r3, [pc, #28]	; (80086c0 <vPortFree+0xb8>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4413      	add	r3, r2
 80086a6:	4a06      	ldr	r2, [pc, #24]	; (80086c0 <vPortFree+0xb8>)
 80086a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086aa:	6938      	ldr	r0, [r7, #16]
 80086ac:	f000 f86c 	bl	8008788 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80086b0:	f7fe fc7e 	bl	8006fb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086b4:	bf00      	nop
 80086b6:	3718      	adds	r7, #24
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	20004ab0 	.word	0x20004ab0
 80086c0:	20004aa8 	.word	0x20004aa8

080086c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80086ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80086d0:	4b27      	ldr	r3, [pc, #156]	; (8008770 <prvHeapInit+0xac>)
 80086d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f003 0307 	and.w	r3, r3, #7
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00c      	beq.n	80086f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3307      	adds	r3, #7
 80086e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f023 0307 	bic.w	r3, r3, #7
 80086ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	4a1f      	ldr	r2, [pc, #124]	; (8008770 <prvHeapInit+0xac>)
 80086f4:	4413      	add	r3, r2
 80086f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80086fc:	4a1d      	ldr	r2, [pc, #116]	; (8008774 <prvHeapInit+0xb0>)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008702:	4b1c      	ldr	r3, [pc, #112]	; (8008774 <prvHeapInit+0xb0>)
 8008704:	2200      	movs	r2, #0
 8008706:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	68ba      	ldr	r2, [r7, #8]
 800870c:	4413      	add	r3, r2
 800870e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008710:	2208      	movs	r2, #8
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	1a9b      	subs	r3, r3, r2
 8008716:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f023 0307 	bic.w	r3, r3, #7
 800871e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	4a15      	ldr	r2, [pc, #84]	; (8008778 <prvHeapInit+0xb4>)
 8008724:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008726:	4b14      	ldr	r3, [pc, #80]	; (8008778 <prvHeapInit+0xb4>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2200      	movs	r2, #0
 800872c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800872e:	4b12      	ldr	r3, [pc, #72]	; (8008778 <prvHeapInit+0xb4>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2200      	movs	r2, #0
 8008734:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	1ad2      	subs	r2, r2, r3
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008744:	4b0c      	ldr	r3, [pc, #48]	; (8008778 <prvHeapInit+0xb4>)
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	4a0a      	ldr	r2, [pc, #40]	; (800877c <prvHeapInit+0xb8>)
 8008752:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	4a09      	ldr	r2, [pc, #36]	; (8008780 <prvHeapInit+0xbc>)
 800875a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800875c:	4b09      	ldr	r3, [pc, #36]	; (8008784 <prvHeapInit+0xc0>)
 800875e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008762:	601a      	str	r2, [r3, #0]
}
 8008764:	bf00      	nop
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	20000e9c 	.word	0x20000e9c
 8008774:	20004a9c 	.word	0x20004a9c
 8008778:	20004aa4 	.word	0x20004aa4
 800877c:	20004aac 	.word	0x20004aac
 8008780:	20004aa8 	.word	0x20004aa8
 8008784:	20004ab0 	.word	0x20004ab0

08008788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008790:	4b28      	ldr	r3, [pc, #160]	; (8008834 <prvInsertBlockIntoFreeList+0xac>)
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	e002      	b.n	800879c <prvInsertBlockIntoFreeList+0x14>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d8f7      	bhi.n	8008796 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	4413      	add	r3, r2
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d108      	bne.n	80087ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	441a      	add	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	441a      	add	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d118      	bne.n	8008810 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	4b15      	ldr	r3, [pc, #84]	; (8008838 <prvInsertBlockIntoFreeList+0xb0>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d00d      	beq.n	8008806 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	441a      	add	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	e008      	b.n	8008818 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008806:	4b0c      	ldr	r3, [pc, #48]	; (8008838 <prvInsertBlockIntoFreeList+0xb0>)
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	601a      	str	r2, [r3, #0]
 800880e:	e003      	b.n	8008818 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	429a      	cmp	r2, r3
 800881e:	d002      	beq.n	8008826 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008826:	bf00      	nop
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	20004a9c 	.word	0x20004a9c
 8008838:	20004aa4 	.word	0x20004aa4

0800883c <__libc_init_array>:
 800883c:	b570      	push	{r4, r5, r6, lr}
 800883e:	4d0d      	ldr	r5, [pc, #52]	; (8008874 <__libc_init_array+0x38>)
 8008840:	4c0d      	ldr	r4, [pc, #52]	; (8008878 <__libc_init_array+0x3c>)
 8008842:	1b64      	subs	r4, r4, r5
 8008844:	10a4      	asrs	r4, r4, #2
 8008846:	2600      	movs	r6, #0
 8008848:	42a6      	cmp	r6, r4
 800884a:	d109      	bne.n	8008860 <__libc_init_array+0x24>
 800884c:	4d0b      	ldr	r5, [pc, #44]	; (800887c <__libc_init_array+0x40>)
 800884e:	4c0c      	ldr	r4, [pc, #48]	; (8008880 <__libc_init_array+0x44>)
 8008850:	f000 f82e 	bl	80088b0 <_init>
 8008854:	1b64      	subs	r4, r4, r5
 8008856:	10a4      	asrs	r4, r4, #2
 8008858:	2600      	movs	r6, #0
 800885a:	42a6      	cmp	r6, r4
 800885c:	d105      	bne.n	800886a <__libc_init_array+0x2e>
 800885e:	bd70      	pop	{r4, r5, r6, pc}
 8008860:	f855 3b04 	ldr.w	r3, [r5], #4
 8008864:	4798      	blx	r3
 8008866:	3601      	adds	r6, #1
 8008868:	e7ee      	b.n	8008848 <__libc_init_array+0xc>
 800886a:	f855 3b04 	ldr.w	r3, [r5], #4
 800886e:	4798      	blx	r3
 8008870:	3601      	adds	r6, #1
 8008872:	e7f2      	b.n	800885a <__libc_init_array+0x1e>
 8008874:	0800a4b0 	.word	0x0800a4b0
 8008878:	0800a4b0 	.word	0x0800a4b0
 800887c:	0800a4b0 	.word	0x0800a4b0
 8008880:	0800a4b4 	.word	0x0800a4b4

08008884 <memcpy>:
 8008884:	440a      	add	r2, r1
 8008886:	4291      	cmp	r1, r2
 8008888:	f100 33ff 	add.w	r3, r0, #4294967295
 800888c:	d100      	bne.n	8008890 <memcpy+0xc>
 800888e:	4770      	bx	lr
 8008890:	b510      	push	{r4, lr}
 8008892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008896:	f803 4f01 	strb.w	r4, [r3, #1]!
 800889a:	4291      	cmp	r1, r2
 800889c:	d1f9      	bne.n	8008892 <memcpy+0xe>
 800889e:	bd10      	pop	{r4, pc}

080088a0 <memset>:
 80088a0:	4402      	add	r2, r0
 80088a2:	4603      	mov	r3, r0
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d100      	bne.n	80088aa <memset+0xa>
 80088a8:	4770      	bx	lr
 80088aa:	f803 1b01 	strb.w	r1, [r3], #1
 80088ae:	e7f9      	b.n	80088a4 <memset+0x4>

080088b0 <_init>:
 80088b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b2:	bf00      	nop
 80088b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088b6:	bc08      	pop	{r3}
 80088b8:	469e      	mov	lr, r3
 80088ba:	4770      	bx	lr

080088bc <_fini>:
 80088bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088be:	bf00      	nop
 80088c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088c2:	bc08      	pop	{r3}
 80088c4:	469e      	mov	lr, r3
 80088c6:	4770      	bx	lr
