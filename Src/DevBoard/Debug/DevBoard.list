
DevBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007378  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08007548  08007548  00017548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007668  08007668  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08007668  08007668  00017668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007670  08007670  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007670  08007670  00017670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007674  08007674  00017674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08007678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005264  20000024  0800769c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20005288  0800769c  00025288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000249cf  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004512  00000000  00000000  00044a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c90  00000000  00000000  00048f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ad8  00000000  00000000  0004abc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005023  00000000  00000000  0004c6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000211ea  00000000  00000000  000516c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101a6d  00000000  00000000  000728ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017431a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007908  00000000  00000000  00174370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000024 	.word	0x20000024
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007530 	.word	0x08007530

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000028 	.word	0x20000028
 800020c:	08007530 	.word	0x08007530

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800050c:	f3bf 8f4f 	dsb	sy
}
 8000510:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000512:	f3bf 8f6f 	isb	sy
}
 8000516:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <SCB_EnableICache+0x48>)
 800051a:	2200      	movs	r2, #0
 800051c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000520:	f3bf 8f4f 	dsb	sy
}
 8000524:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000526:	f3bf 8f6f 	isb	sy
}
 800052a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <SCB_EnableICache+0x48>)
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	4a07      	ldr	r2, [pc, #28]	; (8000550 <SCB_EnableICache+0x48>)
 8000532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000536:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000538:	f3bf 8f4f 	dsb	sy
}
 800053c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800053e:	f3bf 8f6f 	isb	sy
}
 8000542:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800055a:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SCB_EnableDCache+0x84>)
 800055c:	2200      	movs	r2, #0
 800055e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000562:	f3bf 8f4f 	dsb	sy
}
 8000566:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000568:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <SCB_EnableDCache+0x84>)
 800056a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800056e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	0b5b      	lsrs	r3, r3, #13
 8000574:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000578:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	08db      	lsrs	r3, r3, #3
 800057e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000582:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	015a      	lsls	r2, r3, #5
 8000588:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800058c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800058e:	68ba      	ldr	r2, [r7, #8]
 8000590:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000592:	4911      	ldr	r1, [pc, #68]	; (80005d8 <SCB_EnableDCache+0x84>)
 8000594:	4313      	orrs	r3, r2
 8000596:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	1e5a      	subs	r2, r3, #1
 800059e:	60ba      	str	r2, [r7, #8]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d1ef      	bne.n	8000584 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	1e5a      	subs	r2, r3, #1
 80005a8:	60fa      	str	r2, [r7, #12]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d1e5      	bne.n	800057a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005ae:	f3bf 8f4f 	dsb	sy
}
 80005b2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <SCB_EnableDCache+0x84>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <SCB_EnableDCache+0x84>)
 80005ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005be:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005c0:	f3bf 8f4f 	dsb	sy
}
 80005c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005c6:	f3bf 8f6f 	isb	sy
}
 80005ca:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80005e0:	f7ff ff92 	bl	8000508 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80005e4:	f7ff ffb6 	bl	8000554 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f001 f8f5 	bl	80017d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f868 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 fba4 	bl	8000d3c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005f4:	f000 fabc 	bl	8000b70 <MX_USART1_UART_Init>
  MX_DCMI_Init();
 80005f8:	f000 f8fe 	bl	80007f8 <MX_DCMI_Init>
  MX_FMC_Init();
 80005fc:	f000 fb50 	bl	8000ca0 <MX_FMC_Init>
  MX_SPI1_Init();
 8000600:	f000 f9ae 	bl	8000960 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000604:	f000 f9ea 	bl	80009dc <MX_SPI2_Init>
  MX_SPI3_Init();
 8000608:	f000 fa26 	bl	8000a58 <MX_SPI3_Init>
  MX_TIM2_Init();
 800060c:	f000 fa62 	bl	8000ad4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000610:	f000 fade 	bl	8000bd0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000614:	f000 fb0c 	bl	8000c30 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000618:	f004 f8bc 	bl	8004794 <MX_FATFS_Init>
  MX_I2C1_Init();
 800061c:	f000 f920 	bl	8000860 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000620:	f000 f95e 	bl	80008e0 <MX_I2C3_Init>
  MX_USB_OTG_FS_USB_Init();
 8000624:	f000 fb34 	bl	8000c90 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000628:	f004 f980 	bl	800492c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800062c:	4a15      	ldr	r2, [pc, #84]	; (8000684 <main+0xa8>)
 800062e:	2100      	movs	r1, #0
 8000630:	4815      	ldr	r0, [pc, #84]	; (8000688 <main+0xac>)
 8000632:	f004 f9e5 	bl	8004a00 <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <main+0xb0>)
 800063a:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800063c:	4a14      	ldr	r2, [pc, #80]	; (8000690 <main+0xb4>)
 800063e:	2100      	movs	r1, #0
 8000640:	4814      	ldr	r0, [pc, #80]	; (8000694 <main+0xb8>)
 8000642:	f004 f9dd 	bl	8004a00 <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a13      	ldr	r2, [pc, #76]	; (8000698 <main+0xbc>)
 800064a:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 800064c:	4a13      	ldr	r2, [pc, #76]	; (800069c <main+0xc0>)
 800064e:	2100      	movs	r1, #0
 8000650:	4813      	ldr	r0, [pc, #76]	; (80006a0 <main+0xc4>)
 8000652:	f004 f9d5 	bl	8004a00 <osThreadNew>
 8000656:	4603      	mov	r3, r0
 8000658:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <main+0xc8>)
 800065a:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <main+0xcc>)
 800065e:	2100      	movs	r1, #0
 8000660:	4812      	ldr	r0, [pc, #72]	; (80006ac <main+0xd0>)
 8000662:	f004 f9cd 	bl	8004a00 <osThreadNew>
 8000666:	4603      	mov	r3, r0
 8000668:	4a11      	ldr	r2, [pc, #68]	; (80006b0 <main+0xd4>)
 800066a:	6013      	str	r3, [r2, #0]

  /* creation of myTask05 */
  myTask05Handle = osThreadNew(StartTask05, NULL, &myTask05_attributes);
 800066c:	4a11      	ldr	r2, [pc, #68]	; (80006b4 <main+0xd8>)
 800066e:	2100      	movs	r1, #0
 8000670:	4811      	ldr	r0, [pc, #68]	; (80006b8 <main+0xdc>)
 8000672:	f004 f9c5 	bl	8004a00 <osThreadNew>
 8000676:	4603      	mov	r3, r0
 8000678:	4a10      	ldr	r2, [pc, #64]	; (80006bc <main+0xe0>)
 800067a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800067c:	f004 f98a 	bl	8004994 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000680:	e7fe      	b.n	8000680 <main+0xa4>
 8000682:	bf00      	nop
 8000684:	0800759c 	.word	0x0800759c
 8000688:	08000e61 	.word	0x08000e61
 800068c:	20004958 	.word	0x20004958
 8000690:	080075c0 	.word	0x080075c0
 8000694:	08000e71 	.word	0x08000e71
 8000698:	20004c1c 	.word	0x20004c1c
 800069c:	080075e4 	.word	0x080075e4
 80006a0:	08000e81 	.word	0x08000e81
 80006a4:	20004c20 	.word	0x20004c20
 80006a8:	08007608 	.word	0x08007608
 80006ac:	08000e91 	.word	0x08000e91
 80006b0:	20004ae0 	.word	0x20004ae0
 80006b4:	0800762c 	.word	0x0800762c
 80006b8:	08000ea1 	.word	0x08000ea1
 80006bc:	20004adc 	.word	0x20004adc

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b0b4      	sub	sp, #208	; 0xd0
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f006 ff26 	bl	8007520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2284      	movs	r2, #132	; 0x84
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f006 ff17 	bl	8007520 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	4b3e      	ldr	r3, [pc, #248]	; (80007ec <SystemClock_Config+0x12c>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f6:	4a3d      	ldr	r2, [pc, #244]	; (80007ec <SystemClock_Config+0x12c>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fc:	6413      	str	r3, [r2, #64]	; 0x40
 80006fe:	4b3b      	ldr	r3, [pc, #236]	; (80007ec <SystemClock_Config+0x12c>)
 8000700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070a:	4b39      	ldr	r3, [pc, #228]	; (80007f0 <SystemClock_Config+0x130>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a38      	ldr	r2, [pc, #224]	; (80007f0 <SystemClock_Config+0x130>)
 8000710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000714:	6013      	str	r3, [r2, #0]
 8000716:	4b36      	ldr	r3, [pc, #216]	; (80007f0 <SystemClock_Config+0x130>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000722:	2301      	movs	r3, #1
 8000724:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000728:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800072c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000736:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800073a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800073e:	2319      	movs	r3, #25
 8000740:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000744:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000748:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000752:	2309      	movs	r3, #9
 8000754:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800075c:	4618      	mov	r0, r3
 800075e:	f001 fce7 	bl	8002130 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000768:	f000 fbb4 	bl	8000ed4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800076c:	f001 fc90 	bl	8002090 <HAL_PWREx_EnableOverDrive>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000776:	f000 fbad 	bl	8000ed4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077a:	230f      	movs	r3, #15
 800077c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000780:	2302      	movs	r3, #2
 8000782:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800078c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000790:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000798:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800079c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007a0:	2107      	movs	r1, #7
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 ff68 	bl	8002678 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80007ae:	f000 fb91 	bl	8000ed4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <SystemClock_Config+0x134>)
 80007b4:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007b6:	2300      	movs	r3, #0
 80007b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80007be:	2300      	movs	r3, #0
 80007c0:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 f957 	bl	8002a88 <HAL_RCCEx_PeriphCLKConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x124>
  {
    Error_Handler();
 80007e0:	f000 fb78 	bl	8000ed4 <Error_Handler>
  }
}
 80007e4:	bf00      	nop
 80007e6:	37d0      	adds	r7, #208	; 0xd0
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000
 80007f4:	002141c0 	.word	0x002141c0

080007f8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_DCMI_Init+0x60>)
 80007fe:	4a17      	ldr	r2, [pc, #92]	; (800085c <MX_DCMI_Init+0x64>)
 8000800:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_DCMI_Init+0x60>)
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <MX_DCMI_Init+0x60>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_DCMI_Init+0x60>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_DCMI_Init+0x60>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_DCMI_Init+0x60>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <MX_DCMI_Init+0x60>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_DCMI_Init+0x60>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_DCMI_Init+0x60>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_DCMI_Init+0x60>)
 8000834:	2200      	movs	r2, #0
 8000836:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <MX_DCMI_Init+0x60>)
 800083a:	2200      	movs	r2, #0
 800083c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_DCMI_Init+0x60>)
 8000840:	2200      	movs	r2, #0
 8000842:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_DCMI_Init+0x60>)
 8000846:	f001 f8d5 	bl	80019f4 <HAL_DCMI_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000850:	f000 fb40 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20004b48 	.word	0x20004b48
 800085c:	50050000 	.word	0x50050000

08000860 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_I2C1_Init+0x74>)
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <MX_I2C1_Init+0x78>)
 8000868:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_I2C1_Init+0x74>)
 800086c:	4a1b      	ldr	r2, [pc, #108]	; (80008dc <MX_I2C1_Init+0x7c>)
 800086e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000870:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_I2C1_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_I2C1_Init+0x74>)
 8000878:	2201      	movs	r2, #1
 800087a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087c:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_I2C1_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_I2C1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_I2C1_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_I2C1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800089a:	480e      	ldr	r0, [pc, #56]	; (80008d4 <MX_I2C1_Init+0x74>)
 800089c:	f001 fad0 	bl	8001e40 <HAL_I2C_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008a6:	f000 fb15 	bl	8000ed4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008aa:	2100      	movs	r1, #0
 80008ac:	4809      	ldr	r0, [pc, #36]	; (80008d4 <MX_I2C1_Init+0x74>)
 80008ae:	f001 fb57 	bl	8001f60 <HAL_I2CEx_ConfigAnalogFilter>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008b8:	f000 fb0c 	bl	8000ed4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008bc:	2100      	movs	r1, #0
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_I2C1_Init+0x74>)
 80008c0:	f001 fb99 	bl	8001ff6 <HAL_I2CEx_ConfigDigitalFilter>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008ca:	f000 fb03 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20004a90 	.word	0x20004a90
 80008d8:	40005400 	.word	0x40005400
 80008dc:	20404768 	.word	0x20404768

080008e0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008e4:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <MX_I2C3_Init+0x74>)
 80008e6:	4a1c      	ldr	r2, [pc, #112]	; (8000958 <MX_I2C3_Init+0x78>)
 80008e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 80008ea:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <MX_I2C3_Init+0x74>)
 80008ec:	4a1b      	ldr	r2, [pc, #108]	; (800095c <MX_I2C3_Init+0x7c>)
 80008ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80008f0:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_I2C3_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <MX_I2C3_Init+0x74>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008fc:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_I2C3_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_I2C3_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_I2C3_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_I2C3_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_I2C3_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800091a:	480e      	ldr	r0, [pc, #56]	; (8000954 <MX_I2C3_Init+0x74>)
 800091c:	f001 fa90 	bl	8001e40 <HAL_I2C_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000926:	f000 fad5 	bl	8000ed4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800092a:	2100      	movs	r1, #0
 800092c:	4809      	ldr	r0, [pc, #36]	; (8000954 <MX_I2C3_Init+0x74>)
 800092e:	f001 fb17 	bl	8001f60 <HAL_I2CEx_ConfigAnalogFilter>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000938:	f000 facc 	bl	8000ed4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800093c:	2100      	movs	r1, #0
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_I2C3_Init+0x74>)
 8000940:	f001 fb59 	bl	8001ff6 <HAL_I2CEx_ConfigDigitalFilter>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800094a:	f000 fac3 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2000495c 	.word	0x2000495c
 8000958:	40005c00 	.word	0x40005c00
 800095c:	20404768 	.word	0x20404768

08000960 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_SPI1_Init+0x74>)
 8000966:	4a1c      	ldr	r2, [pc, #112]	; (80009d8 <MX_SPI1_Init+0x78>)
 8000968:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_SPI1_Init+0x74>)
 800096c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000970:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_SPI1_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_SPI1_Init+0x74>)
 800097a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800097e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_SPI1_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_SPI1_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_SPI1_Init+0x74>)
 800098e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000992:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_SPI1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_SPI1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_SPI1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_SPI1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_SPI1_Init+0x74>)
 80009ae:	2207      	movs	r2, #7
 80009b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_SPI1_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_SPI1_Init+0x74>)
 80009ba:	2208      	movs	r2, #8
 80009bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_SPI1_Init+0x74>)
 80009c0:	f002 fc86 	bl	80032d0 <HAL_SPI_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009ca:	f000 fa83 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20004c24 	.word	0x20004c24
 80009d8:	40013000 	.word	0x40013000

080009dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <MX_SPI2_Init+0x74>)
 80009e2:	4a1c      	ldr	r2, [pc, #112]	; (8000a54 <MX_SPI2_Init+0x78>)
 80009e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009e6:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <MX_SPI2_Init+0x74>)
 80009e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <MX_SPI2_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80009f4:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <MX_SPI2_Init+0x74>)
 80009f6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_SPI2_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a02:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <MX_SPI2_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_SPI2_Init+0x74>)
 8000a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a0e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_SPI2_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_SPI2_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_SPI2_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <MX_SPI2_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_SPI2_Init+0x74>)
 8000a2a:	2207      	movs	r2, #7
 8000a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <MX_SPI2_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_SPI2_Init+0x74>)
 8000a36:	2208      	movs	r2, #8
 8000a38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_SPI2_Init+0x74>)
 8000a3c:	f002 fc48 	bl	80032d0 <HAL_SPI_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000a46:	f000 fa45 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200049a8 	.word	0x200049a8
 8000a54:	40003800 	.word	0x40003800

08000a58 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <MX_SPI3_Init+0x74>)
 8000a5e:	4a1c      	ldr	r2, [pc, #112]	; (8000ad0 <MX_SPI3_Init+0x78>)
 8000a60:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a62:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MX_SPI3_Init+0x74>)
 8000a64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a68:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <MX_SPI3_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <MX_SPI3_Init+0x74>)
 8000a72:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a76:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <MX_SPI3_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <MX_SPI3_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_SPI3_Init+0x74>)
 8000a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a8a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <MX_SPI3_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_SPI3_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <MX_SPI3_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <MX_SPI3_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MX_SPI3_Init+0x74>)
 8000aa6:	2207      	movs	r2, #7
 8000aa8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <MX_SPI3_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MX_SPI3_Init+0x74>)
 8000ab2:	2208      	movs	r2, #8
 8000ab4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_SPI3_Init+0x74>)
 8000ab8:	f002 fc0a 	bl	80032d0 <HAL_SPI_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000ac2:	f000 fa07 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20004ae4 	.word	0x20004ae4
 8000ad0:	40003c00 	.word	0x40003c00

08000ad4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ada:	f107 0310 	add.w	r3, r7, #16
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000af2:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <MX_TIM2_Init+0x98>)
 8000af4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000af8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <MX_TIM2_Init+0x98>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <MX_TIM2_Init+0x98>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <MX_TIM2_Init+0x98>)
 8000b08:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <MX_TIM2_Init+0x98>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b14:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <MX_TIM2_Init+0x98>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b1a:	4814      	ldr	r0, [pc, #80]	; (8000b6c <MX_TIM2_Init+0x98>)
 8000b1c:	f002 fc83 	bl	8003426 <HAL_TIM_Base_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b26:	f000 f9d5 	bl	8000ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	4619      	mov	r1, r3
 8000b36:	480d      	ldr	r0, [pc, #52]	; (8000b6c <MX_TIM2_Init+0x98>)
 8000b38:	f002 fe64 	bl	8003804 <HAL_TIM_ConfigClockSource>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b42:	f000 f9c7 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	4619      	mov	r1, r3
 8000b52:	4806      	ldr	r0, [pc, #24]	; (8000b6c <MX_TIM2_Init+0x98>)
 8000b54:	f003 f87e 	bl	8003c54 <HAL_TIMEx_MasterConfigSynchronization>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b5e:	f000 f9b9 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	3720      	adds	r7, #32
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20004c88 	.word	0x20004c88

08000b70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_USART1_UART_Init+0x58>)
 8000b76:	4a15      	ldr	r2, [pc, #84]	; (8000bcc <MX_USART1_UART_Init+0x5c>)
 8000b78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <MX_USART1_UART_Init+0x58>)
 8000b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_USART1_UART_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_USART1_UART_Init+0x58>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_USART1_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_USART1_UART_Init+0x58>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_USART1_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_USART1_UART_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_USART1_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_USART1_UART_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_USART1_UART_Init+0x58>)
 8000bb4:	f003 f8fa 	bl	8003dac <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bbe:	f000 f989 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20004b98 	.word	0x20004b98
 8000bcc:	40011000 	.word	0x40011000

08000bd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bd6:	4a15      	ldr	r2, [pc, #84]	; (8000c2c <MX_USART2_UART_Init+0x5c>)
 8000bd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_USART2_UART_Init+0x58>)
 8000c14:	f003 f8ca 	bl	8003dac <HAL_UART_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c1e:	f000 f959 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20004cd4 	.word	0x20004cd4
 8000c2c:	40004400 	.word	0x40004400

08000c30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c36:	4a15      	ldr	r2, [pc, #84]	; (8000c8c <MX_USART3_UART_Init+0x5c>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_USART3_UART_Init+0x58>)
 8000c74:	f003 f89a 	bl	8003dac <HAL_UART_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c7e:	f000 f929 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20004a0c 	.word	0x20004a0c
 8000c8c:	40004800 	.word	0x40004800

08000c90 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
	...

08000ca0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
 8000cb4:	615a      	str	r2, [r3, #20]
 8000cb6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cba:	4a1f      	ldr	r2, [pc, #124]	; (8000d38 <MX_FMC_Init+0x98>)
 8000cbc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_FMC_Init+0x94>)
 8000ccc:	2204      	movs	r2, #4
 8000cce:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cd2:	2210      	movs	r2, #16
 8000cd4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cd8:	2240      	movs	r2, #64	; 0x40
 8000cda:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000cdc:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ce2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ce4:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <MX_FMC_Init+0x94>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000cf0:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_FMC_Init+0x94>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000d00:	2306      	movs	r3, #6
 8000d02:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000d04:	2304      	movs	r3, #4
 8000d06:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8000d08:	2306      	movs	r3, #6
 8000d0a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000d14:	2302      	movs	r3, #2
 8000d16:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4805      	ldr	r0, [pc, #20]	; (8000d34 <MX_FMC_Init+0x94>)
 8000d1e:	f002 faa3 	bl	8003268 <HAL_SDRAM_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_FMC_Init+0x8c>
  {
    Error_Handler( );
 8000d28:	f000 f8d4 	bl	8000ed4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000d2c:	bf00      	nop
 8000d2e:	3720      	adds	r7, #32
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20004d58 	.word	0x20004d58
 8000d38:	a0000140 	.word	0xa0000140

08000d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08e      	sub	sp, #56	; 0x38
 8000d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d52:	4b41      	ldr	r3, [pc, #260]	; (8000e58 <MX_GPIO_Init+0x11c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a40      	ldr	r2, [pc, #256]	; (8000e58 <MX_GPIO_Init+0x11c>)
 8000d58:	f043 0310 	orr.w	r3, r3, #16
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b3e      	ldr	r3, [pc, #248]	; (8000e58 <MX_GPIO_Init+0x11c>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	623b      	str	r3, [r7, #32]
 8000d68:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d6a:	4b3b      	ldr	r3, [pc, #236]	; (8000e58 <MX_GPIO_Init+0x11c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a3a      	ldr	r2, [pc, #232]	; (8000e58 <MX_GPIO_Init+0x11c>)
 8000d70:	f043 0320 	orr.w	r3, r3, #32
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b38      	ldr	r3, [pc, #224]	; (8000e58 <MX_GPIO_Init+0x11c>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0320 	and.w	r3, r3, #32
 8000d7e:	61fb      	str	r3, [r7, #28]
 8000d80:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d82:	4b35      	ldr	r3, [pc, #212]	; (8000e58 <MX_GPIO_Init+0x11c>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a34      	ldr	r2, [pc, #208]	; (8000e58 <MX_GPIO_Init+0x11c>)
 8000d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b32      	ldr	r3, [pc, #200]	; (8000e58 <MX_GPIO_Init+0x11c>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d96:	61bb      	str	r3, [r7, #24]
 8000d98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9a:	4b2f      	ldr	r3, [pc, #188]	; (8000e58 <MX_GPIO_Init+0x11c>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a2e      	ldr	r2, [pc, #184]	; (8000e58 <MX_GPIO_Init+0x11c>)
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b2c      	ldr	r3, [pc, #176]	; (8000e58 <MX_GPIO_Init+0x11c>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <MX_GPIO_Init+0x11c>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a28      	ldr	r2, [pc, #160]	; (8000e58 <MX_GPIO_Init+0x11c>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <MX_GPIO_Init+0x11c>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dca:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <MX_GPIO_Init+0x11c>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a22      	ldr	r2, [pc, #136]	; (8000e58 <MX_GPIO_Init+0x11c>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <MX_GPIO_Init+0x11c>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <MX_GPIO_Init+0x11c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a1c      	ldr	r2, [pc, #112]	; (8000e58 <MX_GPIO_Init+0x11c>)
 8000de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_GPIO_Init+0x11c>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_GPIO_Init+0x11c>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a16      	ldr	r2, [pc, #88]	; (8000e58 <MX_GPIO_Init+0x11c>)
 8000e00:	f043 0308 	orr.w	r3, r3, #8
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_GPIO_Init+0x11c>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e24:	4619      	mov	r1, r3
 8000e26:	480d      	ldr	r0, [pc, #52]	; (8000e5c <MX_GPIO_Init+0x120>)
 8000e28:	f000 fe5e 	bl	8001ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000e2c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e3e:	230a      	movs	r3, #10
 8000e40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e46:	4619      	mov	r1, r3
 8000e48:	4804      	ldr	r0, [pc, #16]	; (8000e5c <MX_GPIO_Init+0x120>)
 8000e4a:	f000 fe4d 	bl	8001ae8 <HAL_GPIO_Init>

}
 8000e4e:	bf00      	nop
 8000e50:	3738      	adds	r7, #56	; 0x38
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000

08000e60 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f003 fe6f 	bl	8004b4c <osDelay>
 8000e6e:	e7fb      	b.n	8000e68 <StartDefaultTask+0x8>

08000e70 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f003 fe67 	bl	8004b4c <osDelay>
 8000e7e:	e7fb      	b.n	8000e78 <StartTask02+0x8>

08000e80 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f003 fe5f 	bl	8004b4c <osDelay>
 8000e8e:	e7fb      	b.n	8000e88 <StartTask03+0x8>

08000e90 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f003 fe57 	bl	8004b4c <osDelay>
 8000e9e:	e7fb      	b.n	8000e98 <StartTask04+0x8>

08000ea0 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f003 fe4f 	bl	8004b4c <osDelay>
 8000eae:	e7fb      	b.n	8000ea8 <StartTask05+0x8>

08000eb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d101      	bne.n	8000ec6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ec2:	f000 fc95 	bl	80017f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40010000 	.word	0x40010000

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
}
 8000eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000edc:	e7fe      	b.n	8000edc <Error_Handler+0x8>
	...

08000ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <HAL_MspInit+0x4c>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <HAL_MspInit+0x4c>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_MspInit+0x4c>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <HAL_MspInit+0x4c>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_MspInit+0x4c>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f08:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HAL_MspInit+0x4c>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	210f      	movs	r1, #15
 8000f1a:	f06f 0001 	mvn.w	r0, #1
 8000f1e:	f000 fd3f 	bl	80019a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800

08000f30 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08e      	sub	sp, #56	; 0x38
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a50      	ldr	r2, [pc, #320]	; (8001090 <HAL_DCMI_MspInit+0x160>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	f040 809a 	bne.w	8001088 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000f54:	4b4f      	ldr	r3, [pc, #316]	; (8001094 <HAL_DCMI_MspInit+0x164>)
 8000f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f58:	4a4e      	ldr	r2, [pc, #312]	; (8001094 <HAL_DCMI_MspInit+0x164>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6353      	str	r3, [r2, #52]	; 0x34
 8000f60:	4b4c      	ldr	r3, [pc, #304]	; (8001094 <HAL_DCMI_MspInit+0x164>)
 8000f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	623b      	str	r3, [r7, #32]
 8000f6a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6c:	4b49      	ldr	r3, [pc, #292]	; (8001094 <HAL_DCMI_MspInit+0x164>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	4a48      	ldr	r2, [pc, #288]	; (8001094 <HAL_DCMI_MspInit+0x164>)
 8000f72:	f043 0310 	orr.w	r3, r3, #16
 8000f76:	6313      	str	r3, [r2, #48]	; 0x30
 8000f78:	4b46      	ldr	r3, [pc, #280]	; (8001094 <HAL_DCMI_MspInit+0x164>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	f003 0310 	and.w	r3, r3, #16
 8000f80:	61fb      	str	r3, [r7, #28]
 8000f82:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b43      	ldr	r3, [pc, #268]	; (8001094 <HAL_DCMI_MspInit+0x164>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	4a42      	ldr	r2, [pc, #264]	; (8001094 <HAL_DCMI_MspInit+0x164>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f90:	4b40      	ldr	r3, [pc, #256]	; (8001094 <HAL_DCMI_MspInit+0x164>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	61bb      	str	r3, [r7, #24]
 8000f9a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9c:	4b3d      	ldr	r3, [pc, #244]	; (8001094 <HAL_DCMI_MspInit+0x164>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	4a3c      	ldr	r2, [pc, #240]	; (8001094 <HAL_DCMI_MspInit+0x164>)
 8000fa2:	f043 0304 	orr.w	r3, r3, #4
 8000fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa8:	4b3a      	ldr	r3, [pc, #232]	; (8001094 <HAL_DCMI_MspInit+0x164>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb4:	4b37      	ldr	r3, [pc, #220]	; (8001094 <HAL_DCMI_MspInit+0x164>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	4a36      	ldr	r2, [pc, #216]	; (8001094 <HAL_DCMI_MspInit+0x164>)
 8000fba:	f043 0308 	orr.w	r3, r3, #8
 8000fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc0:	4b34      	ldr	r3, [pc, #208]	; (8001094 <HAL_DCMI_MspInit+0x164>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	f003 0308 	and.w	r3, r3, #8
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fcc:	4b31      	ldr	r3, [pc, #196]	; (8001094 <HAL_DCMI_MspInit+0x164>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a30      	ldr	r2, [pc, #192]	; (8001094 <HAL_DCMI_MspInit+0x164>)
 8000fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd8:	4b2e      	ldr	r3, [pc, #184]	; (8001094 <HAL_DCMI_MspInit+0x164>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC
    PG11     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000fe4:	2370      	movs	r3, #112	; 0x70
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ff4:	230d      	movs	r3, #13
 8000ff6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4826      	ldr	r0, [pc, #152]	; (8001098 <HAL_DCMI_MspInit+0x168>)
 8001000:	f000 fd72 	bl	8001ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001004:	2350      	movs	r3, #80	; 0x50
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001014:	230d      	movs	r3, #13
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101c:	4619      	mov	r1, r3
 800101e:	481f      	ldr	r0, [pc, #124]	; (800109c <HAL_DCMI_MspInit+0x16c>)
 8001020:	f000 fd62 	bl	8001ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001024:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001036:	230d      	movs	r3, #13
 8001038:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103e:	4619      	mov	r1, r3
 8001040:	4817      	ldr	r0, [pc, #92]	; (80010a0 <HAL_DCMI_MspInit+0x170>)
 8001042:	f000 fd51 	bl	8001ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001046:	2308      	movs	r3, #8
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001056:	230d      	movs	r3, #13
 8001058:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105e:	4619      	mov	r1, r3
 8001060:	4810      	ldr	r0, [pc, #64]	; (80010a4 <HAL_DCMI_MspInit+0x174>)
 8001062:	f000 fd41 	bl	8001ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001066:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001078:	230d      	movs	r3, #13
 800107a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800107c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001080:	4619      	mov	r1, r3
 8001082:	4809      	ldr	r0, [pc, #36]	; (80010a8 <HAL_DCMI_MspInit+0x178>)
 8001084:	f000 fd30 	bl	8001ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001088:	bf00      	nop
 800108a:	3738      	adds	r7, #56	; 0x38
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	50050000 	.word	0x50050000
 8001094:	40023800 	.word	0x40023800
 8001098:	40021000 	.word	0x40021000
 800109c:	40020000 	.word	0x40020000
 80010a0:	40020800 	.word	0x40020800
 80010a4:	40020c00 	.word	0x40020c00
 80010a8:	40021800 	.word	0x40021800

080010ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08c      	sub	sp, #48	; 0x30
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a3d      	ldr	r2, [pc, #244]	; (80011c0 <HAL_I2C_MspInit+0x114>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d129      	bne.n	8001122 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	4b3d      	ldr	r3, [pc, #244]	; (80011c4 <HAL_I2C_MspInit+0x118>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a3c      	ldr	r2, [pc, #240]	; (80011c4 <HAL_I2C_MspInit+0x118>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b3a      	ldr	r3, [pc, #232]	; (80011c4 <HAL_I2C_MspInit+0x118>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	61bb      	str	r3, [r7, #24]
 80010e4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ec:	2312      	movs	r3, #18
 80010ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f8:	2304      	movs	r3, #4
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	4831      	ldr	r0, [pc, #196]	; (80011c8 <HAL_I2C_MspInit+0x11c>)
 8001104:	f000 fcf0 	bl	8001ae8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001108:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <HAL_I2C_MspInit+0x118>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	4a2d      	ldr	r2, [pc, #180]	; (80011c4 <HAL_I2C_MspInit+0x118>)
 800110e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001112:	6413      	str	r3, [r2, #64]	; 0x40
 8001114:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <HAL_I2C_MspInit+0x118>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001120:	e04a      	b.n	80011b8 <HAL_I2C_MspInit+0x10c>
  else if(hi2c->Instance==I2C3)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a29      	ldr	r2, [pc, #164]	; (80011cc <HAL_I2C_MspInit+0x120>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d145      	bne.n	80011b8 <HAL_I2C_MspInit+0x10c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800112c:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <HAL_I2C_MspInit+0x118>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	4a24      	ldr	r2, [pc, #144]	; (80011c4 <HAL_I2C_MspInit+0x118>)
 8001132:	f043 0304 	orr.w	r3, r3, #4
 8001136:	6313      	str	r3, [r2, #48]	; 0x30
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <HAL_I2C_MspInit+0x118>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <HAL_I2C_MspInit+0x118>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001148:	4a1e      	ldr	r2, [pc, #120]	; (80011c4 <HAL_I2C_MspInit+0x118>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	6313      	str	r3, [r2, #48]	; 0x30
 8001150:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <HAL_I2C_MspInit+0x118>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800115c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001162:	2312      	movs	r3, #18
 8001164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001166:	2301      	movs	r3, #1
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800116e:	2304      	movs	r3, #4
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	4619      	mov	r1, r3
 8001178:	4815      	ldr	r0, [pc, #84]	; (80011d0 <HAL_I2C_MspInit+0x124>)
 800117a:	f000 fcb5 	bl	8001ae8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800117e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001184:	2312      	movs	r3, #18
 8001186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001188:	2301      	movs	r3, #1
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001190:	2304      	movs	r3, #4
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	480e      	ldr	r0, [pc, #56]	; (80011d4 <HAL_I2C_MspInit+0x128>)
 800119c:	f000 fca4 	bl	8001ae8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_I2C_MspInit+0x118>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_I2C_MspInit+0x118>)
 80011a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011aa:	6413      	str	r3, [r2, #64]	; 0x40
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_I2C_MspInit+0x118>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
}
 80011b8:	bf00      	nop
 80011ba:	3730      	adds	r7, #48	; 0x30
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40005400 	.word	0x40005400
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020400 	.word	0x40020400
 80011cc:	40005c00 	.word	0x40005c00
 80011d0:	40020800 	.word	0x40020800
 80011d4:	40020000 	.word	0x40020000

080011d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b090      	sub	sp, #64	; 0x40
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a70      	ldr	r2, [pc, #448]	; (80013b8 <HAL_SPI_MspInit+0x1e0>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d144      	bne.n	8001284 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011fa:	4b70      	ldr	r3, [pc, #448]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	4a6f      	ldr	r2, [pc, #444]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 8001200:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001204:	6453      	str	r3, [r2, #68]	; 0x44
 8001206:	4b6d      	ldr	r3, [pc, #436]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001210:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a69      	ldr	r2, [pc, #420]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b67      	ldr	r3, [pc, #412]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	4b64      	ldr	r3, [pc, #400]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a63      	ldr	r2, [pc, #396]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b61      	ldr	r3, [pc, #388]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	623b      	str	r3, [r7, #32]
 8001240:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001242:	23a0      	movs	r3, #160	; 0xa0
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001252:	2305      	movs	r3, #5
 8001254:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800125a:	4619      	mov	r1, r3
 800125c:	4858      	ldr	r0, [pc, #352]	; (80013c0 <HAL_SPI_MspInit+0x1e8>)
 800125e:	f000 fc43 	bl	8001ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001262:	2310      	movs	r3, #16
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126e:	2303      	movs	r3, #3
 8001270:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001272:	2305      	movs	r3, #5
 8001274:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001276:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800127a:	4619      	mov	r1, r3
 800127c:	4851      	ldr	r0, [pc, #324]	; (80013c4 <HAL_SPI_MspInit+0x1ec>)
 800127e:	f000 fc33 	bl	8001ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001282:	e094      	b.n	80013ae <HAL_SPI_MspInit+0x1d6>
  else if(hspi->Instance==SPI2)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a4f      	ldr	r2, [pc, #316]	; (80013c8 <HAL_SPI_MspInit+0x1f0>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d145      	bne.n	800131a <HAL_SPI_MspInit+0x142>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800128e:	4b4b      	ldr	r3, [pc, #300]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a4a      	ldr	r2, [pc, #296]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b48      	ldr	r3, [pc, #288]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a6:	4b45      	ldr	r3, [pc, #276]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a44      	ldr	r2, [pc, #272]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b42      	ldr	r3, [pc, #264]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	61bb      	str	r3, [r7, #24]
 80012bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	4b3f      	ldr	r3, [pc, #252]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a3e      	ldr	r2, [pc, #248]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b3c      	ldr	r3, [pc, #240]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80012d6:	2306      	movs	r3, #6
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e2:	2303      	movs	r3, #3
 80012e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012e6:	2305      	movs	r3, #5
 80012e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ee:	4619      	mov	r1, r3
 80012f0:	4836      	ldr	r0, [pc, #216]	; (80013cc <HAL_SPI_MspInit+0x1f4>)
 80012f2:	f000 fbf9 	bl	8001ae8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001308:	2305      	movs	r3, #5
 800130a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001310:	4619      	mov	r1, r3
 8001312:	482c      	ldr	r0, [pc, #176]	; (80013c4 <HAL_SPI_MspInit+0x1ec>)
 8001314:	f000 fbe8 	bl	8001ae8 <HAL_GPIO_Init>
}
 8001318:	e049      	b.n	80013ae <HAL_SPI_MspInit+0x1d6>
  else if(hspi->Instance==SPI3)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a2c      	ldr	r2, [pc, #176]	; (80013d0 <HAL_SPI_MspInit+0x1f8>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d144      	bne.n	80013ae <HAL_SPI_MspInit+0x1d6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001324:	4b25      	ldr	r3, [pc, #148]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	4a24      	ldr	r2, [pc, #144]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 800132a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800132e:	6413      	str	r3, [r2, #64]	; 0x40
 8001330:	4b22      	ldr	r3, [pc, #136]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133c:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001340:	4a1e      	ldr	r2, [pc, #120]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 8001342:	f043 0302 	orr.w	r3, r3, #2
 8001346:	6313      	str	r3, [r2, #48]	; 0x30
 8001348:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	4a18      	ldr	r2, [pc, #96]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	6313      	str	r3, [r2, #48]	; 0x30
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <HAL_SPI_MspInit+0x1e4>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800136c:	2304      	movs	r3, #4
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800137c:	2307      	movs	r3, #7
 800137e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001384:	4619      	mov	r1, r3
 8001386:	480f      	ldr	r0, [pc, #60]	; (80013c4 <HAL_SPI_MspInit+0x1ec>)
 8001388:	f000 fbae 	bl	8001ae8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800138c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800139e:	2306      	movs	r3, #6
 80013a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a6:	4619      	mov	r1, r3
 80013a8:	4808      	ldr	r0, [pc, #32]	; (80013cc <HAL_SPI_MspInit+0x1f4>)
 80013aa:	f000 fb9d 	bl	8001ae8 <HAL_GPIO_Init>
}
 80013ae:	bf00      	nop
 80013b0:	3740      	adds	r7, #64	; 0x40
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40013000 	.word	0x40013000
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020000 	.word	0x40020000
 80013c4:	40020400 	.word	0x40020400
 80013c8:	40003800 	.word	0x40003800
 80013cc:	40020800 	.word	0x40020800
 80013d0:	40003c00 	.word	0x40003c00

080013d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013e4:	d10b      	bne.n	80013fe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <HAL_TIM_Base_MspInit+0x38>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	4a08      	ldr	r2, [pc, #32]	; (800140c <HAL_TIM_Base_MspInit+0x38>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6413      	str	r3, [r2, #64]	; 0x40
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_TIM_Base_MspInit+0x38>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800

08001410 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08e      	sub	sp, #56	; 0x38
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a45      	ldr	r2, [pc, #276]	; (8001544 <HAL_UART_MspInit+0x134>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d128      	bne.n	8001484 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001432:	4b45      	ldr	r3, [pc, #276]	; (8001548 <HAL_UART_MspInit+0x138>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	4a44      	ldr	r2, [pc, #272]	; (8001548 <HAL_UART_MspInit+0x138>)
 8001438:	f043 0310 	orr.w	r3, r3, #16
 800143c:	6453      	str	r3, [r2, #68]	; 0x44
 800143e:	4b42      	ldr	r3, [pc, #264]	; (8001548 <HAL_UART_MspInit+0x138>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	623b      	str	r3, [r7, #32]
 8001448:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <HAL_UART_MspInit+0x138>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a3e      	ldr	r2, [pc, #248]	; (8001548 <HAL_UART_MspInit+0x138>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b3c      	ldr	r3, [pc, #240]	; (8001548 <HAL_UART_MspInit+0x138>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	61fb      	str	r3, [r7, #28]
 8001460:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001462:	23c0      	movs	r3, #192	; 0xc0
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001472:	2307      	movs	r3, #7
 8001474:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	4619      	mov	r1, r3
 800147c:	4833      	ldr	r0, [pc, #204]	; (800154c <HAL_UART_MspInit+0x13c>)
 800147e:	f000 fb33 	bl	8001ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001482:	e05b      	b.n	800153c <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a31      	ldr	r2, [pc, #196]	; (8001550 <HAL_UART_MspInit+0x140>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d128      	bne.n	80014e0 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800148e:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <HAL_UART_MspInit+0x138>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	4a2d      	ldr	r2, [pc, #180]	; (8001548 <HAL_UART_MspInit+0x138>)
 8001494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001498:	6413      	str	r3, [r2, #64]	; 0x40
 800149a:	4b2b      	ldr	r3, [pc, #172]	; (8001548 <HAL_UART_MspInit+0x138>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	61bb      	str	r3, [r7, #24]
 80014a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	4b28      	ldr	r3, [pc, #160]	; (8001548 <HAL_UART_MspInit+0x138>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a27      	ldr	r2, [pc, #156]	; (8001548 <HAL_UART_MspInit+0x138>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b25      	ldr	r3, [pc, #148]	; (8001548 <HAL_UART_MspInit+0x138>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014be:	230c      	movs	r3, #12
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ce:	2307      	movs	r3, #7
 80014d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d6:	4619      	mov	r1, r3
 80014d8:	481e      	ldr	r0, [pc, #120]	; (8001554 <HAL_UART_MspInit+0x144>)
 80014da:	f000 fb05 	bl	8001ae8 <HAL_GPIO_Init>
}
 80014de:	e02d      	b.n	800153c <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1c      	ldr	r2, [pc, #112]	; (8001558 <HAL_UART_MspInit+0x148>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d128      	bne.n	800153c <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_UART_MspInit+0x138>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	4a16      	ldr	r2, [pc, #88]	; (8001548 <HAL_UART_MspInit+0x138>)
 80014f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f4:	6413      	str	r3, [r2, #64]	; 0x40
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <HAL_UART_MspInit+0x138>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_UART_MspInit+0x138>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a10      	ldr	r2, [pc, #64]	; (8001548 <HAL_UART_MspInit+0x138>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <HAL_UART_MspInit+0x138>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800151a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800152c:	2307      	movs	r3, #7
 800152e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001534:	4619      	mov	r1, r3
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <HAL_UART_MspInit+0x13c>)
 8001538:	f000 fad6 	bl	8001ae8 <HAL_GPIO_Init>
}
 800153c:	bf00      	nop
 800153e:	3738      	adds	r7, #56	; 0x38
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40011000 	.word	0x40011000
 8001548:	40023800 	.word	0x40023800
 800154c:	40020400 	.word	0x40020400
 8001550:	40004400 	.word	0x40004400
 8001554:	40020000 	.word	0x40020000
 8001558:	40004800 	.word	0x40004800

0800155c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001570:	4b33      	ldr	r3, [pc, #204]	; (8001640 <HAL_FMC_MspInit+0xe4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d15e      	bne.n	8001636 <HAL_FMC_MspInit+0xda>
    return;
  }
  FMC_Initialized = 1;
 8001578:	4b31      	ldr	r3, [pc, #196]	; (8001640 <HAL_FMC_MspInit+0xe4>)
 800157a:	2201      	movs	r2, #1
 800157c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800157e:	4b31      	ldr	r3, [pc, #196]	; (8001644 <HAL_FMC_MspInit+0xe8>)
 8001580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001582:	4a30      	ldr	r2, [pc, #192]	; (8001644 <HAL_FMC_MspInit+0xe8>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6393      	str	r3, [r2, #56]	; 0x38
 800158a:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <HAL_FMC_MspInit+0xe8>)
 800158c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
  PG8   ------> FMC_SDCLK
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001596:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800159a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	2303      	movs	r3, #3
 80015a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015a8:	230c      	movs	r3, #12
 80015aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	4619      	mov	r1, r3
 80015b0:	4825      	ldr	r0, [pc, #148]	; (8001648 <HAL_FMC_MspInit+0xec>)
 80015b2:	f000 fa99 	bl	8001ae8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 80015b6:	2319      	movs	r3, #25
 80015b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015c6:	230c      	movs	r3, #12
 80015c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	4619      	mov	r1, r3
 80015ce:	481f      	ldr	r0, [pc, #124]	; (800164c <HAL_FMC_MspInit+0xf0>)
 80015d0:	f000 fa8a 	bl	8001ae8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80015d4:	f248 1333 	movw	r3, #33075	; 0x8133
 80015d8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e2:	2303      	movs	r3, #3
 80015e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015e6:	230c      	movs	r3, #12
 80015e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	4619      	mov	r1, r3
 80015ee:	4818      	ldr	r0, [pc, #96]	; (8001650 <HAL_FMC_MspInit+0xf4>)
 80015f0:	f000 fa7a 	bl	8001ae8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80015f4:	f64f 7380 	movw	r3, #65408	; 0xff80
 80015f8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001606:	230c      	movs	r3, #12
 8001608:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	4619      	mov	r1, r3
 800160e:	4811      	ldr	r0, [pc, #68]	; (8001654 <HAL_FMC_MspInit+0xf8>)
 8001610:	f000 fa6a 	bl	8001ae8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001614:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001618:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001622:	2303      	movs	r3, #3
 8001624:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001626:	230c      	movs	r3, #12
 8001628:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	4619      	mov	r1, r3
 800162e:	480a      	ldr	r0, [pc, #40]	; (8001658 <HAL_FMC_MspInit+0xfc>)
 8001630:	f000 fa5a 	bl	8001ae8 <HAL_GPIO_Init>
 8001634:	e000      	b.n	8001638 <HAL_FMC_MspInit+0xdc>
    return;
 8001636:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000040 	.word	0x20000040
 8001644:	40023800 	.word	0x40023800
 8001648:	40021400 	.word	0x40021400
 800164c:	40020800 	.word	0x40020800
 8001650:	40021800 	.word	0x40021800
 8001654:	40021000 	.word	0x40021000
 8001658:	40020c00 	.word	0x40020c00

0800165c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001664:	f7ff ff7a 	bl	800155c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08c      	sub	sp, #48	; 0x30
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001680:	2200      	movs	r2, #0
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	2019      	movs	r0, #25
 8001686:	f000 f98b 	bl	80019a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800168a:	2019      	movs	r0, #25
 800168c:	f000 f9a4 	bl	80019d8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001690:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <HAL_InitTick+0xa0>)
 8001692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001694:	4a1e      	ldr	r2, [pc, #120]	; (8001710 <HAL_InitTick+0xa0>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6453      	str	r3, [r2, #68]	; 0x44
 800169c:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <HAL_InitTick+0xa0>)
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016a8:	f107 0210 	add.w	r2, r7, #16
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4611      	mov	r1, r2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f001 f9b6 	bl	8002a24 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80016b8:	f001 f9a0 	bl	80029fc <HAL_RCC_GetPCLK2Freq>
 80016bc:	4603      	mov	r3, r0
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c4:	4a13      	ldr	r2, [pc, #76]	; (8001714 <HAL_InitTick+0xa4>)
 80016c6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ca:	0c9b      	lsrs	r3, r3, #18
 80016cc:	3b01      	subs	r3, #1
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_InitTick+0xa8>)
 80016d2:	4a12      	ldr	r2, [pc, #72]	; (800171c <HAL_InitTick+0xac>)
 80016d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <HAL_InitTick+0xa8>)
 80016d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80016de:	4a0e      	ldr	r2, [pc, #56]	; (8001718 <HAL_InitTick+0xa8>)
 80016e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <HAL_InitTick+0xa8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_InitTick+0xa8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80016f0:	4809      	ldr	r0, [pc, #36]	; (8001718 <HAL_InitTick+0xa8>)
 80016f2:	f001 fe98 	bl	8003426 <HAL_TIM_Base_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d104      	bne.n	8001706 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80016fc:	4806      	ldr	r0, [pc, #24]	; (8001718 <HAL_InitTick+0xa8>)
 80016fe:	f001 fee9 	bl	80034d4 <HAL_TIM_Base_Start_IT>
 8001702:	4603      	mov	r3, r0
 8001704:	e000      	b.n	8001708 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	3730      	adds	r7, #48	; 0x30
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40023800 	.word	0x40023800
 8001714:	431bde83 	.word	0x431bde83
 8001718:	20004d8c 	.word	0x20004d8c
 800171c:	40010000 	.word	0x40010000

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <NMI_Handler+0x4>

08001726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <HardFault_Handler+0x4>

0800172c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <MemManage_Handler+0x4>

08001732 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <BusFault_Handler+0x4>

08001738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <UsageFault_Handler+0x4>

0800173e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001752:	f001 ff37 	bl	80035c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20004d8c 	.word	0x20004d8c

08001760 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <SystemInit+0x20>)
 8001766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800176a:	4a05      	ldr	r2, [pc, #20]	; (8001780 <SystemInit+0x20>)
 800176c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001788:	480d      	ldr	r0, [pc, #52]	; (80017c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800178a:	490e      	ldr	r1, [pc, #56]	; (80017c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800178c:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001790:	e002      	b.n	8001798 <LoopCopyDataInit>

08001792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001796:	3304      	adds	r3, #4

08001798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800179c:	d3f9      	bcc.n	8001792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179e:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017a0:	4c0b      	ldr	r4, [pc, #44]	; (80017d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a4:	e001      	b.n	80017aa <LoopFillZerobss>

080017a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a8:	3204      	adds	r2, #4

080017aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ac:	d3fb      	bcc.n	80017a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ae:	f7ff ffd7 	bl	8001760 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017b2:	f005 fe83 	bl	80074bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b6:	f7fe ff11 	bl	80005dc <main>
  bx  lr    
 80017ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017bc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80017c8:	08007678 	.word	0x08007678
  ldr r2, =_sbss
 80017cc:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80017d0:	20005288 	.word	0x20005288

080017d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC_IRQHandler>

080017d6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017da:	2003      	movs	r0, #3
 80017dc:	f000 f8d5 	bl	800198a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e0:	2000      	movs	r0, #0
 80017e2:	f7ff ff45 	bl	8001670 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80017e6:	f7ff fb7b 	bl	8000ee0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x20>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_IncTick+0x24>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	4a04      	ldr	r2, [pc, #16]	; (8001814 <HAL_IncTick+0x24>)
 8001802:	6013      	str	r3, [r2, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000008 	.word	0x20000008
 8001814:	20004dd8 	.word	0x20004dd8

08001818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return uwTick;
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <HAL_GetTick+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20004dd8 	.word	0x20004dd8

08001830 <__NVIC_SetPriorityGrouping>:
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <__NVIC_SetPriorityGrouping+0x40>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800184c:	4013      	ands	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <__NVIC_SetPriorityGrouping+0x44>)
 800185a:	4313      	orrs	r3, r2
 800185c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185e:	4a04      	ldr	r2, [pc, #16]	; (8001870 <__NVIC_SetPriorityGrouping+0x40>)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	60d3      	str	r3, [r2, #12]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00
 8001874:	05fa0000 	.word	0x05fa0000

08001878 <__NVIC_GetPriorityGrouping>:
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800187c:	4b04      	ldr	r3, [pc, #16]	; (8001890 <__NVIC_GetPriorityGrouping+0x18>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	f003 0307 	and.w	r3, r3, #7
}
 8001886:	4618      	mov	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_EnableIRQ>:
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	db0b      	blt.n	80018be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	f003 021f 	and.w	r2, r3, #31
 80018ac:	4907      	ldr	r1, [pc, #28]	; (80018cc <__NVIC_EnableIRQ+0x38>)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	095b      	lsrs	r3, r3, #5
 80018b4:	2001      	movs	r0, #1
 80018b6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000e100 	.word	0xe000e100

080018d0 <__NVIC_SetPriority>:
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	db0a      	blt.n	80018fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	490c      	ldr	r1, [pc, #48]	; (800191c <__NVIC_SetPriority+0x4c>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	440b      	add	r3, r1
 80018f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018f8:	e00a      	b.n	8001910 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4908      	ldr	r1, [pc, #32]	; (8001920 <__NVIC_SetPriority+0x50>)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	3b04      	subs	r3, #4
 8001908:	0112      	lsls	r2, r2, #4
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	440b      	add	r3, r1
 800190e:	761a      	strb	r2, [r3, #24]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000e100 	.word	0xe000e100
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <NVIC_EncodePriority>:
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f1c3 0307 	rsb	r3, r3, #7
 800193e:	2b04      	cmp	r3, #4
 8001940:	bf28      	it	cs
 8001942:	2304      	movcs	r3, #4
 8001944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3304      	adds	r3, #4
 800194a:	2b06      	cmp	r3, #6
 800194c:	d902      	bls.n	8001954 <NVIC_EncodePriority+0x30>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3b03      	subs	r3, #3
 8001952:	e000      	b.n	8001956 <NVIC_EncodePriority+0x32>
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	f04f 32ff 	mov.w	r2, #4294967295
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43da      	mvns	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	401a      	ands	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800196c:	f04f 31ff 	mov.w	r1, #4294967295
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	43d9      	mvns	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	4313      	orrs	r3, r2
}
 800197e:	4618      	mov	r0, r3
 8001980:	3724      	adds	r7, #36	; 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ff4c 	bl	8001830 <__NVIC_SetPriorityGrouping>
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b2:	f7ff ff61 	bl	8001878 <__NVIC_GetPriorityGrouping>
 80019b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	68b9      	ldr	r1, [r7, #8]
 80019bc:	6978      	ldr	r0, [r7, #20]
 80019be:	f7ff ffb1 	bl	8001924 <NVIC_EncodePriority>
 80019c2:	4602      	mov	r2, r0
 80019c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff ff80 	bl	80018d0 <__NVIC_SetPriority>
}
 80019d0:	bf00      	nop
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff ff54 	bl	8001894 <__NVIC_EnableIRQ>
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e069      	b.n	8001ada <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d102      	bne.n	8001a18 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff fa8c 	bl	8000f30 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d002      	beq.n	8001a2e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6819      	ldr	r1, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b2a      	ldr	r3, [pc, #168]	; (8001ae4 <HAL_DCMI_Init+0xf0>)
 8001a3a:	400b      	ands	r3, r1
 8001a3c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6819      	ldr	r1, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001a52:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001a5e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001a6a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001a76:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001a82:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b10      	cmp	r3, #16
 8001a92:	d112      	bne.n	8001aba <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	7f1b      	ldrb	r3, [r3, #28]
 8001a98:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	7f5b      	ldrb	r3, [r3, #29]
 8001a9e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001aa0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7f9b      	ldrb	r3, [r3, #30]
 8001aa6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001aa8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7fdb      	ldrb	r3, [r3, #31]
 8001ab0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001ab6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001ab8:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f042 021e 	orr.w	r2, r2, #30
 8001ac8:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	ffe0f007 	.word	0xffe0f007

08001ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b089      	sub	sp, #36	; 0x24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
 8001b06:	e175      	b.n	8001df4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b08:	2201      	movs	r2, #1
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	f040 8164 	bne.w	8001dee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d00b      	beq.n	8001b46 <HAL_GPIO_Init+0x5e>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d007      	beq.n	8001b46 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b3a:	2b11      	cmp	r3, #17
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b12      	cmp	r3, #18
 8001b44:	d130      	bne.n	8001ba8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	2203      	movs	r2, #3
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	091b      	lsrs	r3, r3, #4
 8001b92:	f003 0201 	and.w	r2, r3, #1
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_Init+0x100>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b12      	cmp	r3, #18
 8001be6:	d123      	bne.n	8001c30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	08da      	lsrs	r2, r3, #3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3208      	adds	r2, #8
 8001bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	220f      	movs	r2, #15
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	08da      	lsrs	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3208      	adds	r2, #8
 8001c2a:	69b9      	ldr	r1, [r7, #24]
 8001c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0203 	and.w	r2, r3, #3
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80be 	beq.w	8001dee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c72:	4b66      	ldr	r3, [pc, #408]	; (8001e0c <HAL_GPIO_Init+0x324>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	4a65      	ldr	r2, [pc, #404]	; (8001e0c <HAL_GPIO_Init+0x324>)
 8001c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7e:	4b63      	ldr	r3, [pc, #396]	; (8001e0c <HAL_GPIO_Init+0x324>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c8a:	4a61      	ldr	r2, [pc, #388]	; (8001e10 <HAL_GPIO_Init+0x328>)
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	3302      	adds	r3, #2
 8001c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a58      	ldr	r2, [pc, #352]	; (8001e14 <HAL_GPIO_Init+0x32c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d037      	beq.n	8001d26 <HAL_GPIO_Init+0x23e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a57      	ldr	r2, [pc, #348]	; (8001e18 <HAL_GPIO_Init+0x330>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d031      	beq.n	8001d22 <HAL_GPIO_Init+0x23a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a56      	ldr	r2, [pc, #344]	; (8001e1c <HAL_GPIO_Init+0x334>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d02b      	beq.n	8001d1e <HAL_GPIO_Init+0x236>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a55      	ldr	r2, [pc, #340]	; (8001e20 <HAL_GPIO_Init+0x338>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d025      	beq.n	8001d1a <HAL_GPIO_Init+0x232>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a54      	ldr	r2, [pc, #336]	; (8001e24 <HAL_GPIO_Init+0x33c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d01f      	beq.n	8001d16 <HAL_GPIO_Init+0x22e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a53      	ldr	r2, [pc, #332]	; (8001e28 <HAL_GPIO_Init+0x340>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d019      	beq.n	8001d12 <HAL_GPIO_Init+0x22a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a52      	ldr	r2, [pc, #328]	; (8001e2c <HAL_GPIO_Init+0x344>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d013      	beq.n	8001d0e <HAL_GPIO_Init+0x226>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a51      	ldr	r2, [pc, #324]	; (8001e30 <HAL_GPIO_Init+0x348>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00d      	beq.n	8001d0a <HAL_GPIO_Init+0x222>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a50      	ldr	r2, [pc, #320]	; (8001e34 <HAL_GPIO_Init+0x34c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d007      	beq.n	8001d06 <HAL_GPIO_Init+0x21e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a4f      	ldr	r2, [pc, #316]	; (8001e38 <HAL_GPIO_Init+0x350>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d101      	bne.n	8001d02 <HAL_GPIO_Init+0x21a>
 8001cfe:	2309      	movs	r3, #9
 8001d00:	e012      	b.n	8001d28 <HAL_GPIO_Init+0x240>
 8001d02:	230a      	movs	r3, #10
 8001d04:	e010      	b.n	8001d28 <HAL_GPIO_Init+0x240>
 8001d06:	2308      	movs	r3, #8
 8001d08:	e00e      	b.n	8001d28 <HAL_GPIO_Init+0x240>
 8001d0a:	2307      	movs	r3, #7
 8001d0c:	e00c      	b.n	8001d28 <HAL_GPIO_Init+0x240>
 8001d0e:	2306      	movs	r3, #6
 8001d10:	e00a      	b.n	8001d28 <HAL_GPIO_Init+0x240>
 8001d12:	2305      	movs	r3, #5
 8001d14:	e008      	b.n	8001d28 <HAL_GPIO_Init+0x240>
 8001d16:	2304      	movs	r3, #4
 8001d18:	e006      	b.n	8001d28 <HAL_GPIO_Init+0x240>
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e004      	b.n	8001d28 <HAL_GPIO_Init+0x240>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e002      	b.n	8001d28 <HAL_GPIO_Init+0x240>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_GPIO_Init+0x240>
 8001d26:	2300      	movs	r3, #0
 8001d28:	69fa      	ldr	r2, [r7, #28]
 8001d2a:	f002 0203 	and.w	r2, r2, #3
 8001d2e:	0092      	lsls	r2, r2, #2
 8001d30:	4093      	lsls	r3, r2
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d38:	4935      	ldr	r1, [pc, #212]	; (8001e10 <HAL_GPIO_Init+0x328>)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	3302      	adds	r3, #2
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d46:	4b3d      	ldr	r3, [pc, #244]	; (8001e3c <HAL_GPIO_Init+0x354>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d6a:	4a34      	ldr	r2, [pc, #208]	; (8001e3c <HAL_GPIO_Init+0x354>)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d70:	4b32      	ldr	r3, [pc, #200]	; (8001e3c <HAL_GPIO_Init+0x354>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d94:	4a29      	ldr	r2, [pc, #164]	; (8001e3c <HAL_GPIO_Init+0x354>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d9a:	4b28      	ldr	r3, [pc, #160]	; (8001e3c <HAL_GPIO_Init+0x354>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dbe:	4a1f      	ldr	r2, [pc, #124]	; (8001e3c <HAL_GPIO_Init+0x354>)
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <HAL_GPIO_Init+0x354>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001de8:	4a14      	ldr	r2, [pc, #80]	; (8001e3c <HAL_GPIO_Init+0x354>)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3301      	adds	r3, #1
 8001df2:	61fb      	str	r3, [r7, #28]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	2b0f      	cmp	r3, #15
 8001df8:	f67f ae86 	bls.w	8001b08 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	3724      	adds	r7, #36	; 0x24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40013800 	.word	0x40013800
 8001e14:	40020000 	.word	0x40020000
 8001e18:	40020400 	.word	0x40020400
 8001e1c:	40020800 	.word	0x40020800
 8001e20:	40020c00 	.word	0x40020c00
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40021400 	.word	0x40021400
 8001e2c:	40021800 	.word	0x40021800
 8001e30:	40021c00 	.word	0x40021c00
 8001e34:	40022000 	.word	0x40022000
 8001e38:	40022400 	.word	0x40022400
 8001e3c:	40013c00 	.word	0x40013c00

08001e40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e07f      	b.n	8001f52 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff f920 	bl	80010ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2224      	movs	r2, #36	; 0x24
 8001e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ea0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d107      	bne.n	8001eba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	e006      	b.n	8001ec8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ec6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d104      	bne.n	8001eda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ed8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6859      	ldr	r1, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <HAL_I2C_Init+0x11c>)
 8001ee6:	430b      	orrs	r3, r1
 8001ee8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ef8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691a      	ldr	r2, [r3, #16]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	ea42 0103 	orr.w	r1, r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	021a      	lsls	r2, r3, #8
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69d9      	ldr	r1, [r3, #28]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a1a      	ldr	r2, [r3, #32]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0201 	orr.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	02008000 	.word	0x02008000

08001f60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b20      	cmp	r3, #32
 8001f74:	d138      	bne.n	8001fe8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e032      	b.n	8001fea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2224      	movs	r2, #36	; 0x24
 8001f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0201 	bic.w	r2, r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6819      	ldr	r1, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e000      	b.n	8001fea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fe8:	2302      	movs	r3, #2
  }
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b085      	sub	sp, #20
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b20      	cmp	r3, #32
 800200a:	d139      	bne.n	8002080 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002016:	2302      	movs	r3, #2
 8002018:	e033      	b.n	8002082 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2224      	movs	r2, #36	; 0x24
 8002026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0201 	bic.w	r2, r2, #1
 8002038:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002048:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4313      	orrs	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0201 	orr.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e000      	b.n	8002082 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002080:	2302      	movs	r3, #2
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	4b23      	ldr	r3, [pc, #140]	; (8002128 <HAL_PWREx_EnableOverDrive+0x98>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a22      	ldr	r2, [pc, #136]	; (8002128 <HAL_PWREx_EnableOverDrive+0x98>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b20      	ldr	r3, [pc, #128]	; (8002128 <HAL_PWREx_EnableOverDrive+0x98>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020b2:	4b1e      	ldr	r3, [pc, #120]	; (800212c <HAL_PWREx_EnableOverDrive+0x9c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a1d      	ldr	r2, [pc, #116]	; (800212c <HAL_PWREx_EnableOverDrive+0x9c>)
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020be:	f7ff fbab 	bl	8001818 <HAL_GetTick>
 80020c2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020c4:	e009      	b.n	80020da <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020c6:	f7ff fba7 	bl	8001818 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020d4:	d901      	bls.n	80020da <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e022      	b.n	8002120 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020da:	4b14      	ldr	r3, [pc, #80]	; (800212c <HAL_PWREx_EnableOverDrive+0x9c>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e6:	d1ee      	bne.n	80020c6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020e8:	4b10      	ldr	r3, [pc, #64]	; (800212c <HAL_PWREx_EnableOverDrive+0x9c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0f      	ldr	r2, [pc, #60]	; (800212c <HAL_PWREx_EnableOverDrive+0x9c>)
 80020ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020f4:	f7ff fb90 	bl	8001818 <HAL_GetTick>
 80020f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020fa:	e009      	b.n	8002110 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020fc:	f7ff fb8c 	bl	8001818 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800210a:	d901      	bls.n	8002110 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e007      	b.n	8002120 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800211c:	d1ee      	bne.n	80020fc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40023800 	.word	0x40023800
 800212c:	40007000 	.word	0x40007000

08002130 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002138:	2300      	movs	r3, #0
 800213a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e291      	b.n	800266a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 8087 	beq.w	8002262 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002154:	4b96      	ldr	r3, [pc, #600]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 030c 	and.w	r3, r3, #12
 800215c:	2b04      	cmp	r3, #4
 800215e:	d00c      	beq.n	800217a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002160:	4b93      	ldr	r3, [pc, #588]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b08      	cmp	r3, #8
 800216a:	d112      	bne.n	8002192 <HAL_RCC_OscConfig+0x62>
 800216c:	4b90      	ldr	r3, [pc, #576]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002178:	d10b      	bne.n	8002192 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217a:	4b8d      	ldr	r3, [pc, #564]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d06c      	beq.n	8002260 <HAL_RCC_OscConfig+0x130>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d168      	bne.n	8002260 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e26b      	b.n	800266a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800219a:	d106      	bne.n	80021aa <HAL_RCC_OscConfig+0x7a>
 800219c:	4b84      	ldr	r3, [pc, #528]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a83      	ldr	r2, [pc, #524]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 80021a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	e02e      	b.n	8002208 <HAL_RCC_OscConfig+0xd8>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10c      	bne.n	80021cc <HAL_RCC_OscConfig+0x9c>
 80021b2:	4b7f      	ldr	r3, [pc, #508]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a7e      	ldr	r2, [pc, #504]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 80021b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	4b7c      	ldr	r3, [pc, #496]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a7b      	ldr	r2, [pc, #492]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 80021c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	e01d      	b.n	8002208 <HAL_RCC_OscConfig+0xd8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0xc0>
 80021d6:	4b76      	ldr	r3, [pc, #472]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a75      	ldr	r2, [pc, #468]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 80021dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4b73      	ldr	r3, [pc, #460]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a72      	ldr	r2, [pc, #456]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e00b      	b.n	8002208 <HAL_RCC_OscConfig+0xd8>
 80021f0:	4b6f      	ldr	r3, [pc, #444]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a6e      	ldr	r2, [pc, #440]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 80021f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	4b6c      	ldr	r3, [pc, #432]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a6b      	ldr	r2, [pc, #428]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 8002202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d013      	beq.n	8002238 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7ff fb02 	bl	8001818 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002218:	f7ff fafe 	bl	8001818 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b64      	cmp	r3, #100	; 0x64
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e21f      	b.n	800266a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	4b61      	ldr	r3, [pc, #388]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0xe8>
 8002236:	e014      	b.n	8002262 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7ff faee 	bl	8001818 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002240:	f7ff faea 	bl	8001818 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	; 0x64
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e20b      	b.n	800266a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002252:	4b57      	ldr	r3, [pc, #348]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x110>
 800225e:	e000      	b.n	8002262 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d069      	beq.n	8002342 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800226e:	4b50      	ldr	r3, [pc, #320]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00b      	beq.n	8002292 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800227a:	4b4d      	ldr	r3, [pc, #308]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b08      	cmp	r3, #8
 8002284:	d11c      	bne.n	80022c0 <HAL_RCC_OscConfig+0x190>
 8002286:	4b4a      	ldr	r3, [pc, #296]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d116      	bne.n	80022c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002292:	4b47      	ldr	r3, [pc, #284]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_RCC_OscConfig+0x17a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d001      	beq.n	80022aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e1df      	b.n	800266a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022aa:	4b41      	ldr	r3, [pc, #260]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	493d      	ldr	r1, [pc, #244]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022be:	e040      	b.n	8002342 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d023      	beq.n	8002310 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c8:	4b39      	ldr	r3, [pc, #228]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a38      	ldr	r2, [pc, #224]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7ff faa0 	bl	8001818 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022dc:	f7ff fa9c 	bl	8001818 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e1bd      	b.n	800266a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ee:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fa:	4b2d      	ldr	r3, [pc, #180]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4929      	ldr	r1, [pc, #164]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]
 800230e:	e018      	b.n	8002342 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002310:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a26      	ldr	r2, [pc, #152]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 8002316:	f023 0301 	bic.w	r3, r3, #1
 800231a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7ff fa7c 	bl	8001818 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002324:	f7ff fa78 	bl	8001818 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e199      	b.n	800266a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002336:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d038      	beq.n	80023c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d019      	beq.n	800238a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002356:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 8002358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800235a:	4a15      	ldr	r2, [pc, #84]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002362:	f7ff fa59 	bl	8001818 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800236a:	f7ff fa55 	bl	8001818 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e176      	b.n	800266a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 800237e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x23a>
 8002388:	e01a      	b.n	80023c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 800238c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800238e:	4a08      	ldr	r2, [pc, #32]	; (80023b0 <HAL_RCC_OscConfig+0x280>)
 8002390:	f023 0301 	bic.w	r3, r3, #1
 8002394:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002396:	f7ff fa3f 	bl	8001818 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800239c:	e00a      	b.n	80023b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800239e:	f7ff fa3b 	bl	8001818 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d903      	bls.n	80023b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e15c      	b.n	800266a <HAL_RCC_OscConfig+0x53a>
 80023b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b4:	4b91      	ldr	r3, [pc, #580]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 80023b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1ee      	bne.n	800239e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 80a4 	beq.w	8002516 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ce:	4b8b      	ldr	r3, [pc, #556]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10d      	bne.n	80023f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80023da:	4b88      	ldr	r3, [pc, #544]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	4a87      	ldr	r2, [pc, #540]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 80023e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e4:	6413      	str	r3, [r2, #64]	; 0x40
 80023e6:	4b85      	ldr	r3, [pc, #532]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f2:	2301      	movs	r3, #1
 80023f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023f6:	4b82      	ldr	r3, [pc, #520]	; (8002600 <HAL_RCC_OscConfig+0x4d0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d118      	bne.n	8002434 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002402:	4b7f      	ldr	r3, [pc, #508]	; (8002600 <HAL_RCC_OscConfig+0x4d0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a7e      	ldr	r2, [pc, #504]	; (8002600 <HAL_RCC_OscConfig+0x4d0>)
 8002408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240e:	f7ff fa03 	bl	8001818 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002416:	f7ff f9ff 	bl	8001818 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b64      	cmp	r3, #100	; 0x64
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e120      	b.n	800266a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002428:	4b75      	ldr	r3, [pc, #468]	; (8002600 <HAL_RCC_OscConfig+0x4d0>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d106      	bne.n	800244a <HAL_RCC_OscConfig+0x31a>
 800243c:	4b6f      	ldr	r3, [pc, #444]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002440:	4a6e      	ldr	r2, [pc, #440]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6713      	str	r3, [r2, #112]	; 0x70
 8002448:	e02d      	b.n	80024a6 <HAL_RCC_OscConfig+0x376>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0x33c>
 8002452:	4b6a      	ldr	r3, [pc, #424]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002456:	4a69      	ldr	r2, [pc, #420]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	6713      	str	r3, [r2, #112]	; 0x70
 800245e:	4b67      	ldr	r3, [pc, #412]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 8002460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002462:	4a66      	ldr	r2, [pc, #408]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 8002464:	f023 0304 	bic.w	r3, r3, #4
 8002468:	6713      	str	r3, [r2, #112]	; 0x70
 800246a:	e01c      	b.n	80024a6 <HAL_RCC_OscConfig+0x376>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b05      	cmp	r3, #5
 8002472:	d10c      	bne.n	800248e <HAL_RCC_OscConfig+0x35e>
 8002474:	4b61      	ldr	r3, [pc, #388]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 8002476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002478:	4a60      	ldr	r2, [pc, #384]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 800247a:	f043 0304 	orr.w	r3, r3, #4
 800247e:	6713      	str	r3, [r2, #112]	; 0x70
 8002480:	4b5e      	ldr	r3, [pc, #376]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 8002482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002484:	4a5d      	ldr	r2, [pc, #372]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6713      	str	r3, [r2, #112]	; 0x70
 800248c:	e00b      	b.n	80024a6 <HAL_RCC_OscConfig+0x376>
 800248e:	4b5b      	ldr	r3, [pc, #364]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002492:	4a5a      	ldr	r2, [pc, #360]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 8002494:	f023 0301 	bic.w	r3, r3, #1
 8002498:	6713      	str	r3, [r2, #112]	; 0x70
 800249a:	4b58      	ldr	r3, [pc, #352]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 800249c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249e:	4a57      	ldr	r2, [pc, #348]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 80024a0:	f023 0304 	bic.w	r3, r3, #4
 80024a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d015      	beq.n	80024da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ae:	f7ff f9b3 	bl	8001818 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b6:	f7ff f9af 	bl	8001818 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e0ce      	b.n	800266a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024cc:	4b4b      	ldr	r3, [pc, #300]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0ee      	beq.n	80024b6 <HAL_RCC_OscConfig+0x386>
 80024d8:	e014      	b.n	8002504 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024da:	f7ff f99d 	bl	8001818 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f7ff f999 	bl	8001818 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e0b8      	b.n	800266a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f8:	4b40      	ldr	r3, [pc, #256]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1ee      	bne.n	80024e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002504:	7dfb      	ldrb	r3, [r7, #23]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d105      	bne.n	8002516 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250a:	4b3c      	ldr	r3, [pc, #240]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	4a3b      	ldr	r2, [pc, #236]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 8002510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 80a4 	beq.w	8002668 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002520:	4b36      	ldr	r3, [pc, #216]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	2b08      	cmp	r3, #8
 800252a:	d06b      	beq.n	8002604 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d149      	bne.n	80025c8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002534:	4b31      	ldr	r3, [pc, #196]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a30      	ldr	r2, [pc, #192]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 800253a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800253e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7ff f96a 	bl	8001818 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002548:	f7ff f966 	bl	8001818 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e087      	b.n	800266a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255a:	4b28      	ldr	r3, [pc, #160]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69da      	ldr	r2, [r3, #28]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	019b      	lsls	r3, r3, #6
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	085b      	lsrs	r3, r3, #1
 800257e:	3b01      	subs	r3, #1
 8002580:	041b      	lsls	r3, r3, #16
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	061b      	lsls	r3, r3, #24
 800258a:	4313      	orrs	r3, r2
 800258c:	4a1b      	ldr	r2, [pc, #108]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 800258e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002592:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a18      	ldr	r2, [pc, #96]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 800259a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800259e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a0:	f7ff f93a 	bl	8001818 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a8:	f7ff f936 	bl	8001818 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e057      	b.n	800266a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0x478>
 80025c6:	e04f      	b.n	8002668 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0b      	ldr	r2, [pc, #44]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 80025ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7ff f920 	bl	8001818 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025dc:	f7ff f91c 	bl	8001818 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e03d      	b.n	800266a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ee:	4b03      	ldr	r3, [pc, #12]	; (80025fc <HAL_RCC_OscConfig+0x4cc>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x4ac>
 80025fa:	e035      	b.n	8002668 <HAL_RCC_OscConfig+0x538>
 80025fc:	40023800 	.word	0x40023800
 8002600:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002604:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <HAL_RCC_OscConfig+0x544>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d028      	beq.n	8002664 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800261c:	429a      	cmp	r2, r3
 800261e:	d121      	bne.n	8002664 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d11a      	bne.n	8002664 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002634:	4013      	ands	r3, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800263a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800263c:	4293      	cmp	r3, r2
 800263e:	d111      	bne.n	8002664 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264a:	085b      	lsrs	r3, r3, #1
 800264c:	3b01      	subs	r3, #1
 800264e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002650:	429a      	cmp	r2, r3
 8002652:	d107      	bne.n	8002664 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002660:	429a      	cmp	r2, r3
 8002662:	d001      	beq.n	8002668 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40023800 	.word	0x40023800

08002678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0d0      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002690:	4b6a      	ldr	r3, [pc, #424]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d910      	bls.n	80026c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269e:	4b67      	ldr	r3, [pc, #412]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 020f 	bic.w	r2, r3, #15
 80026a6:	4965      	ldr	r1, [pc, #404]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ae:	4b63      	ldr	r3, [pc, #396]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0b8      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d020      	beq.n	800270e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d8:	4b59      	ldr	r3, [pc, #356]	; (8002840 <HAL_RCC_ClockConfig+0x1c8>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4a58      	ldr	r2, [pc, #352]	; (8002840 <HAL_RCC_ClockConfig+0x1c8>)
 80026de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026f0:	4b53      	ldr	r3, [pc, #332]	; (8002840 <HAL_RCC_ClockConfig+0x1c8>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	4a52      	ldr	r2, [pc, #328]	; (8002840 <HAL_RCC_ClockConfig+0x1c8>)
 80026f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026fc:	4b50      	ldr	r3, [pc, #320]	; (8002840 <HAL_RCC_ClockConfig+0x1c8>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	494d      	ldr	r1, [pc, #308]	; (8002840 <HAL_RCC_ClockConfig+0x1c8>)
 800270a:	4313      	orrs	r3, r2
 800270c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d040      	beq.n	800279c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d107      	bne.n	8002732 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	4b47      	ldr	r3, [pc, #284]	; (8002840 <HAL_RCC_ClockConfig+0x1c8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d115      	bne.n	800275a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e07f      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d107      	bne.n	800274a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273a:	4b41      	ldr	r3, [pc, #260]	; (8002840 <HAL_RCC_ClockConfig+0x1c8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e073      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274a:	4b3d      	ldr	r3, [pc, #244]	; (8002840 <HAL_RCC_ClockConfig+0x1c8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e06b      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800275a:	4b39      	ldr	r3, [pc, #228]	; (8002840 <HAL_RCC_ClockConfig+0x1c8>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f023 0203 	bic.w	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	4936      	ldr	r1, [pc, #216]	; (8002840 <HAL_RCC_ClockConfig+0x1c8>)
 8002768:	4313      	orrs	r3, r2
 800276a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800276c:	f7ff f854 	bl	8001818 <HAL_GetTick>
 8002770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002772:	e00a      	b.n	800278a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002774:	f7ff f850 	bl	8001818 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e053      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278a:	4b2d      	ldr	r3, [pc, #180]	; (8002840 <HAL_RCC_ClockConfig+0x1c8>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 020c 	and.w	r2, r3, #12
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	429a      	cmp	r2, r3
 800279a:	d1eb      	bne.n	8002774 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800279c:	4b27      	ldr	r3, [pc, #156]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d210      	bcs.n	80027cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b24      	ldr	r3, [pc, #144]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 020f 	bic.w	r2, r3, #15
 80027b2:	4922      	ldr	r1, [pc, #136]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ba:	4b20      	ldr	r3, [pc, #128]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e032      	b.n	8002832 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d8:	4b19      	ldr	r3, [pc, #100]	; (8002840 <HAL_RCC_ClockConfig+0x1c8>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4916      	ldr	r1, [pc, #88]	; (8002840 <HAL_RCC_ClockConfig+0x1c8>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d009      	beq.n	800280a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027f6:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_RCC_ClockConfig+0x1c8>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	490e      	ldr	r1, [pc, #56]	; (8002840 <HAL_RCC_ClockConfig+0x1c8>)
 8002806:	4313      	orrs	r3, r2
 8002808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800280a:	f000 f821 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 800280e:	4602      	mov	r2, r0
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_RCC_ClockConfig+0x1c8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	490a      	ldr	r1, [pc, #40]	; (8002844 <HAL_RCC_ClockConfig+0x1cc>)
 800281c:	5ccb      	ldrb	r3, [r1, r3]
 800281e:	fa22 f303 	lsr.w	r3, r2, r3
 8002822:	4a09      	ldr	r2, [pc, #36]	; (8002848 <HAL_RCC_ClockConfig+0x1d0>)
 8002824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_RCC_ClockConfig+0x1d4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7fe ff20 	bl	8001670 <HAL_InitTick>

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40023c00 	.word	0x40023c00
 8002840:	40023800 	.word	0x40023800
 8002844:	08007650 	.word	0x08007650
 8002848:	20000000 	.word	0x20000000
 800284c:	20000004 	.word	0x20000004

08002850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002850:	b5b0      	push	{r4, r5, r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002856:	2100      	movs	r1, #0
 8002858:	6079      	str	r1, [r7, #4]
 800285a:	2100      	movs	r1, #0
 800285c:	60f9      	str	r1, [r7, #12]
 800285e:	2100      	movs	r1, #0
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002862:	2100      	movs	r1, #0
 8002864:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002866:	4952      	ldr	r1, [pc, #328]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002868:	6889      	ldr	r1, [r1, #8]
 800286a:	f001 010c 	and.w	r1, r1, #12
 800286e:	2908      	cmp	r1, #8
 8002870:	d00d      	beq.n	800288e <HAL_RCC_GetSysClockFreq+0x3e>
 8002872:	2908      	cmp	r1, #8
 8002874:	f200 8094 	bhi.w	80029a0 <HAL_RCC_GetSysClockFreq+0x150>
 8002878:	2900      	cmp	r1, #0
 800287a:	d002      	beq.n	8002882 <HAL_RCC_GetSysClockFreq+0x32>
 800287c:	2904      	cmp	r1, #4
 800287e:	d003      	beq.n	8002888 <HAL_RCC_GetSysClockFreq+0x38>
 8002880:	e08e      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002882:	4b4c      	ldr	r3, [pc, #304]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x164>)
 8002884:	60bb      	str	r3, [r7, #8]
      break;
 8002886:	e08e      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002888:	4b4b      	ldr	r3, [pc, #300]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x168>)
 800288a:	60bb      	str	r3, [r7, #8]
      break;
 800288c:	e08b      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800288e:	4948      	ldr	r1, [pc, #288]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002890:	6849      	ldr	r1, [r1, #4]
 8002892:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002896:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002898:	4945      	ldr	r1, [pc, #276]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x160>)
 800289a:	6849      	ldr	r1, [r1, #4]
 800289c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80028a0:	2900      	cmp	r1, #0
 80028a2:	d024      	beq.n	80028ee <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a4:	4942      	ldr	r1, [pc, #264]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80028a6:	6849      	ldr	r1, [r1, #4]
 80028a8:	0989      	lsrs	r1, r1, #6
 80028aa:	4608      	mov	r0, r1
 80028ac:	f04f 0100 	mov.w	r1, #0
 80028b0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80028b4:	f04f 0500 	mov.w	r5, #0
 80028b8:	ea00 0204 	and.w	r2, r0, r4
 80028bc:	ea01 0305 	and.w	r3, r1, r5
 80028c0:	493d      	ldr	r1, [pc, #244]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x168>)
 80028c2:	fb01 f003 	mul.w	r0, r1, r3
 80028c6:	2100      	movs	r1, #0
 80028c8:	fb01 f102 	mul.w	r1, r1, r2
 80028cc:	1844      	adds	r4, r0, r1
 80028ce:	493a      	ldr	r1, [pc, #232]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x168>)
 80028d0:	fba2 0101 	umull	r0, r1, r2, r1
 80028d4:	1863      	adds	r3, r4, r1
 80028d6:	4619      	mov	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	461a      	mov	r2, r3
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	f7fd fc96 	bl	8000210 <__aeabi_uldivmod>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4613      	mov	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	e04a      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ee:	4b30      	ldr	r3, [pc, #192]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	099b      	lsrs	r3, r3, #6
 80028f4:	461a      	mov	r2, r3
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028fe:	f04f 0100 	mov.w	r1, #0
 8002902:	ea02 0400 	and.w	r4, r2, r0
 8002906:	ea03 0501 	and.w	r5, r3, r1
 800290a:	4620      	mov	r0, r4
 800290c:	4629      	mov	r1, r5
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	014b      	lsls	r3, r1, #5
 8002918:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800291c:	0142      	lsls	r2, r0, #5
 800291e:	4610      	mov	r0, r2
 8002920:	4619      	mov	r1, r3
 8002922:	1b00      	subs	r0, r0, r4
 8002924:	eb61 0105 	sbc.w	r1, r1, r5
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	018b      	lsls	r3, r1, #6
 8002932:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002936:	0182      	lsls	r2, r0, #6
 8002938:	1a12      	subs	r2, r2, r0
 800293a:	eb63 0301 	sbc.w	r3, r3, r1
 800293e:	f04f 0000 	mov.w	r0, #0
 8002942:	f04f 0100 	mov.w	r1, #0
 8002946:	00d9      	lsls	r1, r3, #3
 8002948:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800294c:	00d0      	lsls	r0, r2, #3
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	1912      	adds	r2, r2, r4
 8002954:	eb45 0303 	adc.w	r3, r5, r3
 8002958:	f04f 0000 	mov.w	r0, #0
 800295c:	f04f 0100 	mov.w	r1, #0
 8002960:	0299      	lsls	r1, r3, #10
 8002962:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002966:	0290      	lsls	r0, r2, #10
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	461a      	mov	r2, r3
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	f7fd fc4a 	bl	8000210 <__aeabi_uldivmod>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4613      	mov	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002984:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	0c1b      	lsrs	r3, r3, #16
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	3301      	adds	r3, #1
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	fbb2 f3f3 	udiv	r3, r2, r3
 800299c:	60bb      	str	r3, [r7, #8]
      break;
 800299e:	e002      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x164>)
 80029a2:	60bb      	str	r3, [r7, #8]
      break;
 80029a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029a6:	68bb      	ldr	r3, [r7, #8]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bdb0      	pop	{r4, r5, r7, pc}
 80029b0:	40023800 	.word	0x40023800
 80029b4:	00f42400 	.word	0x00f42400
 80029b8:	017d7840 	.word	0x017d7840

080029bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	20000000 	.word	0x20000000

080029d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029d8:	f7ff fff0 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 80029dc:	4602      	mov	r2, r0
 80029de:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	0a9b      	lsrs	r3, r3, #10
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	4903      	ldr	r1, [pc, #12]	; (80029f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ea:	5ccb      	ldrb	r3, [r1, r3]
 80029ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40023800 	.word	0x40023800
 80029f8:	08007660 	.word	0x08007660

080029fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a00:	f7ff ffdc 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 8002a04:	4602      	mov	r2, r0
 8002a06:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	0b5b      	lsrs	r3, r3, #13
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	4903      	ldr	r1, [pc, #12]	; (8002a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a12:	5ccb      	ldrb	r3, [r1, r3]
 8002a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	08007660 	.word	0x08007660

08002a24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	220f      	movs	r2, #15
 8002a32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_RCC_GetClockConfig+0x5c>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 0203 	and.w	r2, r3, #3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a40:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <HAL_RCC_GetClockConfig+0x5c>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <HAL_RCC_GetClockConfig+0x5c>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002a58:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_RCC_GetClockConfig+0x5c>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	08db      	lsrs	r3, r3, #3
 8002a5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a66:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <HAL_RCC_GetClockConfig+0x60>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 020f 	and.w	r2, r3, #15
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	601a      	str	r2, [r3, #0]
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40023c00 	.word	0x40023c00

08002a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d012      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ab0:	4b69      	ldr	r3, [pc, #420]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	4a68      	ldr	r2, [pc, #416]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002aba:	6093      	str	r3, [r2, #8]
 8002abc:	4b66      	ldr	r3, [pc, #408]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac4:	4964      	ldr	r1, [pc, #400]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d017      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ae2:	4b5d      	ldr	r3, [pc, #372]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ae8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af0:	4959      	ldr	r1, [pc, #356]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b00:	d101      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b02:	2301      	movs	r3, #1
 8002b04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d017      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b1e:	4b4e      	ldr	r3, [pc, #312]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	494a      	ldr	r1, [pc, #296]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 808b 	beq.w	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b6c:	4b3a      	ldr	r3, [pc, #232]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	4a39      	ldr	r2, [pc, #228]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b76:	6413      	str	r3, [r2, #64]	; 0x40
 8002b78:	4b37      	ldr	r3, [pc, #220]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b84:	4b35      	ldr	r3, [pc, #212]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a34      	ldr	r2, [pc, #208]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b90:	f7fe fe42 	bl	8001818 <HAL_GetTick>
 8002b94:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b98:	f7fe fe3e 	bl	8001818 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	; 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e357      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002baa:	4b2c      	ldr	r3, [pc, #176]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bb6:	4b28      	ldr	r3, [pc, #160]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bbe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d035      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d02e      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bd4:	4b20      	ldr	r3, [pc, #128]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bdc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bde:	4b1e      	ldr	r3, [pc, #120]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be2:	4a1d      	ldr	r2, [pc, #116]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bea:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	4a1a      	ldr	r2, [pc, #104]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002bf6:	4a18      	ldr	r2, [pc, #96]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002bfc:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d114      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe fe06 	bl	8001818 <HAL_GetTick>
 8002c0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c10:	f7fe fe02 	bl	8001818 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e319      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c26:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0ee      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c3e:	d111      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c40:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c4c:	4b04      	ldr	r3, [pc, #16]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c4e:	400b      	ands	r3, r1
 8002c50:	4901      	ldr	r1, [pc, #4]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
 8002c56:	e00b      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40007000 	.word	0x40007000
 8002c60:	0ffffcff 	.word	0x0ffffcff
 8002c64:	4bb1      	ldr	r3, [pc, #708]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	4ab0      	ldr	r2, [pc, #704]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c6e:	6093      	str	r3, [r2, #8]
 8002c70:	4bae      	ldr	r3, [pc, #696]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c7c:	49ab      	ldr	r1, [pc, #684]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d010      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c8e:	4ba7      	ldr	r3, [pc, #668]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c94:	4aa5      	ldr	r2, [pc, #660]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002c96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c9e:	4ba3      	ldr	r3, [pc, #652]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ca0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca8:	49a0      	ldr	r1, [pc, #640]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00a      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cbc:	4b9b      	ldr	r3, [pc, #620]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cca:	4998      	ldr	r1, [pc, #608]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cde:	4b93      	ldr	r3, [pc, #588]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cec:	498f      	ldr	r1, [pc, #572]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d00:	4b8a      	ldr	r3, [pc, #552]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d0e:	4987      	ldr	r1, [pc, #540]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d22:	4b82      	ldr	r3, [pc, #520]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	497e      	ldr	r1, [pc, #504]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d44:	4b79      	ldr	r3, [pc, #484]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4a:	f023 0203 	bic.w	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	4976      	ldr	r1, [pc, #472]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00a      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d66:	4b71      	ldr	r3, [pc, #452]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6c:	f023 020c 	bic.w	r2, r3, #12
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d74:	496d      	ldr	r1, [pc, #436]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00a      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d88:	4b68      	ldr	r3, [pc, #416]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d96:	4965      	ldr	r1, [pc, #404]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002daa:	4b60      	ldr	r3, [pc, #384]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002db8:	495c      	ldr	r1, [pc, #368]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dcc:	4b57      	ldr	r3, [pc, #348]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dda:	4954      	ldr	r1, [pc, #336]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002dee:	4b4f      	ldr	r3, [pc, #316]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfc:	494b      	ldr	r1, [pc, #300]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00a      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e10:	4b46      	ldr	r3, [pc, #280]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1e:	4943      	ldr	r1, [pc, #268]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e32:	4b3e      	ldr	r3, [pc, #248]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e40:	493a      	ldr	r1, [pc, #232]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e54:	4b35      	ldr	r3, [pc, #212]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e62:	4932      	ldr	r1, [pc, #200]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d011      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e76:	4b2d      	ldr	r3, [pc, #180]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e84:	4929      	ldr	r1, [pc, #164]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e94:	d101      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e96:	2301      	movs	r3, #1
 8002e98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0308 	and.w	r3, r3, #8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eb6:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec4:	4919      	ldr	r1, [pc, #100]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00b      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ed8:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ede:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ee8:	4910      	ldr	r1, [pc, #64]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d006      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 80d9 	beq.w	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f04:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a08      	ldr	r2, [pc, #32]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f10:	f7fe fc82 	bl	8001818 <HAL_GetTick>
 8002f14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f16:	e00b      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f18:	f7fe fc7e 	bl	8001818 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b64      	cmp	r3, #100	; 0x64
 8002f24:	d904      	bls.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e197      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f30:	4b6c      	ldr	r3, [pc, #432]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1ed      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d021      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d11d      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f50:	4b64      	ldr	r3, [pc, #400]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f56:	0c1b      	lsrs	r3, r3, #16
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f5e:	4b61      	ldr	r3, [pc, #388]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f64:	0e1b      	lsrs	r3, r3, #24
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	019a      	lsls	r2, r3, #6
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	041b      	lsls	r3, r3, #16
 8002f76:	431a      	orrs	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	061b      	lsls	r3, r3, #24
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	071b      	lsls	r3, r3, #28
 8002f84:	4957      	ldr	r1, [pc, #348]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d004      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fa0:	d00a      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d02e      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fb6:	d129      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fb8:	4b4a      	ldr	r3, [pc, #296]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fbe:	0c1b      	lsrs	r3, r3, #16
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fc6:	4b47      	ldr	r3, [pc, #284]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fcc:	0f1b      	lsrs	r3, r3, #28
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	019a      	lsls	r2, r3, #6
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	041b      	lsls	r3, r3, #16
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	061b      	lsls	r3, r3, #24
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	071b      	lsls	r3, r3, #28
 8002fec:	493d      	ldr	r1, [pc, #244]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ff4:	4b3b      	ldr	r3, [pc, #236]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ffa:	f023 021f 	bic.w	r2, r3, #31
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	3b01      	subs	r3, #1
 8003004:	4937      	ldr	r1, [pc, #220]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d01d      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003018:	4b32      	ldr	r3, [pc, #200]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800301a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800301e:	0e1b      	lsrs	r3, r3, #24
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003026:	4b2f      	ldr	r3, [pc, #188]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800302c:	0f1b      	lsrs	r3, r3, #28
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	019a      	lsls	r2, r3, #6
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	041b      	lsls	r3, r3, #16
 8003040:	431a      	orrs	r2, r3
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	061b      	lsls	r3, r3, #24
 8003046:	431a      	orrs	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	071b      	lsls	r3, r3, #28
 800304c:	4925      	ldr	r1, [pc, #148]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d011      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	019a      	lsls	r2, r3, #6
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	041b      	lsls	r3, r3, #16
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	061b      	lsls	r3, r3, #24
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	071b      	lsls	r3, r3, #28
 800307c:	4919      	ldr	r1, [pc, #100]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003084:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a16      	ldr	r2, [pc, #88]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800308a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800308e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003090:	f7fe fbc2 	bl	8001818 <HAL_GetTick>
 8003094:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003098:	f7fe fbbe 	bl	8001818 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b64      	cmp	r3, #100	; 0x64
 80030a4:	d901      	bls.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e0d7      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030aa:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0f0      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	f040 80cd 	bne.w	8003258 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a08      	ldr	r2, [pc, #32]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ca:	f7fe fba5 	bl	8001818 <HAL_GetTick>
 80030ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030d0:	e00a      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030d2:	f7fe fba1 	bl	8001818 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b64      	cmp	r3, #100	; 0x64
 80030de:	d903      	bls.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e0ba      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80030e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030e8:	4b5e      	ldr	r3, [pc, #376]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030f4:	d0ed      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003106:	2b00      	cmp	r3, #0
 8003108:	d009      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003112:	2b00      	cmp	r3, #0
 8003114:	d02e      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	d12a      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800311e:	4b51      	ldr	r3, [pc, #324]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003124:	0c1b      	lsrs	r3, r3, #16
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800312c:	4b4d      	ldr	r3, [pc, #308]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800312e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003132:	0f1b      	lsrs	r3, r3, #28
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	019a      	lsls	r2, r3, #6
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	041b      	lsls	r3, r3, #16
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	061b      	lsls	r3, r3, #24
 800314c:	431a      	orrs	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	071b      	lsls	r3, r3, #28
 8003152:	4944      	ldr	r1, [pc, #272]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800315a:	4b42      	ldr	r3, [pc, #264]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800315c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003160:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	3b01      	subs	r3, #1
 800316a:	021b      	lsls	r3, r3, #8
 800316c:	493d      	ldr	r1, [pc, #244]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d022      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003184:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003188:	d11d      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800318a:	4b36      	ldr	r3, [pc, #216]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800318c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003190:	0e1b      	lsrs	r3, r3, #24
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003198:	4b32      	ldr	r3, [pc, #200]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319e:	0f1b      	lsrs	r3, r3, #28
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	019a      	lsls	r2, r3, #6
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	041b      	lsls	r3, r3, #16
 80031b2:	431a      	orrs	r2, r3
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	061b      	lsls	r3, r3, #24
 80031b8:	431a      	orrs	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	071b      	lsls	r3, r3, #28
 80031be:	4929      	ldr	r1, [pc, #164]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d028      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031d2:	4b24      	ldr	r3, [pc, #144]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d8:	0e1b      	lsrs	r3, r3, #24
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031e0:	4b20      	ldr	r3, [pc, #128]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e6:	0c1b      	lsrs	r3, r3, #16
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	019a      	lsls	r2, r3, #6
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	041b      	lsls	r3, r3, #16
 80031f8:	431a      	orrs	r2, r3
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	061b      	lsls	r3, r3, #24
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	071b      	lsls	r3, r3, #28
 8003206:	4917      	ldr	r1, [pc, #92]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003208:	4313      	orrs	r3, r2
 800320a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800320e:	4b15      	ldr	r3, [pc, #84]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003214:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321c:	4911      	ldr	r1, [pc, #68]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800321e:	4313      	orrs	r3, r2
 8003220:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003224:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0e      	ldr	r2, [pc, #56]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800322a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003230:	f7fe faf2 	bl	8001818 <HAL_GetTick>
 8003234:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003236:	e008      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003238:	f7fe faee 	bl	8001818 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	; 0x64
 8003244:	d901      	bls.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e007      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800324a:	4b06      	ldr	r3, [pc, #24]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003256:	d1ef      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3720      	adds	r7, #32
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800

08003268 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e025      	b.n	80032c8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d106      	bne.n	8003296 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7fe f9e3 	bl	800165c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2202      	movs	r2, #2
 800329a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3304      	adds	r3, #4
 80032a6:	4619      	mov	r1, r3
 80032a8:	4610      	mov	r0, r2
 80032aa:	f001 f981 	bl	80045b0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	461a      	mov	r2, r3
 80032b8:	6839      	ldr	r1, [r7, #0]
 80032ba:	f001 f9eb 	bl	8004694 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e09d      	b.n	800341e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d108      	bne.n	80032fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032f2:	d009      	beq.n	8003308 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	61da      	str	r2, [r3, #28]
 80032fa:	e005      	b.n	8003308 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7fd ff58 	bl	80011d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800333e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003348:	d902      	bls.n	8003350 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	e002      	b.n	8003356 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003354:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800335e:	d007      	beq.n	8003370 <HAL_SPI_Init+0xa0>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003368:	d002      	beq.n	8003370 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b2:	ea42 0103 	orr.w	r1, r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	0c1b      	lsrs	r3, r3, #16
 80033cc:	f003 0204 	and.w	r2, r3, #4
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80033ec:	ea42 0103 	orr.w	r1, r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69da      	ldr	r2, [r3, #28]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800340c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b082      	sub	sp, #8
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e049      	b.n	80034cc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d106      	bne.n	8003452 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7fd ffc1 	bl	80013d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2202      	movs	r2, #2
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	3304      	adds	r3, #4
 8003462:	4619      	mov	r1, r3
 8003464:	4610      	mov	r0, r2
 8003466:	f000 fabb 	bl	80039e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d001      	beq.n	80034ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e054      	b.n	8003596 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a26      	ldr	r2, [pc, #152]	; (80035a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d022      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0x80>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003516:	d01d      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0x80>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a22      	ldr	r2, [pc, #136]	; (80035a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d018      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0x80>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a21      	ldr	r2, [pc, #132]	; (80035ac <HAL_TIM_Base_Start_IT+0xd8>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d013      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0x80>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1f      	ldr	r2, [pc, #124]	; (80035b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00e      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0x80>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1e      	ldr	r2, [pc, #120]	; (80035b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d009      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0x80>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a1c      	ldr	r2, [pc, #112]	; (80035b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d004      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0x80>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a1b      	ldr	r2, [pc, #108]	; (80035bc <HAL_TIM_Base_Start_IT+0xe8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d115      	bne.n	8003580 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	4b19      	ldr	r3, [pc, #100]	; (80035c0 <HAL_TIM_Base_Start_IT+0xec>)
 800355c:	4013      	ands	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b06      	cmp	r3, #6
 8003564:	d015      	beq.n	8003592 <HAL_TIM_Base_Start_IT+0xbe>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800356c:	d011      	beq.n	8003592 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0201 	orr.w	r2, r2, #1
 800357c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800357e:	e008      	b.n	8003592 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	e000      	b.n	8003594 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003592:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40010000 	.word	0x40010000
 80035a8:	40000400 	.word	0x40000400
 80035ac:	40000800 	.word	0x40000800
 80035b0:	40000c00 	.word	0x40000c00
 80035b4:	40010400 	.word	0x40010400
 80035b8:	40014000 	.word	0x40014000
 80035bc:	40001800 	.word	0x40001800
 80035c0:	00010007 	.word	0x00010007

080035c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d122      	bne.n	8003620 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d11b      	bne.n	8003620 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f06f 0202 	mvn.w	r2, #2
 80035f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f9cc 	bl	80039a4 <HAL_TIM_IC_CaptureCallback>
 800360c:	e005      	b.n	800361a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f9be 	bl	8003990 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f9cf 	bl	80039b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b04      	cmp	r3, #4
 800362c:	d122      	bne.n	8003674 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b04      	cmp	r3, #4
 800363a:	d11b      	bne.n	8003674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0204 	mvn.w	r2, #4
 8003644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2202      	movs	r2, #2
 800364a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f9a2 	bl	80039a4 <HAL_TIM_IC_CaptureCallback>
 8003660:	e005      	b.n	800366e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f994 	bl	8003990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f9a5 	bl	80039b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b08      	cmp	r3, #8
 8003680:	d122      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b08      	cmp	r3, #8
 800368e:	d11b      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0208 	mvn.w	r2, #8
 8003698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2204      	movs	r2, #4
 800369e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f978 	bl	80039a4 <HAL_TIM_IC_CaptureCallback>
 80036b4:	e005      	b.n	80036c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f96a 	bl	8003990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f97b 	bl	80039b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0310 	and.w	r3, r3, #16
 80036d2:	2b10      	cmp	r3, #16
 80036d4:	d122      	bne.n	800371c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	2b10      	cmp	r3, #16
 80036e2:	d11b      	bne.n	800371c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0210 	mvn.w	r2, #16
 80036ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2208      	movs	r2, #8
 80036f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f94e 	bl	80039a4 <HAL_TIM_IC_CaptureCallback>
 8003708:	e005      	b.n	8003716 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f940 	bl	8003990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f951 	bl	80039b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b01      	cmp	r3, #1
 8003728:	d10e      	bne.n	8003748 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b01      	cmp	r3, #1
 8003736:	d107      	bne.n	8003748 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0201 	mvn.w	r2, #1
 8003740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd fbb4 	bl	8000eb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003752:	2b80      	cmp	r3, #128	; 0x80
 8003754:	d10e      	bne.n	8003774 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003760:	2b80      	cmp	r3, #128	; 0x80
 8003762:	d107      	bne.n	8003774 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800376c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fb08 	bl	8003d84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003782:	d10e      	bne.n	80037a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378e:	2b80      	cmp	r3, #128	; 0x80
 8003790:	d107      	bne.n	80037a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800379a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 fafb 	bl	8003d98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ac:	2b40      	cmp	r3, #64	; 0x40
 80037ae:	d10e      	bne.n	80037ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ba:	2b40      	cmp	r3, #64	; 0x40
 80037bc:	d107      	bne.n	80037ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f8ff 	bl	80039cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b20      	cmp	r3, #32
 80037da:	d10e      	bne.n	80037fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	d107      	bne.n	80037fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f06f 0220 	mvn.w	r2, #32
 80037f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fabb 	bl	8003d70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_TIM_ConfigClockSource+0x18>
 8003818:	2302      	movs	r3, #2
 800381a:	e0b3      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x180>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	4b55      	ldr	r3, [pc, #340]	; (800398c <HAL_TIM_ConfigClockSource+0x188>)
 8003838:	4013      	ands	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003842:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003854:	d03e      	beq.n	80038d4 <HAL_TIM_ConfigClockSource+0xd0>
 8003856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800385a:	f200 8087 	bhi.w	800396c <HAL_TIM_ConfigClockSource+0x168>
 800385e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003862:	f000 8085 	beq.w	8003970 <HAL_TIM_ConfigClockSource+0x16c>
 8003866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386a:	d87f      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x168>
 800386c:	2b70      	cmp	r3, #112	; 0x70
 800386e:	d01a      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0xa2>
 8003870:	2b70      	cmp	r3, #112	; 0x70
 8003872:	d87b      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x168>
 8003874:	2b60      	cmp	r3, #96	; 0x60
 8003876:	d050      	beq.n	800391a <HAL_TIM_ConfigClockSource+0x116>
 8003878:	2b60      	cmp	r3, #96	; 0x60
 800387a:	d877      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x168>
 800387c:	2b50      	cmp	r3, #80	; 0x50
 800387e:	d03c      	beq.n	80038fa <HAL_TIM_ConfigClockSource+0xf6>
 8003880:	2b50      	cmp	r3, #80	; 0x50
 8003882:	d873      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x168>
 8003884:	2b40      	cmp	r3, #64	; 0x40
 8003886:	d058      	beq.n	800393a <HAL_TIM_ConfigClockSource+0x136>
 8003888:	2b40      	cmp	r3, #64	; 0x40
 800388a:	d86f      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x168>
 800388c:	2b30      	cmp	r3, #48	; 0x30
 800388e:	d064      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x156>
 8003890:	2b30      	cmp	r3, #48	; 0x30
 8003892:	d86b      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x168>
 8003894:	2b20      	cmp	r3, #32
 8003896:	d060      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x156>
 8003898:	2b20      	cmp	r3, #32
 800389a:	d867      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x168>
 800389c:	2b00      	cmp	r3, #0
 800389e:	d05c      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x156>
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	d05a      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80038a4:	e062      	b.n	800396c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6899      	ldr	r1, [r3, #8]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f000 f9ad 	bl	8003c14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	609a      	str	r2, [r3, #8]
      break;
 80038d2:	e04e      	b.n	8003972 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6818      	ldr	r0, [r3, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	6899      	ldr	r1, [r3, #8]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f000 f996 	bl	8003c14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038f6:	609a      	str	r2, [r3, #8]
      break;
 80038f8:	e03b      	b.n	8003972 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6818      	ldr	r0, [r3, #0]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	6859      	ldr	r1, [r3, #4]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	461a      	mov	r2, r3
 8003908:	f000 f90a 	bl	8003b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2150      	movs	r1, #80	; 0x50
 8003912:	4618      	mov	r0, r3
 8003914:	f000 f963 	bl	8003bde <TIM_ITRx_SetConfig>
      break;
 8003918:	e02b      	b.n	8003972 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	6859      	ldr	r1, [r3, #4]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	461a      	mov	r2, r3
 8003928:	f000 f929 	bl	8003b7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2160      	movs	r1, #96	; 0x60
 8003932:	4618      	mov	r0, r3
 8003934:	f000 f953 	bl	8003bde <TIM_ITRx_SetConfig>
      break;
 8003938:	e01b      	b.n	8003972 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	6859      	ldr	r1, [r3, #4]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	461a      	mov	r2, r3
 8003948:	f000 f8ea 	bl	8003b20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2140      	movs	r1, #64	; 0x40
 8003952:	4618      	mov	r0, r3
 8003954:	f000 f943 	bl	8003bde <TIM_ITRx_SetConfig>
      break;
 8003958:	e00b      	b.n	8003972 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4619      	mov	r1, r3
 8003964:	4610      	mov	r0, r2
 8003966:	f000 f93a 	bl	8003bde <TIM_ITRx_SetConfig>
        break;
 800396a:	e002      	b.n	8003972 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800396c:	bf00      	nop
 800396e:	e000      	b.n	8003972 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003970:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	fffeff88 	.word	0xfffeff88

08003990 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a40      	ldr	r2, [pc, #256]	; (8003af4 <TIM_Base_SetConfig+0x114>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d013      	beq.n	8003a20 <TIM_Base_SetConfig+0x40>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039fe:	d00f      	beq.n	8003a20 <TIM_Base_SetConfig+0x40>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a3d      	ldr	r2, [pc, #244]	; (8003af8 <TIM_Base_SetConfig+0x118>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00b      	beq.n	8003a20 <TIM_Base_SetConfig+0x40>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a3c      	ldr	r2, [pc, #240]	; (8003afc <TIM_Base_SetConfig+0x11c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d007      	beq.n	8003a20 <TIM_Base_SetConfig+0x40>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a3b      	ldr	r2, [pc, #236]	; (8003b00 <TIM_Base_SetConfig+0x120>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d003      	beq.n	8003a20 <TIM_Base_SetConfig+0x40>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a3a      	ldr	r2, [pc, #232]	; (8003b04 <TIM_Base_SetConfig+0x124>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d108      	bne.n	8003a32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a2f      	ldr	r2, [pc, #188]	; (8003af4 <TIM_Base_SetConfig+0x114>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d02b      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a40:	d027      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a2c      	ldr	r2, [pc, #176]	; (8003af8 <TIM_Base_SetConfig+0x118>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d023      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a2b      	ldr	r2, [pc, #172]	; (8003afc <TIM_Base_SetConfig+0x11c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01f      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a2a      	ldr	r2, [pc, #168]	; (8003b00 <TIM_Base_SetConfig+0x120>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d01b      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a29      	ldr	r2, [pc, #164]	; (8003b04 <TIM_Base_SetConfig+0x124>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d017      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a28      	ldr	r2, [pc, #160]	; (8003b08 <TIM_Base_SetConfig+0x128>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d013      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a27      	ldr	r2, [pc, #156]	; (8003b0c <TIM_Base_SetConfig+0x12c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00f      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a26      	ldr	r2, [pc, #152]	; (8003b10 <TIM_Base_SetConfig+0x130>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00b      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a25      	ldr	r2, [pc, #148]	; (8003b14 <TIM_Base_SetConfig+0x134>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d007      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a24      	ldr	r2, [pc, #144]	; (8003b18 <TIM_Base_SetConfig+0x138>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d003      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a23      	ldr	r2, [pc, #140]	; (8003b1c <TIM_Base_SetConfig+0x13c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d108      	bne.n	8003aa4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a0a      	ldr	r2, [pc, #40]	; (8003af4 <TIM_Base_SetConfig+0x114>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d003      	beq.n	8003ad8 <TIM_Base_SetConfig+0xf8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a0c      	ldr	r2, [pc, #48]	; (8003b04 <TIM_Base_SetConfig+0x124>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d103      	bne.n	8003ae0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	615a      	str	r2, [r3, #20]
}
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40010000 	.word	0x40010000
 8003af8:	40000400 	.word	0x40000400
 8003afc:	40000800 	.word	0x40000800
 8003b00:	40000c00 	.word	0x40000c00
 8003b04:	40010400 	.word	0x40010400
 8003b08:	40014000 	.word	0x40014000
 8003b0c:	40014400 	.word	0x40014400
 8003b10:	40014800 	.word	0x40014800
 8003b14:	40001800 	.word	0x40001800
 8003b18:	40001c00 	.word	0x40001c00
 8003b1c:	40002000 	.word	0x40002000

08003b20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	f023 0201 	bic.w	r2, r3, #1
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f023 030a 	bic.w	r3, r3, #10
 8003b5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	621a      	str	r2, [r3, #32]
}
 8003b72:	bf00      	nop
 8003b74:	371c      	adds	r7, #28
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b087      	sub	sp, #28
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	f023 0210 	bic.w	r2, r3, #16
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ba8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	031b      	lsls	r3, r3, #12
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	621a      	str	r2, [r3, #32]
}
 8003bd2:	bf00      	nop
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b085      	sub	sp, #20
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f043 0307 	orr.w	r3, r3, #7
 8003c00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	609a      	str	r2, [r3, #8]
}
 8003c08:	bf00      	nop
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
 8003c20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	021a      	lsls	r2, r3, #8
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	609a      	str	r2, [r3, #8]
}
 8003c48:	bf00      	nop
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e06d      	b.n	8003d48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a30      	ldr	r2, [pc, #192]	; (8003d54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d004      	beq.n	8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a2f      	ldr	r2, [pc, #188]	; (8003d58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d108      	bne.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ca6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a20      	ldr	r2, [pc, #128]	; (8003d54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d022      	beq.n	8003d1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cde:	d01d      	beq.n	8003d1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a1d      	ldr	r2, [pc, #116]	; (8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d018      	beq.n	8003d1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1c      	ldr	r2, [pc, #112]	; (8003d60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d013      	beq.n	8003d1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a1a      	ldr	r2, [pc, #104]	; (8003d64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00e      	beq.n	8003d1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a15      	ldr	r2, [pc, #84]	; (8003d58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d009      	beq.n	8003d1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a16      	ldr	r2, [pc, #88]	; (8003d68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d004      	beq.n	8003d1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a15      	ldr	r2, [pc, #84]	; (8003d6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d10c      	bne.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	40010000 	.word	0x40010000
 8003d58:	40010400 	.word	0x40010400
 8003d5c:	40000400 	.word	0x40000400
 8003d60:	40000800 	.word	0x40000800
 8003d64:	40000c00 	.word	0x40000c00
 8003d68:	40014000 	.word	0x40014000
 8003d6c:	40001800 	.word	0x40001800

08003d70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e040      	b.n	8003e40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7fd fb1e 	bl	8001410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2224      	movs	r2, #36	; 0x24
 8003dd8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0201 	bic.w	r2, r2, #1
 8003de8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f82c 	bl	8003e48 <UART_SetConfig>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e022      	b.n	8003e40 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fa82 	bl	800430c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0201 	orr.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 fb09 	bl	8004450 <UART_CheckIdleState>
 8003e3e:	4603      	mov	r3, r0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	4ba7      	ldr	r3, [pc, #668]	; (8004110 <UART_SetConfig+0x2c8>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6812      	ldr	r2, [r2, #0]
 8003e7a:	6979      	ldr	r1, [r7, #20]
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a95      	ldr	r2, [pc, #596]	; (8004114 <UART_SetConfig+0x2cc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d120      	bne.n	8003f06 <UART_SetConfig+0xbe>
 8003ec4:	4b94      	ldr	r3, [pc, #592]	; (8004118 <UART_SetConfig+0x2d0>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	d816      	bhi.n	8003f00 <UART_SetConfig+0xb8>
 8003ed2:	a201      	add	r2, pc, #4	; (adr r2, 8003ed8 <UART_SetConfig+0x90>)
 8003ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed8:	08003ee9 	.word	0x08003ee9
 8003edc:	08003ef5 	.word	0x08003ef5
 8003ee0:	08003eef 	.word	0x08003eef
 8003ee4:	08003efb 	.word	0x08003efb
 8003ee8:	2301      	movs	r3, #1
 8003eea:	77fb      	strb	r3, [r7, #31]
 8003eec:	e14f      	b.n	800418e <UART_SetConfig+0x346>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	77fb      	strb	r3, [r7, #31]
 8003ef2:	e14c      	b.n	800418e <UART_SetConfig+0x346>
 8003ef4:	2304      	movs	r3, #4
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e149      	b.n	800418e <UART_SetConfig+0x346>
 8003efa:	2308      	movs	r3, #8
 8003efc:	77fb      	strb	r3, [r7, #31]
 8003efe:	e146      	b.n	800418e <UART_SetConfig+0x346>
 8003f00:	2310      	movs	r3, #16
 8003f02:	77fb      	strb	r3, [r7, #31]
 8003f04:	e143      	b.n	800418e <UART_SetConfig+0x346>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a84      	ldr	r2, [pc, #528]	; (800411c <UART_SetConfig+0x2d4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d132      	bne.n	8003f76 <UART_SetConfig+0x12e>
 8003f10:	4b81      	ldr	r3, [pc, #516]	; (8004118 <UART_SetConfig+0x2d0>)
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	2b0c      	cmp	r3, #12
 8003f1c:	d828      	bhi.n	8003f70 <UART_SetConfig+0x128>
 8003f1e:	a201      	add	r2, pc, #4	; (adr r2, 8003f24 <UART_SetConfig+0xdc>)
 8003f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f24:	08003f59 	.word	0x08003f59
 8003f28:	08003f71 	.word	0x08003f71
 8003f2c:	08003f71 	.word	0x08003f71
 8003f30:	08003f71 	.word	0x08003f71
 8003f34:	08003f65 	.word	0x08003f65
 8003f38:	08003f71 	.word	0x08003f71
 8003f3c:	08003f71 	.word	0x08003f71
 8003f40:	08003f71 	.word	0x08003f71
 8003f44:	08003f5f 	.word	0x08003f5f
 8003f48:	08003f71 	.word	0x08003f71
 8003f4c:	08003f71 	.word	0x08003f71
 8003f50:	08003f71 	.word	0x08003f71
 8003f54:	08003f6b 	.word	0x08003f6b
 8003f58:	2300      	movs	r3, #0
 8003f5a:	77fb      	strb	r3, [r7, #31]
 8003f5c:	e117      	b.n	800418e <UART_SetConfig+0x346>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	77fb      	strb	r3, [r7, #31]
 8003f62:	e114      	b.n	800418e <UART_SetConfig+0x346>
 8003f64:	2304      	movs	r3, #4
 8003f66:	77fb      	strb	r3, [r7, #31]
 8003f68:	e111      	b.n	800418e <UART_SetConfig+0x346>
 8003f6a:	2308      	movs	r3, #8
 8003f6c:	77fb      	strb	r3, [r7, #31]
 8003f6e:	e10e      	b.n	800418e <UART_SetConfig+0x346>
 8003f70:	2310      	movs	r3, #16
 8003f72:	77fb      	strb	r3, [r7, #31]
 8003f74:	e10b      	b.n	800418e <UART_SetConfig+0x346>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a69      	ldr	r2, [pc, #420]	; (8004120 <UART_SetConfig+0x2d8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d120      	bne.n	8003fc2 <UART_SetConfig+0x17a>
 8003f80:	4b65      	ldr	r3, [pc, #404]	; (8004118 <UART_SetConfig+0x2d0>)
 8003f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f86:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f8a:	2b30      	cmp	r3, #48	; 0x30
 8003f8c:	d013      	beq.n	8003fb6 <UART_SetConfig+0x16e>
 8003f8e:	2b30      	cmp	r3, #48	; 0x30
 8003f90:	d814      	bhi.n	8003fbc <UART_SetConfig+0x174>
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	d009      	beq.n	8003faa <UART_SetConfig+0x162>
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	d810      	bhi.n	8003fbc <UART_SetConfig+0x174>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <UART_SetConfig+0x15c>
 8003f9e:	2b10      	cmp	r3, #16
 8003fa0:	d006      	beq.n	8003fb0 <UART_SetConfig+0x168>
 8003fa2:	e00b      	b.n	8003fbc <UART_SetConfig+0x174>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	77fb      	strb	r3, [r7, #31]
 8003fa8:	e0f1      	b.n	800418e <UART_SetConfig+0x346>
 8003faa:	2302      	movs	r3, #2
 8003fac:	77fb      	strb	r3, [r7, #31]
 8003fae:	e0ee      	b.n	800418e <UART_SetConfig+0x346>
 8003fb0:	2304      	movs	r3, #4
 8003fb2:	77fb      	strb	r3, [r7, #31]
 8003fb4:	e0eb      	b.n	800418e <UART_SetConfig+0x346>
 8003fb6:	2308      	movs	r3, #8
 8003fb8:	77fb      	strb	r3, [r7, #31]
 8003fba:	e0e8      	b.n	800418e <UART_SetConfig+0x346>
 8003fbc:	2310      	movs	r3, #16
 8003fbe:	77fb      	strb	r3, [r7, #31]
 8003fc0:	e0e5      	b.n	800418e <UART_SetConfig+0x346>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a57      	ldr	r2, [pc, #348]	; (8004124 <UART_SetConfig+0x2dc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d120      	bne.n	800400e <UART_SetConfig+0x1c6>
 8003fcc:	4b52      	ldr	r3, [pc, #328]	; (8004118 <UART_SetConfig+0x2d0>)
 8003fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003fd6:	2bc0      	cmp	r3, #192	; 0xc0
 8003fd8:	d013      	beq.n	8004002 <UART_SetConfig+0x1ba>
 8003fda:	2bc0      	cmp	r3, #192	; 0xc0
 8003fdc:	d814      	bhi.n	8004008 <UART_SetConfig+0x1c0>
 8003fde:	2b80      	cmp	r3, #128	; 0x80
 8003fe0:	d009      	beq.n	8003ff6 <UART_SetConfig+0x1ae>
 8003fe2:	2b80      	cmp	r3, #128	; 0x80
 8003fe4:	d810      	bhi.n	8004008 <UART_SetConfig+0x1c0>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <UART_SetConfig+0x1a8>
 8003fea:	2b40      	cmp	r3, #64	; 0x40
 8003fec:	d006      	beq.n	8003ffc <UART_SetConfig+0x1b4>
 8003fee:	e00b      	b.n	8004008 <UART_SetConfig+0x1c0>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	77fb      	strb	r3, [r7, #31]
 8003ff4:	e0cb      	b.n	800418e <UART_SetConfig+0x346>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	77fb      	strb	r3, [r7, #31]
 8003ffa:	e0c8      	b.n	800418e <UART_SetConfig+0x346>
 8003ffc:	2304      	movs	r3, #4
 8003ffe:	77fb      	strb	r3, [r7, #31]
 8004000:	e0c5      	b.n	800418e <UART_SetConfig+0x346>
 8004002:	2308      	movs	r3, #8
 8004004:	77fb      	strb	r3, [r7, #31]
 8004006:	e0c2      	b.n	800418e <UART_SetConfig+0x346>
 8004008:	2310      	movs	r3, #16
 800400a:	77fb      	strb	r3, [r7, #31]
 800400c:	e0bf      	b.n	800418e <UART_SetConfig+0x346>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a45      	ldr	r2, [pc, #276]	; (8004128 <UART_SetConfig+0x2e0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d125      	bne.n	8004064 <UART_SetConfig+0x21c>
 8004018:	4b3f      	ldr	r3, [pc, #252]	; (8004118 <UART_SetConfig+0x2d0>)
 800401a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004022:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004026:	d017      	beq.n	8004058 <UART_SetConfig+0x210>
 8004028:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800402c:	d817      	bhi.n	800405e <UART_SetConfig+0x216>
 800402e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004032:	d00b      	beq.n	800404c <UART_SetConfig+0x204>
 8004034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004038:	d811      	bhi.n	800405e <UART_SetConfig+0x216>
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <UART_SetConfig+0x1fe>
 800403e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004042:	d006      	beq.n	8004052 <UART_SetConfig+0x20a>
 8004044:	e00b      	b.n	800405e <UART_SetConfig+0x216>
 8004046:	2300      	movs	r3, #0
 8004048:	77fb      	strb	r3, [r7, #31]
 800404a:	e0a0      	b.n	800418e <UART_SetConfig+0x346>
 800404c:	2302      	movs	r3, #2
 800404e:	77fb      	strb	r3, [r7, #31]
 8004050:	e09d      	b.n	800418e <UART_SetConfig+0x346>
 8004052:	2304      	movs	r3, #4
 8004054:	77fb      	strb	r3, [r7, #31]
 8004056:	e09a      	b.n	800418e <UART_SetConfig+0x346>
 8004058:	2308      	movs	r3, #8
 800405a:	77fb      	strb	r3, [r7, #31]
 800405c:	e097      	b.n	800418e <UART_SetConfig+0x346>
 800405e:	2310      	movs	r3, #16
 8004060:	77fb      	strb	r3, [r7, #31]
 8004062:	e094      	b.n	800418e <UART_SetConfig+0x346>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a30      	ldr	r2, [pc, #192]	; (800412c <UART_SetConfig+0x2e4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d125      	bne.n	80040ba <UART_SetConfig+0x272>
 800406e:	4b2a      	ldr	r3, [pc, #168]	; (8004118 <UART_SetConfig+0x2d0>)
 8004070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004074:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004078:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800407c:	d017      	beq.n	80040ae <UART_SetConfig+0x266>
 800407e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004082:	d817      	bhi.n	80040b4 <UART_SetConfig+0x26c>
 8004084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004088:	d00b      	beq.n	80040a2 <UART_SetConfig+0x25a>
 800408a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800408e:	d811      	bhi.n	80040b4 <UART_SetConfig+0x26c>
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <UART_SetConfig+0x254>
 8004094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004098:	d006      	beq.n	80040a8 <UART_SetConfig+0x260>
 800409a:	e00b      	b.n	80040b4 <UART_SetConfig+0x26c>
 800409c:	2301      	movs	r3, #1
 800409e:	77fb      	strb	r3, [r7, #31]
 80040a0:	e075      	b.n	800418e <UART_SetConfig+0x346>
 80040a2:	2302      	movs	r3, #2
 80040a4:	77fb      	strb	r3, [r7, #31]
 80040a6:	e072      	b.n	800418e <UART_SetConfig+0x346>
 80040a8:	2304      	movs	r3, #4
 80040aa:	77fb      	strb	r3, [r7, #31]
 80040ac:	e06f      	b.n	800418e <UART_SetConfig+0x346>
 80040ae:	2308      	movs	r3, #8
 80040b0:	77fb      	strb	r3, [r7, #31]
 80040b2:	e06c      	b.n	800418e <UART_SetConfig+0x346>
 80040b4:	2310      	movs	r3, #16
 80040b6:	77fb      	strb	r3, [r7, #31]
 80040b8:	e069      	b.n	800418e <UART_SetConfig+0x346>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a1c      	ldr	r2, [pc, #112]	; (8004130 <UART_SetConfig+0x2e8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d137      	bne.n	8004134 <UART_SetConfig+0x2ec>
 80040c4:	4b14      	ldr	r3, [pc, #80]	; (8004118 <UART_SetConfig+0x2d0>)
 80040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80040ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040d2:	d017      	beq.n	8004104 <UART_SetConfig+0x2bc>
 80040d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040d8:	d817      	bhi.n	800410a <UART_SetConfig+0x2c2>
 80040da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040de:	d00b      	beq.n	80040f8 <UART_SetConfig+0x2b0>
 80040e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e4:	d811      	bhi.n	800410a <UART_SetConfig+0x2c2>
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <UART_SetConfig+0x2aa>
 80040ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ee:	d006      	beq.n	80040fe <UART_SetConfig+0x2b6>
 80040f0:	e00b      	b.n	800410a <UART_SetConfig+0x2c2>
 80040f2:	2300      	movs	r3, #0
 80040f4:	77fb      	strb	r3, [r7, #31]
 80040f6:	e04a      	b.n	800418e <UART_SetConfig+0x346>
 80040f8:	2302      	movs	r3, #2
 80040fa:	77fb      	strb	r3, [r7, #31]
 80040fc:	e047      	b.n	800418e <UART_SetConfig+0x346>
 80040fe:	2304      	movs	r3, #4
 8004100:	77fb      	strb	r3, [r7, #31]
 8004102:	e044      	b.n	800418e <UART_SetConfig+0x346>
 8004104:	2308      	movs	r3, #8
 8004106:	77fb      	strb	r3, [r7, #31]
 8004108:	e041      	b.n	800418e <UART_SetConfig+0x346>
 800410a:	2310      	movs	r3, #16
 800410c:	77fb      	strb	r3, [r7, #31]
 800410e:	e03e      	b.n	800418e <UART_SetConfig+0x346>
 8004110:	efff69f3 	.word	0xefff69f3
 8004114:	40011000 	.word	0x40011000
 8004118:	40023800 	.word	0x40023800
 800411c:	40004400 	.word	0x40004400
 8004120:	40004800 	.word	0x40004800
 8004124:	40004c00 	.word	0x40004c00
 8004128:	40005000 	.word	0x40005000
 800412c:	40011400 	.word	0x40011400
 8004130:	40007800 	.word	0x40007800
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a71      	ldr	r2, [pc, #452]	; (8004300 <UART_SetConfig+0x4b8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d125      	bne.n	800418a <UART_SetConfig+0x342>
 800413e:	4b71      	ldr	r3, [pc, #452]	; (8004304 <UART_SetConfig+0x4bc>)
 8004140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004144:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004148:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800414c:	d017      	beq.n	800417e <UART_SetConfig+0x336>
 800414e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004152:	d817      	bhi.n	8004184 <UART_SetConfig+0x33c>
 8004154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004158:	d00b      	beq.n	8004172 <UART_SetConfig+0x32a>
 800415a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800415e:	d811      	bhi.n	8004184 <UART_SetConfig+0x33c>
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <UART_SetConfig+0x324>
 8004164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004168:	d006      	beq.n	8004178 <UART_SetConfig+0x330>
 800416a:	e00b      	b.n	8004184 <UART_SetConfig+0x33c>
 800416c:	2300      	movs	r3, #0
 800416e:	77fb      	strb	r3, [r7, #31]
 8004170:	e00d      	b.n	800418e <UART_SetConfig+0x346>
 8004172:	2302      	movs	r3, #2
 8004174:	77fb      	strb	r3, [r7, #31]
 8004176:	e00a      	b.n	800418e <UART_SetConfig+0x346>
 8004178:	2304      	movs	r3, #4
 800417a:	77fb      	strb	r3, [r7, #31]
 800417c:	e007      	b.n	800418e <UART_SetConfig+0x346>
 800417e:	2308      	movs	r3, #8
 8004180:	77fb      	strb	r3, [r7, #31]
 8004182:	e004      	b.n	800418e <UART_SetConfig+0x346>
 8004184:	2310      	movs	r3, #16
 8004186:	77fb      	strb	r3, [r7, #31]
 8004188:	e001      	b.n	800418e <UART_SetConfig+0x346>
 800418a:	2310      	movs	r3, #16
 800418c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004196:	d15b      	bne.n	8004250 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004198:	7ffb      	ldrb	r3, [r7, #31]
 800419a:	2b08      	cmp	r3, #8
 800419c:	d827      	bhi.n	80041ee <UART_SetConfig+0x3a6>
 800419e:	a201      	add	r2, pc, #4	; (adr r2, 80041a4 <UART_SetConfig+0x35c>)
 80041a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a4:	080041c9 	.word	0x080041c9
 80041a8:	080041d1 	.word	0x080041d1
 80041ac:	080041d9 	.word	0x080041d9
 80041b0:	080041ef 	.word	0x080041ef
 80041b4:	080041df 	.word	0x080041df
 80041b8:	080041ef 	.word	0x080041ef
 80041bc:	080041ef 	.word	0x080041ef
 80041c0:	080041ef 	.word	0x080041ef
 80041c4:	080041e7 	.word	0x080041e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041c8:	f7fe fc04 	bl	80029d4 <HAL_RCC_GetPCLK1Freq>
 80041cc:	61b8      	str	r0, [r7, #24]
        break;
 80041ce:	e013      	b.n	80041f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041d0:	f7fe fc14 	bl	80029fc <HAL_RCC_GetPCLK2Freq>
 80041d4:	61b8      	str	r0, [r7, #24]
        break;
 80041d6:	e00f      	b.n	80041f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041d8:	4b4b      	ldr	r3, [pc, #300]	; (8004308 <UART_SetConfig+0x4c0>)
 80041da:	61bb      	str	r3, [r7, #24]
        break;
 80041dc:	e00c      	b.n	80041f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041de:	f7fe fb37 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 80041e2:	61b8      	str	r0, [r7, #24]
        break;
 80041e4:	e008      	b.n	80041f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ea:	61bb      	str	r3, [r7, #24]
        break;
 80041ec:	e004      	b.n	80041f8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	77bb      	strb	r3, [r7, #30]
        break;
 80041f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d074      	beq.n	80042e8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	005a      	lsls	r2, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	085b      	lsrs	r3, r3, #1
 8004208:	441a      	add	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004212:	b29b      	uxth	r3, r3
 8004214:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	2b0f      	cmp	r3, #15
 800421a:	d916      	bls.n	800424a <UART_SetConfig+0x402>
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004222:	d212      	bcs.n	800424a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	b29b      	uxth	r3, r3
 8004228:	f023 030f 	bic.w	r3, r3, #15
 800422c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	085b      	lsrs	r3, r3, #1
 8004232:	b29b      	uxth	r3, r3
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	b29a      	uxth	r2, r3
 800423a:	89fb      	ldrh	r3, [r7, #14]
 800423c:	4313      	orrs	r3, r2
 800423e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	89fa      	ldrh	r2, [r7, #14]
 8004246:	60da      	str	r2, [r3, #12]
 8004248:	e04e      	b.n	80042e8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	77bb      	strb	r3, [r7, #30]
 800424e:	e04b      	b.n	80042e8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004250:	7ffb      	ldrb	r3, [r7, #31]
 8004252:	2b08      	cmp	r3, #8
 8004254:	d827      	bhi.n	80042a6 <UART_SetConfig+0x45e>
 8004256:	a201      	add	r2, pc, #4	; (adr r2, 800425c <UART_SetConfig+0x414>)
 8004258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425c:	08004281 	.word	0x08004281
 8004260:	08004289 	.word	0x08004289
 8004264:	08004291 	.word	0x08004291
 8004268:	080042a7 	.word	0x080042a7
 800426c:	08004297 	.word	0x08004297
 8004270:	080042a7 	.word	0x080042a7
 8004274:	080042a7 	.word	0x080042a7
 8004278:	080042a7 	.word	0x080042a7
 800427c:	0800429f 	.word	0x0800429f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004280:	f7fe fba8 	bl	80029d4 <HAL_RCC_GetPCLK1Freq>
 8004284:	61b8      	str	r0, [r7, #24]
        break;
 8004286:	e013      	b.n	80042b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004288:	f7fe fbb8 	bl	80029fc <HAL_RCC_GetPCLK2Freq>
 800428c:	61b8      	str	r0, [r7, #24]
        break;
 800428e:	e00f      	b.n	80042b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004290:	4b1d      	ldr	r3, [pc, #116]	; (8004308 <UART_SetConfig+0x4c0>)
 8004292:	61bb      	str	r3, [r7, #24]
        break;
 8004294:	e00c      	b.n	80042b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004296:	f7fe fadb 	bl	8002850 <HAL_RCC_GetSysClockFreq>
 800429a:	61b8      	str	r0, [r7, #24]
        break;
 800429c:	e008      	b.n	80042b0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800429e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042a2:	61bb      	str	r3, [r7, #24]
        break;
 80042a4:	e004      	b.n	80042b0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	77bb      	strb	r3, [r7, #30]
        break;
 80042ae:	bf00      	nop
    }

    if (pclk != 0U)
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d018      	beq.n	80042e8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	085a      	lsrs	r2, r3, #1
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	441a      	add	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	2b0f      	cmp	r3, #15
 80042d0:	d908      	bls.n	80042e4 <UART_SetConfig+0x49c>
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d8:	d204      	bcs.n	80042e4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	60da      	str	r2, [r3, #12]
 80042e2:	e001      	b.n	80042e8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80042f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3720      	adds	r7, #32
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40007c00 	.word	0x40007c00
 8004304:	40023800 	.word	0x40023800
 8004308:	00f42400 	.word	0x00f42400

0800430c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00a      	beq.n	800437a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00a      	beq.n	80043be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01a      	beq.n	8004422 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800440a:	d10a      	bne.n	8004422 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	605a      	str	r2, [r3, #4]
  }
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af02      	add	r7, sp, #8
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004460:	f7fd f9da 	bl	8001818 <HAL_GetTick>
 8004464:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b08      	cmp	r3, #8
 8004472:	d10e      	bne.n	8004492 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004474:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f817 	bl	80044b6 <UART_WaitOnFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e00d      	b.n	80044ae <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2220      	movs	r2, #32
 8004496:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2220      	movs	r2, #32
 800449c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b084      	sub	sp, #16
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	603b      	str	r3, [r7, #0]
 80044c2:	4613      	mov	r3, r2
 80044c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c6:	e05e      	b.n	8004586 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ce:	d05a      	beq.n	8004586 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d0:	f7fd f9a2 	bl	8001818 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d302      	bcc.n	80044e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d11b      	bne.n	800451e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044f4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0201 	bic.w	r2, r2, #1
 8004504:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2220      	movs	r2, #32
 800450a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2220      	movs	r2, #32
 8004510:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e043      	b.n	80045a6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b00      	cmp	r3, #0
 800452a:	d02c      	beq.n	8004586 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800453a:	d124      	bne.n	8004586 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004544:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004554:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0201 	bic.w	r2, r2, #1
 8004564:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2220      	movs	r2, #32
 800456a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2220      	movs	r2, #32
 8004570:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2220      	movs	r2, #32
 8004576:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e00f      	b.n	80045a6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69da      	ldr	r2, [r3, #28]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	4013      	ands	r3, r2
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	429a      	cmp	r2, r3
 8004594:	bf0c      	ite	eq
 8004596:	2301      	moveq	r3, #1
 8004598:	2300      	movne	r3, #0
 800459a:	b2db      	uxtb	r3, r3
 800459c:	461a      	mov	r2, r3
 800459e:	79fb      	ldrb	r3, [r7, #7]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d091      	beq.n	80044c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80045ba:	2300      	movs	r3, #0
 80045bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80045be:	2300      	movs	r3, #0
 80045c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d027      	beq.n	800461a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4b2f      	ldr	r3, [pc, #188]	; (8004690 <FMC_SDRAM_Init+0xe0>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80045e0:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80045e6:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80045ec:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80045f2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80045f8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80045fe:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8004604:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800460a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	e032      	b.n	8004680 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004626:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004630:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8004636:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	4b12      	ldr	r3, [pc, #72]	; (8004690 <FMC_SDRAM_Init+0xe0>)
 8004648:	4013      	ands	r3, r2
 800464a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004654:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800465a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8004660:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8004666:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800466c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	4313      	orrs	r3, r2
 8004672:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	ffff8000 	.word	0xffff8000

08004694 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004694:	b480      	push	{r7}
 8004696:	b087      	sub	sp, #28
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80046a4:	2300      	movs	r3, #0
 80046a6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d02e      	beq.n	800470c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80046ba:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80046ca:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	3b01      	subs	r3, #1
 80046d2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80046d4:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	3b01      	subs	r3, #1
 80046dc:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80046de:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	3b01      	subs	r3, #1
 80046e6:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80046e8:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80046f2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	3b01      	subs	r3, #1
 80046fa:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80046fc:	4313      	orrs	r3, r2
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	4313      	orrs	r3, r2
 8004702:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	609a      	str	r2, [r3, #8]
 800470a:	e039      	b.n	8004780 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	4b1e      	ldr	r3, [pc, #120]	; (8004790 <FMC_SDRAM_Timing_Init+0xfc>)
 8004716:	4013      	ands	r3, r2
 8004718:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	3b01      	subs	r3, #1
 8004720:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	3b01      	subs	r3, #1
 8004728:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800472a:	4313      	orrs	r3, r2
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	4313      	orrs	r3, r2
 8004730:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800473e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	3b01      	subs	r3, #1
 800474c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800474e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	3b01      	subs	r3, #1
 8004756:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8004758:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	3b01      	subs	r3, #1
 8004760:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8004762:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	3b01      	subs	r3, #1
 800476a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800476c:	4313      	orrs	r3, r2
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	4313      	orrs	r3, r2
 8004772:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	697a      	ldr	r2, [r7, #20]
 8004778:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	371c      	adds	r7, #28
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	ff0f0fff 	.word	0xff0f0fff

08004794 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004798:	4904      	ldr	r1, [pc, #16]	; (80047ac <MX_FATFS_Init+0x18>)
 800479a:	4805      	ldr	r0, [pc, #20]	; (80047b0 <MX_FATFS_Init+0x1c>)
 800479c:	f000 f8b0 	bl	8004900 <FATFS_LinkDriver>
 80047a0:	4603      	mov	r3, r0
 80047a2:	461a      	mov	r2, r3
 80047a4:	4b03      	ldr	r3, [pc, #12]	; (80047b4 <MX_FATFS_Init+0x20>)
 80047a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80047a8:	bf00      	nop
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	20004ddc 	.word	0x20004ddc
 80047b0:	2000000c 	.word	0x2000000c
 80047b4:	20004de0 	.word	0x20004de0

080047b8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80047c2:	4b06      	ldr	r3, [pc, #24]	; (80047dc <USER_initialize+0x24>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80047c8:	4b04      	ldr	r3, [pc, #16]	; (80047dc <USER_initialize+0x24>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	20000009 	.word	0x20000009

080047e0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	4603      	mov	r3, r0
 80047e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80047ea:	4b06      	ldr	r3, [pc, #24]	; (8004804 <USER_status+0x24>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	701a      	strb	r2, [r3, #0]
    return Stat;
 80047f0:	4b04      	ldr	r3, [pc, #16]	; (8004804 <USER_status+0x24>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	20000009 	.word	0x20000009

08004808 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	607a      	str	r2, [r7, #4]
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	4603      	mov	r3, r0
 8004816:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004818:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004826:	b480      	push	{r7}
 8004828:	b085      	sub	sp, #20
 800482a:	af00      	add	r7, sp, #0
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
 8004830:	603b      	str	r3, [r7, #0]
 8004832:	4603      	mov	r3, r0
 8004834:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8004836:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	4603      	mov	r3, r0
 800484c:	603a      	str	r2, [r7, #0]
 800484e:	71fb      	strb	r3, [r7, #7]
 8004850:	460b      	mov	r3, r1
 8004852:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	73fb      	strb	r3, [r7, #15]
    return res;
 8004858:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800485a:	4618      	mov	r0, r3
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
	...

08004868 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	4613      	mov	r3, r2
 8004874:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004876:	2301      	movs	r3, #1
 8004878:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800487a:	2300      	movs	r3, #0
 800487c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800487e:	4b1f      	ldr	r3, [pc, #124]	; (80048fc <FATFS_LinkDriverEx+0x94>)
 8004880:	7a5b      	ldrb	r3, [r3, #9]
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d131      	bne.n	80048ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004888:	4b1c      	ldr	r3, [pc, #112]	; (80048fc <FATFS_LinkDriverEx+0x94>)
 800488a:	7a5b      	ldrb	r3, [r3, #9]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	4b1a      	ldr	r3, [pc, #104]	; (80048fc <FATFS_LinkDriverEx+0x94>)
 8004892:	2100      	movs	r1, #0
 8004894:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004896:	4b19      	ldr	r3, [pc, #100]	; (80048fc <FATFS_LinkDriverEx+0x94>)
 8004898:	7a5b      	ldrb	r3, [r3, #9]
 800489a:	b2db      	uxtb	r3, r3
 800489c:	4a17      	ldr	r2, [pc, #92]	; (80048fc <FATFS_LinkDriverEx+0x94>)
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80048a6:	4b15      	ldr	r3, [pc, #84]	; (80048fc <FATFS_LinkDriverEx+0x94>)
 80048a8:	7a5b      	ldrb	r3, [r3, #9]
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	461a      	mov	r2, r3
 80048ae:	4b13      	ldr	r3, [pc, #76]	; (80048fc <FATFS_LinkDriverEx+0x94>)
 80048b0:	4413      	add	r3, r2
 80048b2:	79fa      	ldrb	r2, [r7, #7]
 80048b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80048b6:	4b11      	ldr	r3, [pc, #68]	; (80048fc <FATFS_LinkDriverEx+0x94>)
 80048b8:	7a5b      	ldrb	r3, [r3, #9]
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	b2d1      	uxtb	r1, r2
 80048c0:	4a0e      	ldr	r2, [pc, #56]	; (80048fc <FATFS_LinkDriverEx+0x94>)
 80048c2:	7251      	strb	r1, [r2, #9]
 80048c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80048c6:	7dbb      	ldrb	r3, [r7, #22]
 80048c8:	3330      	adds	r3, #48	; 0x30
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	3301      	adds	r3, #1
 80048d4:	223a      	movs	r2, #58	; 0x3a
 80048d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	3302      	adds	r3, #2
 80048dc:	222f      	movs	r2, #47	; 0x2f
 80048de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	3303      	adds	r3, #3
 80048e4:	2200      	movs	r2, #0
 80048e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	371c      	adds	r7, #28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20000044 	.word	0x20000044

08004900 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800490a:	2200      	movs	r2, #0
 800490c:	6839      	ldr	r1, [r7, #0]
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff ffaa 	bl	8004868 <FATFS_LinkDriverEx>
 8004914:	4603      	mov	r3, r0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800491e:	b480      	push	{r7}
 8004920:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004922:	bf00      	nop
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004932:	f3ef 8305 	mrs	r3, IPSR
 8004936:	60bb      	str	r3, [r7, #8]
  return(result);
 8004938:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10f      	bne.n	800495e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800493e:	f3ef 8310 	mrs	r3, PRIMASK
 8004942:	607b      	str	r3, [r7, #4]
  return(result);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d105      	bne.n	8004956 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800494a:	f3ef 8311 	mrs	r3, BASEPRI
 800494e:	603b      	str	r3, [r7, #0]
  return(result);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d007      	beq.n	8004966 <osKernelInitialize+0x3a>
 8004956:	4b0e      	ldr	r3, [pc, #56]	; (8004990 <osKernelInitialize+0x64>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b02      	cmp	r3, #2
 800495c:	d103      	bne.n	8004966 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800495e:	f06f 0305 	mvn.w	r3, #5
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	e00c      	b.n	8004980 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004966:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <osKernelInitialize+0x64>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d105      	bne.n	800497a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800496e:	4b08      	ldr	r3, [pc, #32]	; (8004990 <osKernelInitialize+0x64>)
 8004970:	2201      	movs	r2, #1
 8004972:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004974:	2300      	movs	r3, #0
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	e002      	b.n	8004980 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800497a:	f04f 33ff 	mov.w	r3, #4294967295
 800497e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004980:	68fb      	ldr	r3, [r7, #12]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	20000050 	.word	0x20000050

08004994 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800499a:	f3ef 8305 	mrs	r3, IPSR
 800499e:	60bb      	str	r3, [r7, #8]
  return(result);
 80049a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10f      	bne.n	80049c6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049a6:	f3ef 8310 	mrs	r3, PRIMASK
 80049aa:	607b      	str	r3, [r7, #4]
  return(result);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d105      	bne.n	80049be <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049b2:	f3ef 8311 	mrs	r3, BASEPRI
 80049b6:	603b      	str	r3, [r7, #0]
  return(result);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d007      	beq.n	80049ce <osKernelStart+0x3a>
 80049be:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <osKernelStart+0x68>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d103      	bne.n	80049ce <osKernelStart+0x3a>
    stat = osErrorISR;
 80049c6:	f06f 0305 	mvn.w	r3, #5
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	e010      	b.n	80049f0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80049ce:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <osKernelStart+0x68>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d109      	bne.n	80049ea <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80049d6:	f7ff ffa2 	bl	800491e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80049da:	4b08      	ldr	r3, [pc, #32]	; (80049fc <osKernelStart+0x68>)
 80049dc:	2202      	movs	r2, #2
 80049de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80049e0:	f001 f8b4 	bl	8005b4c <vTaskStartScheduler>
      stat = osOK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	e002      	b.n	80049f0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80049ea:	f04f 33ff 	mov.w	r3, #4294967295
 80049ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80049f0:	68fb      	ldr	r3, [r7, #12]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20000050 	.word	0x20000050

08004a00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b090      	sub	sp, #64	; 0x40
 8004a04:	af04      	add	r7, sp, #16
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a10:	f3ef 8305 	mrs	r3, IPSR
 8004a14:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a16:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f040 808f 	bne.w	8004b3c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a22:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d105      	bne.n	8004a36 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a2a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a2e:	617b      	str	r3, [r7, #20]
  return(result);
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <osThreadNew+0x3e>
 8004a36:	4b44      	ldr	r3, [pc, #272]	; (8004b48 <osThreadNew+0x148>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d07e      	beq.n	8004b3c <osThreadNew+0x13c>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d07b      	beq.n	8004b3c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004a44:	2380      	movs	r3, #128	; 0x80
 8004a46:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004a48:	2318      	movs	r3, #24
 8004a4a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004a50:	f04f 33ff 	mov.w	r3, #4294967295
 8004a54:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d045      	beq.n	8004ae8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <osThreadNew+0x6a>
        name = attr->name;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d008      	beq.n	8004a90 <osThreadNew+0x90>
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	2b38      	cmp	r3, #56	; 0x38
 8004a82:	d805      	bhi.n	8004a90 <osThreadNew+0x90>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <osThreadNew+0x94>
        return (NULL);
 8004a90:	2300      	movs	r3, #0
 8004a92:	e054      	b.n	8004b3e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	089b      	lsrs	r3, r3, #2
 8004aa2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00e      	beq.n	8004aca <osThreadNew+0xca>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	2b5b      	cmp	r3, #91	; 0x5b
 8004ab2:	d90a      	bls.n	8004aca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d006      	beq.n	8004aca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <osThreadNew+0xca>
        mem = 1;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	623b      	str	r3, [r7, #32]
 8004ac8:	e010      	b.n	8004aec <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10c      	bne.n	8004aec <osThreadNew+0xec>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d108      	bne.n	8004aec <osThreadNew+0xec>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d104      	bne.n	8004aec <osThreadNew+0xec>
          mem = 0;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	623b      	str	r3, [r7, #32]
 8004ae6:	e001      	b.n	8004aec <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d110      	bne.n	8004b14 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004afa:	9202      	str	r2, [sp, #8]
 8004afc:	9301      	str	r3, [sp, #4]
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 fe3f 	bl	800578c <xTaskCreateStatic>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	613b      	str	r3, [r7, #16]
 8004b12:	e013      	b.n	8004b3c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d110      	bne.n	8004b3c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	f107 0310 	add.w	r3, r7, #16
 8004b22:	9301      	str	r3, [sp, #4]
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f000 fe90 	bl	8005852 <xTaskCreate>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d001      	beq.n	8004b3c <osThreadNew+0x13c>
          hTask = NULL;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004b3c:	693b      	ldr	r3, [r7, #16]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3730      	adds	r7, #48	; 0x30
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20000050 	.word	0x20000050

08004b4c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b54:	f3ef 8305 	mrs	r3, IPSR
 8004b58:	613b      	str	r3, [r7, #16]
  return(result);
 8004b5a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10f      	bne.n	8004b80 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b60:	f3ef 8310 	mrs	r3, PRIMASK
 8004b64:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d105      	bne.n	8004b78 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b6c:	f3ef 8311 	mrs	r3, BASEPRI
 8004b70:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d007      	beq.n	8004b88 <osDelay+0x3c>
 8004b78:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <osDelay+0x58>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d103      	bne.n	8004b88 <osDelay+0x3c>
    stat = osErrorISR;
 8004b80:	f06f 0305 	mvn.w	r3, #5
 8004b84:	617b      	str	r3, [r7, #20]
 8004b86:	e007      	b.n	8004b98 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 ffa4 	bl	8005ae0 <vTaskDelay>
    }
  }

  return (stat);
 8004b98:	697b      	ldr	r3, [r7, #20]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000050 	.word	0x20000050

08004ba8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4a07      	ldr	r2, [pc, #28]	; (8004bd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004bb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	4a06      	ldr	r2, [pc, #24]	; (8004bd8 <vApplicationGetIdleTaskMemory+0x30>)
 8004bbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2280      	movs	r2, #128	; 0x80
 8004bc4:	601a      	str	r2, [r3, #0]
}
 8004bc6:	bf00      	nop
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20000054 	.word	0x20000054
 8004bd8:	200000b0 	.word	0x200000b0

08004bdc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4a07      	ldr	r2, [pc, #28]	; (8004c08 <vApplicationGetTimerTaskMemory+0x2c>)
 8004bec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	4a06      	ldr	r2, [pc, #24]	; (8004c0c <vApplicationGetTimerTaskMemory+0x30>)
 8004bf2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bfa:	601a      	str	r2, [r3, #0]
}
 8004bfc:	bf00      	nop
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	200002b0 	.word	0x200002b0
 8004c0c:	2000030c 	.word	0x2000030c

08004c10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f103 0208 	add.w	r2, r3, #8
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f04f 32ff 	mov.w	r2, #4294967295
 8004c28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f103 0208 	add.w	r2, r3, #8
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f103 0208 	add.w	r2, r3, #8
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b085      	sub	sp, #20
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
 8004c72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	601a      	str	r2, [r3, #0]
}
 8004ca6:	bf00      	nop
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b085      	sub	sp, #20
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
 8004cba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc8:	d103      	bne.n	8004cd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	e00c      	b.n	8004cec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	e002      	b.n	8004ce0 <vListInsert+0x2e>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d2f6      	bcs.n	8004cda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	601a      	str	r2, [r3, #0]
}
 8004d18:	bf00      	nop
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6892      	ldr	r2, [r2, #8]
 8004d3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6852      	ldr	r2, [r2, #4]
 8004d44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d103      	bne.n	8004d58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	1e5a      	subs	r2, r3, #1
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10c      	bne.n	8004da6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d90:	b672      	cpsid	i
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	b662      	cpsie	i
 8004da0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004da2:	bf00      	nop
 8004da4:	e7fe      	b.n	8004da4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004da6:	f002 f879 	bl	8006e9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db2:	68f9      	ldr	r1, [r7, #12]
 8004db4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004db6:	fb01 f303 	mul.w	r3, r1, r3
 8004dba:	441a      	add	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	68f9      	ldr	r1, [r7, #12]
 8004dda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ddc:	fb01 f303 	mul.w	r3, r1, r3
 8004de0:	441a      	add	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	22ff      	movs	r2, #255	; 0xff
 8004dea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	22ff      	movs	r2, #255	; 0xff
 8004df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d114      	bne.n	8004e26 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01a      	beq.n	8004e3a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	3310      	adds	r3, #16
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f001 f937 	bl	800607c <xTaskRemoveFromEventList>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d012      	beq.n	8004e3a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e14:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <xQueueGenericReset+0xd0>)
 8004e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	e009      	b.n	8004e3a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	3310      	adds	r3, #16
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff fef0 	bl	8004c10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	3324      	adds	r3, #36	; 0x24
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff feeb 	bl	8004c10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e3a:	f002 f863 	bl	8006f04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e3e:	2301      	movs	r3, #1
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	e000ed04 	.word	0xe000ed04

08004e4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08e      	sub	sp, #56	; 0x38
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10c      	bne.n	8004e7a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	b672      	cpsid	i
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	b662      	cpsie	i
 8004e74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e76:	bf00      	nop
 8004e78:	e7fe      	b.n	8004e78 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10c      	bne.n	8004e9a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	b672      	cpsid	i
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	b662      	cpsie	i
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e96:	bf00      	nop
 8004e98:	e7fe      	b.n	8004e98 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <xQueueGenericCreateStatic+0x5a>
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <xQueueGenericCreateStatic+0x5e>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e000      	b.n	8004eac <xQueueGenericCreateStatic+0x60>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10c      	bne.n	8004eca <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb4:	b672      	cpsid	i
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	b662      	cpsie	i
 8004ec4:	623b      	str	r3, [r7, #32]
}
 8004ec6:	bf00      	nop
 8004ec8:	e7fe      	b.n	8004ec8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d102      	bne.n	8004ed6 <xQueueGenericCreateStatic+0x8a>
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <xQueueGenericCreateStatic+0x8e>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <xQueueGenericCreateStatic+0x90>
 8004eda:	2300      	movs	r3, #0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10c      	bne.n	8004efa <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	b672      	cpsid	i
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	b662      	cpsie	i
 8004ef4:	61fb      	str	r3, [r7, #28]
}
 8004ef6:	bf00      	nop
 8004ef8:	e7fe      	b.n	8004ef8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004efa:	2350      	movs	r3, #80	; 0x50
 8004efc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2b50      	cmp	r3, #80	; 0x50
 8004f02:	d00c      	beq.n	8004f1e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f08:	b672      	cpsid	i
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	b662      	cpsie	i
 8004f18:	61bb      	str	r3, [r7, #24]
}
 8004f1a:	bf00      	nop
 8004f1c:	e7fe      	b.n	8004f1c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004f1e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00d      	beq.n	8004f46 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f32:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	68b9      	ldr	r1, [r7, #8]
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 f805 	bl	8004f50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3730      	adds	r7, #48	; 0x30
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d103      	bne.n	8004f6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	e002      	b.n	8004f72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f7e:	2101      	movs	r1, #1
 8004f80:	69b8      	ldr	r0, [r7, #24]
 8004f82:	f7ff fef9 	bl	8004d78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	78fa      	ldrb	r2, [r7, #3]
 8004f8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f8e:	bf00      	nop
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
	...

08004f98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08e      	sub	sp, #56	; 0x38
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10c      	bne.n	8004fce <xQueueGenericSend+0x36>
	__asm volatile
 8004fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb8:	b672      	cpsid	i
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	b662      	cpsie	i
 8004fc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004fca:	bf00      	nop
 8004fcc:	e7fe      	b.n	8004fcc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d103      	bne.n	8004fdc <xQueueGenericSend+0x44>
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <xQueueGenericSend+0x48>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <xQueueGenericSend+0x4a>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10c      	bne.n	8005000 <xQueueGenericSend+0x68>
	__asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	b672      	cpsid	i
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	b662      	cpsie	i
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ffc:	bf00      	nop
 8004ffe:	e7fe      	b.n	8004ffe <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d103      	bne.n	800500e <xQueueGenericSend+0x76>
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500a:	2b01      	cmp	r3, #1
 800500c:	d101      	bne.n	8005012 <xQueueGenericSend+0x7a>
 800500e:	2301      	movs	r3, #1
 8005010:	e000      	b.n	8005014 <xQueueGenericSend+0x7c>
 8005012:	2300      	movs	r3, #0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10c      	bne.n	8005032 <xQueueGenericSend+0x9a>
	__asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501c:	b672      	cpsid	i
 800501e:	f383 8811 	msr	BASEPRI, r3
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	b662      	cpsie	i
 800502c:	623b      	str	r3, [r7, #32]
}
 800502e:	bf00      	nop
 8005030:	e7fe      	b.n	8005030 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005032:	f001 f9e9 	bl	8006408 <xTaskGetSchedulerState>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d102      	bne.n	8005042 <xQueueGenericSend+0xaa>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <xQueueGenericSend+0xae>
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <xQueueGenericSend+0xb0>
 8005046:	2300      	movs	r3, #0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10c      	bne.n	8005066 <xQueueGenericSend+0xce>
	__asm volatile
 800504c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005050:	b672      	cpsid	i
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	b662      	cpsie	i
 8005060:	61fb      	str	r3, [r7, #28]
}
 8005062:	bf00      	nop
 8005064:	e7fe      	b.n	8005064 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005066:	f001 ff19 	bl	8006e9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005072:	429a      	cmp	r2, r3
 8005074:	d302      	bcc.n	800507c <xQueueGenericSend+0xe4>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b02      	cmp	r3, #2
 800507a:	d129      	bne.n	80050d0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	68b9      	ldr	r1, [r7, #8]
 8005080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005082:	f000 fa15 	bl	80054b0 <prvCopyDataToQueue>
 8005086:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	2b00      	cmp	r3, #0
 800508e:	d010      	beq.n	80050b2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005092:	3324      	adds	r3, #36	; 0x24
 8005094:	4618      	mov	r0, r3
 8005096:	f000 fff1 	bl	800607c <xTaskRemoveFromEventList>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d013      	beq.n	80050c8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80050a0:	4b3f      	ldr	r3, [pc, #252]	; (80051a0 <xQueueGenericSend+0x208>)
 80050a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	e00a      	b.n	80050c8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80050b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d007      	beq.n	80050c8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80050b8:	4b39      	ldr	r3, [pc, #228]	; (80051a0 <xQueueGenericSend+0x208>)
 80050ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80050c8:	f001 ff1c 	bl	8006f04 <vPortExitCritical>
				return pdPASS;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e063      	b.n	8005198 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d103      	bne.n	80050de <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050d6:	f001 ff15 	bl	8006f04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80050da:	2300      	movs	r3, #0
 80050dc:	e05c      	b.n	8005198 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d106      	bne.n	80050f2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050e4:	f107 0314 	add.w	r3, r7, #20
 80050e8:	4618      	mov	r0, r3
 80050ea:	f001 f82d 	bl	8006148 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050ee:	2301      	movs	r3, #1
 80050f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050f2:	f001 ff07 	bl	8006f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050f6:	f000 fd93 	bl	8005c20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050fa:	f001 fecf 	bl	8006e9c <vPortEnterCritical>
 80050fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005100:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005104:	b25b      	sxtb	r3, r3
 8005106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510a:	d103      	bne.n	8005114 <xQueueGenericSend+0x17c>
 800510c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800511a:	b25b      	sxtb	r3, r3
 800511c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005120:	d103      	bne.n	800512a <xQueueGenericSend+0x192>
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800512a:	f001 feeb 	bl	8006f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800512e:	1d3a      	adds	r2, r7, #4
 8005130:	f107 0314 	add.w	r3, r7, #20
 8005134:	4611      	mov	r1, r2
 8005136:	4618      	mov	r0, r3
 8005138:	f001 f81c 	bl	8006174 <xTaskCheckForTimeOut>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d124      	bne.n	800518c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005142:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005144:	f000 faac 	bl	80056a0 <prvIsQueueFull>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d018      	beq.n	8005180 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	3310      	adds	r3, #16
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	4611      	mov	r1, r2
 8005156:	4618      	mov	r0, r3
 8005158:	f000 ff3c 	bl	8005fd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800515c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800515e:	f000 fa37 	bl	80055d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005162:	f000 fd6b 	bl	8005c3c <xTaskResumeAll>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	f47f af7c 	bne.w	8005066 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800516e:	4b0c      	ldr	r3, [pc, #48]	; (80051a0 <xQueueGenericSend+0x208>)
 8005170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	e772      	b.n	8005066 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005180:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005182:	f000 fa25 	bl	80055d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005186:	f000 fd59 	bl	8005c3c <xTaskResumeAll>
 800518a:	e76c      	b.n	8005066 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800518c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800518e:	f000 fa1f 	bl	80055d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005192:	f000 fd53 	bl	8005c3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005196:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005198:	4618      	mov	r0, r3
 800519a:	3738      	adds	r7, #56	; 0x38
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	e000ed04 	.word	0xe000ed04

080051a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08e      	sub	sp, #56	; 0x38
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
 80051b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10c      	bne.n	80051d6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80051bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c0:	b672      	cpsid	i
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	b662      	cpsie	i
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80051d2:	bf00      	nop
 80051d4:	e7fe      	b.n	80051d4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d103      	bne.n	80051e4 <xQueueGenericSendFromISR+0x40>
 80051dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <xQueueGenericSendFromISR+0x44>
 80051e4:	2301      	movs	r3, #1
 80051e6:	e000      	b.n	80051ea <xQueueGenericSendFromISR+0x46>
 80051e8:	2300      	movs	r3, #0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10c      	bne.n	8005208 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	b672      	cpsid	i
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	b662      	cpsie	i
 8005202:	623b      	str	r3, [r7, #32]
}
 8005204:	bf00      	nop
 8005206:	e7fe      	b.n	8005206 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d103      	bne.n	8005216 <xQueueGenericSendFromISR+0x72>
 800520e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005212:	2b01      	cmp	r3, #1
 8005214:	d101      	bne.n	800521a <xQueueGenericSendFromISR+0x76>
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <xQueueGenericSendFromISR+0x78>
 800521a:	2300      	movs	r3, #0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10c      	bne.n	800523a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	b672      	cpsid	i
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	b662      	cpsie	i
 8005234:	61fb      	str	r3, [r7, #28]
}
 8005236:	bf00      	nop
 8005238:	e7fe      	b.n	8005238 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800523a:	f001 ff17 	bl	800706c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800523e:	f3ef 8211 	mrs	r2, BASEPRI
 8005242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005246:	b672      	cpsid	i
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	b662      	cpsie	i
 8005256:	61ba      	str	r2, [r7, #24]
 8005258:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800525a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800525c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005266:	429a      	cmp	r2, r3
 8005268:	d302      	bcc.n	8005270 <xQueueGenericSendFromISR+0xcc>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b02      	cmp	r3, #2
 800526e:	d12c      	bne.n	80052ca <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005272:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	68b9      	ldr	r1, [r7, #8]
 800527e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005280:	f000 f916 	bl	80054b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005284:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528c:	d112      	bne.n	80052b4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	2b00      	cmp	r3, #0
 8005294:	d016      	beq.n	80052c4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005298:	3324      	adds	r3, #36	; 0x24
 800529a:	4618      	mov	r0, r3
 800529c:	f000 feee 	bl	800607c <xTaskRemoveFromEventList>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00e      	beq.n	80052c4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00b      	beq.n	80052c4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	e007      	b.n	80052c4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80052b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052b8:	3301      	adds	r3, #1
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	b25a      	sxtb	r2, r3
 80052be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80052c4:	2301      	movs	r3, #1
 80052c6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80052c8:	e001      	b.n	80052ce <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80052ca:	2300      	movs	r3, #0
 80052cc:	637b      	str	r3, [r7, #52]	; 0x34
 80052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3738      	adds	r7, #56	; 0x38
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08c      	sub	sp, #48	; 0x30
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80052f0:	2300      	movs	r3, #0
 80052f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80052f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10c      	bne.n	8005318 <xQueueReceive+0x34>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	b672      	cpsid	i
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	b662      	cpsie	i
 8005312:	623b      	str	r3, [r7, #32]
}
 8005314:	bf00      	nop
 8005316:	e7fe      	b.n	8005316 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d103      	bne.n	8005326 <xQueueReceive+0x42>
 800531e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <xQueueReceive+0x46>
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <xQueueReceive+0x48>
 800532a:	2300      	movs	r3, #0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10c      	bne.n	800534a <xQueueReceive+0x66>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005334:	b672      	cpsid	i
 8005336:	f383 8811 	msr	BASEPRI, r3
 800533a:	f3bf 8f6f 	isb	sy
 800533e:	f3bf 8f4f 	dsb	sy
 8005342:	b662      	cpsie	i
 8005344:	61fb      	str	r3, [r7, #28]
}
 8005346:	bf00      	nop
 8005348:	e7fe      	b.n	8005348 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800534a:	f001 f85d 	bl	8006408 <xTaskGetSchedulerState>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d102      	bne.n	800535a <xQueueReceive+0x76>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <xQueueReceive+0x7a>
 800535a:	2301      	movs	r3, #1
 800535c:	e000      	b.n	8005360 <xQueueReceive+0x7c>
 800535e:	2300      	movs	r3, #0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10c      	bne.n	800537e <xQueueReceive+0x9a>
	__asm volatile
 8005364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005368:	b672      	cpsid	i
 800536a:	f383 8811 	msr	BASEPRI, r3
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	b662      	cpsie	i
 8005378:	61bb      	str	r3, [r7, #24]
}
 800537a:	bf00      	nop
 800537c:	e7fe      	b.n	800537c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800537e:	f001 fd8d 	bl	8006e9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005386:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	2b00      	cmp	r3, #0
 800538c:	d01f      	beq.n	80053ce <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800538e:	68b9      	ldr	r1, [r7, #8]
 8005390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005392:	f000 f8f7 	bl	8005584 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	1e5a      	subs	r2, r3, #1
 800539a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00f      	beq.n	80053c6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	3310      	adds	r3, #16
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fe66 	bl	800607c <xTaskRemoveFromEventList>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d007      	beq.n	80053c6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80053b6:	4b3d      	ldr	r3, [pc, #244]	; (80054ac <xQueueReceive+0x1c8>)
 80053b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80053c6:	f001 fd9d 	bl	8006f04 <vPortExitCritical>
				return pdPASS;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e069      	b.n	80054a2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d103      	bne.n	80053dc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053d4:	f001 fd96 	bl	8006f04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053d8:	2300      	movs	r3, #0
 80053da:	e062      	b.n	80054a2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d106      	bne.n	80053f0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053e2:	f107 0310 	add.w	r3, r7, #16
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 feae 	bl	8006148 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053ec:	2301      	movs	r3, #1
 80053ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053f0:	f001 fd88 	bl	8006f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053f4:	f000 fc14 	bl	8005c20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053f8:	f001 fd50 	bl	8006e9c <vPortEnterCritical>
 80053fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005402:	b25b      	sxtb	r3, r3
 8005404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005408:	d103      	bne.n	8005412 <xQueueReceive+0x12e>
 800540a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005418:	b25b      	sxtb	r3, r3
 800541a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541e:	d103      	bne.n	8005428 <xQueueReceive+0x144>
 8005420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005428:	f001 fd6c 	bl	8006f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800542c:	1d3a      	adds	r2, r7, #4
 800542e:	f107 0310 	add.w	r3, r7, #16
 8005432:	4611      	mov	r1, r2
 8005434:	4618      	mov	r0, r3
 8005436:	f000 fe9d 	bl	8006174 <xTaskCheckForTimeOut>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d123      	bne.n	8005488 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005442:	f000 f917 	bl	8005674 <prvIsQueueEmpty>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d017      	beq.n	800547c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800544c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544e:	3324      	adds	r3, #36	; 0x24
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	4611      	mov	r1, r2
 8005454:	4618      	mov	r0, r3
 8005456:	f000 fdbd 	bl	8005fd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800545a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800545c:	f000 f8b8 	bl	80055d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005460:	f000 fbec 	bl	8005c3c <xTaskResumeAll>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d189      	bne.n	800537e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800546a:	4b10      	ldr	r3, [pc, #64]	; (80054ac <xQueueReceive+0x1c8>)
 800546c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	e780      	b.n	800537e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800547c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800547e:	f000 f8a7 	bl	80055d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005482:	f000 fbdb 	bl	8005c3c <xTaskResumeAll>
 8005486:	e77a      	b.n	800537e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800548a:	f000 f8a1 	bl	80055d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800548e:	f000 fbd5 	bl	8005c3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005494:	f000 f8ee 	bl	8005674 <prvIsQueueEmpty>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	f43f af6f 	beq.w	800537e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80054a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3730      	adds	r7, #48	; 0x30
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	e000ed04 	.word	0xe000ed04

080054b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80054bc:	2300      	movs	r3, #0
 80054be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10d      	bne.n	80054ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d14d      	bne.n	8005572 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 ffb2 	bl	8006444 <xTaskPriorityDisinherit>
 80054e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	609a      	str	r2, [r3, #8]
 80054e8:	e043      	b.n	8005572 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d119      	bne.n	8005524 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6858      	ldr	r0, [r3, #4]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f8:	461a      	mov	r2, r3
 80054fa:	68b9      	ldr	r1, [r7, #8]
 80054fc:	f002 f802 	bl	8007504 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005508:	441a      	add	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	429a      	cmp	r2, r3
 8005518:	d32b      	bcc.n	8005572 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	605a      	str	r2, [r3, #4]
 8005522:	e026      	b.n	8005572 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	68d8      	ldr	r0, [r3, #12]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552c:	461a      	mov	r2, r3
 800552e:	68b9      	ldr	r1, [r7, #8]
 8005530:	f001 ffe8 	bl	8007504 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553c:	425b      	negs	r3, r3
 800553e:	441a      	add	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	68da      	ldr	r2, [r3, #12]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	429a      	cmp	r2, r3
 800554e:	d207      	bcs.n	8005560 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005558:	425b      	negs	r3, r3
 800555a:	441a      	add	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b02      	cmp	r3, #2
 8005564:	d105      	bne.n	8005572 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	3b01      	subs	r3, #1
 8005570:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800557a:	697b      	ldr	r3, [r7, #20]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3718      	adds	r7, #24
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	2b00      	cmp	r3, #0
 8005594:	d018      	beq.n	80055c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	441a      	add	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d303      	bcc.n	80055b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68d9      	ldr	r1, [r3, #12]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c0:	461a      	mov	r2, r3
 80055c2:	6838      	ldr	r0, [r7, #0]
 80055c4:	f001 ff9e 	bl	8007504 <memcpy>
	}
}
 80055c8:	bf00      	nop
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80055d8:	f001 fc60 	bl	8006e9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055e4:	e011      	b.n	800560a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d012      	beq.n	8005614 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	3324      	adds	r3, #36	; 0x24
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 fd42 	bl	800607c <xTaskRemoveFromEventList>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80055fe:	f000 fe1f 	bl	8006240 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	3b01      	subs	r3, #1
 8005606:	b2db      	uxtb	r3, r3
 8005608:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800560a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800560e:	2b00      	cmp	r3, #0
 8005610:	dce9      	bgt.n	80055e6 <prvUnlockQueue+0x16>
 8005612:	e000      	b.n	8005616 <prvUnlockQueue+0x46>
					break;
 8005614:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	22ff      	movs	r2, #255	; 0xff
 800561a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800561e:	f001 fc71 	bl	8006f04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005622:	f001 fc3b 	bl	8006e9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800562c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800562e:	e011      	b.n	8005654 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d012      	beq.n	800565e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3310      	adds	r3, #16
 800563c:	4618      	mov	r0, r3
 800563e:	f000 fd1d 	bl	800607c <xTaskRemoveFromEventList>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005648:	f000 fdfa 	bl	8006240 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800564c:	7bbb      	ldrb	r3, [r7, #14]
 800564e:	3b01      	subs	r3, #1
 8005650:	b2db      	uxtb	r3, r3
 8005652:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005654:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005658:	2b00      	cmp	r3, #0
 800565a:	dce9      	bgt.n	8005630 <prvUnlockQueue+0x60>
 800565c:	e000      	b.n	8005660 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800565e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	22ff      	movs	r2, #255	; 0xff
 8005664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005668:	f001 fc4c 	bl	8006f04 <vPortExitCritical>
}
 800566c:	bf00      	nop
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800567c:	f001 fc0e 	bl	8006e9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005684:	2b00      	cmp	r3, #0
 8005686:	d102      	bne.n	800568e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005688:	2301      	movs	r3, #1
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	e001      	b.n	8005692 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800568e:	2300      	movs	r3, #0
 8005690:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005692:	f001 fc37 	bl	8006f04 <vPortExitCritical>

	return xReturn;
 8005696:	68fb      	ldr	r3, [r7, #12]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056a8:	f001 fbf8 	bl	8006e9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d102      	bne.n	80056be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80056b8:	2301      	movs	r3, #1
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	e001      	b.n	80056c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80056be:	2300      	movs	r3, #0
 80056c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056c2:	f001 fc1f 	bl	8006f04 <vPortExitCritical>

	return xReturn;
 80056c6:	68fb      	ldr	r3, [r7, #12]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056da:	2300      	movs	r3, #0
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	e014      	b.n	800570a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80056e0:	4a0f      	ldr	r2, [pc, #60]	; (8005720 <vQueueAddToRegistry+0x50>)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10b      	bne.n	8005704 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80056ec:	490c      	ldr	r1, [pc, #48]	; (8005720 <vQueueAddToRegistry+0x50>)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80056f6:	4a0a      	ldr	r2, [pc, #40]	; (8005720 <vQueueAddToRegistry+0x50>)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	4413      	add	r3, r2
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005702:	e006      	b.n	8005712 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3301      	adds	r3, #1
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b07      	cmp	r3, #7
 800570e:	d9e7      	bls.n	80056e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005710:	bf00      	nop
 8005712:	bf00      	nop
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	20005248 	.word	0x20005248

08005724 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005734:	f001 fbb2 	bl	8006e9c <vPortEnterCritical>
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800573e:	b25b      	sxtb	r3, r3
 8005740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005744:	d103      	bne.n	800574e <vQueueWaitForMessageRestricted+0x2a>
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005754:	b25b      	sxtb	r3, r3
 8005756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575a:	d103      	bne.n	8005764 <vQueueWaitForMessageRestricted+0x40>
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005764:	f001 fbce 	bl	8006f04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576c:	2b00      	cmp	r3, #0
 800576e:	d106      	bne.n	800577e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	3324      	adds	r3, #36	; 0x24
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	68b9      	ldr	r1, [r7, #8]
 8005778:	4618      	mov	r0, r3
 800577a:	f000 fc51 	bl	8006020 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800577e:	6978      	ldr	r0, [r7, #20]
 8005780:	f7ff ff26 	bl	80055d0 <prvUnlockQueue>
	}
 8005784:	bf00      	nop
 8005786:	3718      	adds	r7, #24
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08e      	sub	sp, #56	; 0x38
 8005790:	af04      	add	r7, sp, #16
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800579a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10c      	bne.n	80057ba <xTaskCreateStatic+0x2e>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a4:	b672      	cpsid	i
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	b662      	cpsie	i
 80057b4:	623b      	str	r3, [r7, #32]
}
 80057b6:	bf00      	nop
 80057b8:	e7fe      	b.n	80057b8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80057ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10c      	bne.n	80057da <xTaskCreateStatic+0x4e>
	__asm volatile
 80057c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c4:	b672      	cpsid	i
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	b662      	cpsie	i
 80057d4:	61fb      	str	r3, [r7, #28]
}
 80057d6:	bf00      	nop
 80057d8:	e7fe      	b.n	80057d8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057da:	235c      	movs	r3, #92	; 0x5c
 80057dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	2b5c      	cmp	r3, #92	; 0x5c
 80057e2:	d00c      	beq.n	80057fe <xTaskCreateStatic+0x72>
	__asm volatile
 80057e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e8:	b672      	cpsid	i
 80057ea:	f383 8811 	msr	BASEPRI, r3
 80057ee:	f3bf 8f6f 	isb	sy
 80057f2:	f3bf 8f4f 	dsb	sy
 80057f6:	b662      	cpsie	i
 80057f8:	61bb      	str	r3, [r7, #24]
}
 80057fa:	bf00      	nop
 80057fc:	e7fe      	b.n	80057fc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005802:	2b00      	cmp	r3, #0
 8005804:	d01e      	beq.n	8005844 <xTaskCreateStatic+0xb8>
 8005806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005808:	2b00      	cmp	r3, #0
 800580a:	d01b      	beq.n	8005844 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005814:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	2202      	movs	r2, #2
 800581a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800581e:	2300      	movs	r3, #0
 8005820:	9303      	str	r3, [sp, #12]
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	9302      	str	r3, [sp, #8]
 8005826:	f107 0314 	add.w	r3, r7, #20
 800582a:	9301      	str	r3, [sp, #4]
 800582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	68b9      	ldr	r1, [r7, #8]
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 f850 	bl	80058dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800583c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800583e:	f000 f8df 	bl	8005a00 <prvAddNewTaskToReadyList>
 8005842:	e001      	b.n	8005848 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005844:	2300      	movs	r3, #0
 8005846:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005848:	697b      	ldr	r3, [r7, #20]
	}
 800584a:	4618      	mov	r0, r3
 800584c:	3728      	adds	r7, #40	; 0x28
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005852:	b580      	push	{r7, lr}
 8005854:	b08c      	sub	sp, #48	; 0x30
 8005856:	af04      	add	r7, sp, #16
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	603b      	str	r3, [r7, #0]
 800585e:	4613      	mov	r3, r2
 8005860:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005862:	88fb      	ldrh	r3, [r7, #6]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4618      	mov	r0, r3
 8005868:	f001 fc44 	bl	80070f4 <pvPortMalloc>
 800586c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00e      	beq.n	8005892 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005874:	205c      	movs	r0, #92	; 0x5c
 8005876:	f001 fc3d 	bl	80070f4 <pvPortMalloc>
 800587a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	631a      	str	r2, [r3, #48]	; 0x30
 8005888:	e005      	b.n	8005896 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800588a:	6978      	ldr	r0, [r7, #20]
 800588c:	f001 fcfc 	bl	8007288 <vPortFree>
 8005890:	e001      	b.n	8005896 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005892:	2300      	movs	r3, #0
 8005894:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d017      	beq.n	80058cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058a4:	88fa      	ldrh	r2, [r7, #6]
 80058a6:	2300      	movs	r3, #0
 80058a8:	9303      	str	r3, [sp, #12]
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	9302      	str	r3, [sp, #8]
 80058ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b0:	9301      	str	r3, [sp, #4]
 80058b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	68b9      	ldr	r1, [r7, #8]
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 f80e 	bl	80058dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058c0:	69f8      	ldr	r0, [r7, #28]
 80058c2:	f000 f89d 	bl	8005a00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058c6:	2301      	movs	r3, #1
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	e002      	b.n	80058d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058cc:	f04f 33ff 	mov.w	r3, #4294967295
 80058d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80058d2:	69bb      	ldr	r3, [r7, #24]
	}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3720      	adds	r7, #32
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b088      	sub	sp, #32
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80058ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	461a      	mov	r2, r3
 80058f4:	21a5      	movs	r1, #165	; 0xa5
 80058f6:	f001 fe13 	bl	8007520 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058fe:	6879      	ldr	r1, [r7, #4]
 8005900:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005904:	440b      	add	r3, r1
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	f023 0307 	bic.w	r3, r3, #7
 8005912:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00c      	beq.n	8005938 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005922:	b672      	cpsid	i
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	b662      	cpsie	i
 8005932:	617b      	str	r3, [r7, #20]
}
 8005934:	bf00      	nop
 8005936:	e7fe      	b.n	8005936 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d01f      	beq.n	800597e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800593e:	2300      	movs	r3, #0
 8005940:	61fb      	str	r3, [r7, #28]
 8005942:	e012      	b.n	800596a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	4413      	add	r3, r2
 800594a:	7819      	ldrb	r1, [r3, #0]
 800594c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	4413      	add	r3, r2
 8005952:	3334      	adds	r3, #52	; 0x34
 8005954:	460a      	mov	r2, r1
 8005956:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	4413      	add	r3, r2
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d006      	beq.n	8005972 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	3301      	adds	r3, #1
 8005968:	61fb      	str	r3, [r7, #28]
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	2b0f      	cmp	r3, #15
 800596e:	d9e9      	bls.n	8005944 <prvInitialiseNewTask+0x68>
 8005970:	e000      	b.n	8005974 <prvInitialiseNewTask+0x98>
			{
				break;
 8005972:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800597c:	e003      	b.n	8005986 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005980:	2200      	movs	r2, #0
 8005982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005988:	2b37      	cmp	r3, #55	; 0x37
 800598a:	d901      	bls.n	8005990 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800598c:	2337      	movs	r3, #55	; 0x37
 800598e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005994:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800599a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800599c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599e:	2200      	movs	r2, #0
 80059a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a4:	3304      	adds	r3, #4
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7ff f952 	bl	8004c50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ae:	3318      	adds	r3, #24
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff f94d 	bl	8004c50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80059c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	2200      	movs	r2, #0
 80059d0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	68f9      	ldr	r1, [r7, #12]
 80059de:	69b8      	ldr	r0, [r7, #24]
 80059e0:	f001 f952 	bl	8006c88 <pxPortInitialiseStack>
 80059e4:	4602      	mov	r2, r0
 80059e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059f6:	bf00      	nop
 80059f8:	3720      	adds	r7, #32
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
	...

08005a00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a08:	f001 fa48 	bl	8006e9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a0c:	4b2d      	ldr	r3, [pc, #180]	; (8005ac4 <prvAddNewTaskToReadyList+0xc4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3301      	adds	r3, #1
 8005a12:	4a2c      	ldr	r2, [pc, #176]	; (8005ac4 <prvAddNewTaskToReadyList+0xc4>)
 8005a14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a16:	4b2c      	ldr	r3, [pc, #176]	; (8005ac8 <prvAddNewTaskToReadyList+0xc8>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d109      	bne.n	8005a32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a1e:	4a2a      	ldr	r2, [pc, #168]	; (8005ac8 <prvAddNewTaskToReadyList+0xc8>)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a24:	4b27      	ldr	r3, [pc, #156]	; (8005ac4 <prvAddNewTaskToReadyList+0xc4>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d110      	bne.n	8005a4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a2c:	f000 fc2c 	bl	8006288 <prvInitialiseTaskLists>
 8005a30:	e00d      	b.n	8005a4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a32:	4b26      	ldr	r3, [pc, #152]	; (8005acc <prvAddNewTaskToReadyList+0xcc>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d109      	bne.n	8005a4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a3a:	4b23      	ldr	r3, [pc, #140]	; (8005ac8 <prvAddNewTaskToReadyList+0xc8>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d802      	bhi.n	8005a4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a48:	4a1f      	ldr	r2, [pc, #124]	; (8005ac8 <prvAddNewTaskToReadyList+0xc8>)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a4e:	4b20      	ldr	r3, [pc, #128]	; (8005ad0 <prvAddNewTaskToReadyList+0xd0>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3301      	adds	r3, #1
 8005a54:	4a1e      	ldr	r2, [pc, #120]	; (8005ad0 <prvAddNewTaskToReadyList+0xd0>)
 8005a56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a58:	4b1d      	ldr	r3, [pc, #116]	; (8005ad0 <prvAddNewTaskToReadyList+0xd0>)
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a64:	4b1b      	ldr	r3, [pc, #108]	; (8005ad4 <prvAddNewTaskToReadyList+0xd4>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d903      	bls.n	8005a74 <prvAddNewTaskToReadyList+0x74>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	4a18      	ldr	r2, [pc, #96]	; (8005ad4 <prvAddNewTaskToReadyList+0xd4>)
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a78:	4613      	mov	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4a15      	ldr	r2, [pc, #84]	; (8005ad8 <prvAddNewTaskToReadyList+0xd8>)
 8005a82:	441a      	add	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	3304      	adds	r3, #4
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4610      	mov	r0, r2
 8005a8c:	f7ff f8ed 	bl	8004c6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a90:	f001 fa38 	bl	8006f04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a94:	4b0d      	ldr	r3, [pc, #52]	; (8005acc <prvAddNewTaskToReadyList+0xcc>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00e      	beq.n	8005aba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ac8 <prvAddNewTaskToReadyList+0xc8>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d207      	bcs.n	8005aba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005aaa:	4b0c      	ldr	r3, [pc, #48]	; (8005adc <prvAddNewTaskToReadyList+0xdc>)
 8005aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aba:	bf00      	nop
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	20000be0 	.word	0x20000be0
 8005ac8:	2000070c 	.word	0x2000070c
 8005acc:	20000bec 	.word	0x20000bec
 8005ad0:	20000bfc 	.word	0x20000bfc
 8005ad4:	20000be8 	.word	0x20000be8
 8005ad8:	20000710 	.word	0x20000710
 8005adc:	e000ed04 	.word	0xe000ed04

08005ae0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d019      	beq.n	8005b26 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005af2:	4b14      	ldr	r3, [pc, #80]	; (8005b44 <vTaskDelay+0x64>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00c      	beq.n	8005b14 <vTaskDelay+0x34>
	__asm volatile
 8005afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afe:	b672      	cpsid	i
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	b662      	cpsie	i
 8005b0e:	60bb      	str	r3, [r7, #8]
}
 8005b10:	bf00      	nop
 8005b12:	e7fe      	b.n	8005b12 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005b14:	f000 f884 	bl	8005c20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b18:	2100      	movs	r1, #0
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fd04 	bl	8006528 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b20:	f000 f88c 	bl	8005c3c <xTaskResumeAll>
 8005b24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d107      	bne.n	8005b3c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005b2c:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <vTaskDelay+0x68>)
 8005b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b3c:	bf00      	nop
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	20000c08 	.word	0x20000c08
 8005b48:	e000ed04 	.word	0xe000ed04

08005b4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08a      	sub	sp, #40	; 0x28
 8005b50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b56:	2300      	movs	r3, #0
 8005b58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b5a:	463a      	mov	r2, r7
 8005b5c:	1d39      	adds	r1, r7, #4
 8005b5e:	f107 0308 	add.w	r3, r7, #8
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7ff f820 	bl	8004ba8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b68:	6839      	ldr	r1, [r7, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	9202      	str	r2, [sp, #8]
 8005b70:	9301      	str	r3, [sp, #4]
 8005b72:	2300      	movs	r3, #0
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	2300      	movs	r3, #0
 8005b78:	460a      	mov	r2, r1
 8005b7a:	4923      	ldr	r1, [pc, #140]	; (8005c08 <vTaskStartScheduler+0xbc>)
 8005b7c:	4823      	ldr	r0, [pc, #140]	; (8005c0c <vTaskStartScheduler+0xc0>)
 8005b7e:	f7ff fe05 	bl	800578c <xTaskCreateStatic>
 8005b82:	4603      	mov	r3, r0
 8005b84:	4a22      	ldr	r2, [pc, #136]	; (8005c10 <vTaskStartScheduler+0xc4>)
 8005b86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b88:	4b21      	ldr	r3, [pc, #132]	; (8005c10 <vTaskStartScheduler+0xc4>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b90:	2301      	movs	r3, #1
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	e001      	b.n	8005b9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d102      	bne.n	8005ba6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ba0:	f000 fd16 	bl	80065d0 <xTimerCreateTimerTask>
 8005ba4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d118      	bne.n	8005bde <vTaskStartScheduler+0x92>
	__asm volatile
 8005bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb0:	b672      	cpsid	i
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	b662      	cpsie	i
 8005bc0:	613b      	str	r3, [r7, #16]
}
 8005bc2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005bc4:	4b13      	ldr	r3, [pc, #76]	; (8005c14 <vTaskStartScheduler+0xc8>)
 8005bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005bcc:	4b12      	ldr	r3, [pc, #72]	; (8005c18 <vTaskStartScheduler+0xcc>)
 8005bce:	2201      	movs	r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005bd2:	4b12      	ldr	r3, [pc, #72]	; (8005c1c <vTaskStartScheduler+0xd0>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bd8:	f001 f8e2 	bl	8006da0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bdc:	e010      	b.n	8005c00 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be4:	d10c      	bne.n	8005c00 <vTaskStartScheduler+0xb4>
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bea:	b672      	cpsid	i
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	b662      	cpsie	i
 8005bfa:	60fb      	str	r3, [r7, #12]
}
 8005bfc:	bf00      	nop
 8005bfe:	e7fe      	b.n	8005bfe <vTaskStartScheduler+0xb2>
}
 8005c00:	bf00      	nop
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	08007584 	.word	0x08007584
 8005c0c:	08006259 	.word	0x08006259
 8005c10:	20000c04 	.word	0x20000c04
 8005c14:	20000c00 	.word	0x20000c00
 8005c18:	20000bec 	.word	0x20000bec
 8005c1c:	20000be4 	.word	0x20000be4

08005c20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005c24:	4b04      	ldr	r3, [pc, #16]	; (8005c38 <vTaskSuspendAll+0x18>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	4a03      	ldr	r2, [pc, #12]	; (8005c38 <vTaskSuspendAll+0x18>)
 8005c2c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005c2e:	bf00      	nop
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	20000c08 	.word	0x20000c08

08005c3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c4a:	4b43      	ldr	r3, [pc, #268]	; (8005d58 <xTaskResumeAll+0x11c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10c      	bne.n	8005c6c <xTaskResumeAll+0x30>
	__asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c56:	b672      	cpsid	i
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	b662      	cpsie	i
 8005c66:	603b      	str	r3, [r7, #0]
}
 8005c68:	bf00      	nop
 8005c6a:	e7fe      	b.n	8005c6a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c6c:	f001 f916 	bl	8006e9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c70:	4b39      	ldr	r3, [pc, #228]	; (8005d58 <xTaskResumeAll+0x11c>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	4a38      	ldr	r2, [pc, #224]	; (8005d58 <xTaskResumeAll+0x11c>)
 8005c78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c7a:	4b37      	ldr	r3, [pc, #220]	; (8005d58 <xTaskResumeAll+0x11c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d162      	bne.n	8005d48 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c82:	4b36      	ldr	r3, [pc, #216]	; (8005d5c <xTaskResumeAll+0x120>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d05e      	beq.n	8005d48 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c8a:	e02f      	b.n	8005cec <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c8c:	4b34      	ldr	r3, [pc, #208]	; (8005d60 <xTaskResumeAll+0x124>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3318      	adds	r3, #24
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7ff f843 	bl	8004d24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff f83e 	bl	8004d24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cac:	4b2d      	ldr	r3, [pc, #180]	; (8005d64 <xTaskResumeAll+0x128>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d903      	bls.n	8005cbc <xTaskResumeAll+0x80>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb8:	4a2a      	ldr	r2, [pc, #168]	; (8005d64 <xTaskResumeAll+0x128>)
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4a27      	ldr	r2, [pc, #156]	; (8005d68 <xTaskResumeAll+0x12c>)
 8005cca:	441a      	add	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3304      	adds	r3, #4
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4610      	mov	r0, r2
 8005cd4:	f7fe ffc9 	bl	8004c6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cdc:	4b23      	ldr	r3, [pc, #140]	; (8005d6c <xTaskResumeAll+0x130>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d302      	bcc.n	8005cec <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005ce6:	4b22      	ldr	r3, [pc, #136]	; (8005d70 <xTaskResumeAll+0x134>)
 8005ce8:	2201      	movs	r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cec:	4b1c      	ldr	r3, [pc, #112]	; (8005d60 <xTaskResumeAll+0x124>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1cb      	bne.n	8005c8c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cfa:	f000 fb65 	bl	80063c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005cfe:	4b1d      	ldr	r3, [pc, #116]	; (8005d74 <xTaskResumeAll+0x138>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d010      	beq.n	8005d2c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d0a:	f000 f847 	bl	8005d9c <xTaskIncrementTick>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005d14:	4b16      	ldr	r3, [pc, #88]	; (8005d70 <xTaskResumeAll+0x134>)
 8005d16:	2201      	movs	r2, #1
 8005d18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1f1      	bne.n	8005d0a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005d26:	4b13      	ldr	r3, [pc, #76]	; (8005d74 <xTaskResumeAll+0x138>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d2c:	4b10      	ldr	r3, [pc, #64]	; (8005d70 <xTaskResumeAll+0x134>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d009      	beq.n	8005d48 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d34:	2301      	movs	r3, #1
 8005d36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d38:	4b0f      	ldr	r3, [pc, #60]	; (8005d78 <xTaskResumeAll+0x13c>)
 8005d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d48:	f001 f8dc 	bl	8006f04 <vPortExitCritical>

	return xAlreadyYielded;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	20000c08 	.word	0x20000c08
 8005d5c:	20000be0 	.word	0x20000be0
 8005d60:	20000ba0 	.word	0x20000ba0
 8005d64:	20000be8 	.word	0x20000be8
 8005d68:	20000710 	.word	0x20000710
 8005d6c:	2000070c 	.word	0x2000070c
 8005d70:	20000bf4 	.word	0x20000bf4
 8005d74:	20000bf0 	.word	0x20000bf0
 8005d78:	e000ed04 	.word	0xe000ed04

08005d7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d82:	4b05      	ldr	r3, [pc, #20]	; (8005d98 <xTaskGetTickCount+0x1c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d88:	687b      	ldr	r3, [r7, #4]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	20000be4 	.word	0x20000be4

08005d9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005da2:	2300      	movs	r3, #0
 8005da4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005da6:	4b50      	ldr	r3, [pc, #320]	; (8005ee8 <xTaskIncrementTick+0x14c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f040 808b 	bne.w	8005ec6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005db0:	4b4e      	ldr	r3, [pc, #312]	; (8005eec <xTaskIncrementTick+0x150>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3301      	adds	r3, #1
 8005db6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005db8:	4a4c      	ldr	r2, [pc, #304]	; (8005eec <xTaskIncrementTick+0x150>)
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d122      	bne.n	8005e0a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005dc4:	4b4a      	ldr	r3, [pc, #296]	; (8005ef0 <xTaskIncrementTick+0x154>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00c      	beq.n	8005de8 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	b672      	cpsid	i
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	b662      	cpsie	i
 8005de2:	603b      	str	r3, [r7, #0]
}
 8005de4:	bf00      	nop
 8005de6:	e7fe      	b.n	8005de6 <xTaskIncrementTick+0x4a>
 8005de8:	4b41      	ldr	r3, [pc, #260]	; (8005ef0 <xTaskIncrementTick+0x154>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	60fb      	str	r3, [r7, #12]
 8005dee:	4b41      	ldr	r3, [pc, #260]	; (8005ef4 <xTaskIncrementTick+0x158>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a3f      	ldr	r2, [pc, #252]	; (8005ef0 <xTaskIncrementTick+0x154>)
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	4a3f      	ldr	r2, [pc, #252]	; (8005ef4 <xTaskIncrementTick+0x158>)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6013      	str	r3, [r2, #0]
 8005dfc:	4b3e      	ldr	r3, [pc, #248]	; (8005ef8 <xTaskIncrementTick+0x15c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3301      	adds	r3, #1
 8005e02:	4a3d      	ldr	r2, [pc, #244]	; (8005ef8 <xTaskIncrementTick+0x15c>)
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	f000 fadf 	bl	80063c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e0a:	4b3c      	ldr	r3, [pc, #240]	; (8005efc <xTaskIncrementTick+0x160>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d349      	bcc.n	8005ea8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e14:	4b36      	ldr	r3, [pc, #216]	; (8005ef0 <xTaskIncrementTick+0x154>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d104      	bne.n	8005e28 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e1e:	4b37      	ldr	r3, [pc, #220]	; (8005efc <xTaskIncrementTick+0x160>)
 8005e20:	f04f 32ff 	mov.w	r2, #4294967295
 8005e24:	601a      	str	r2, [r3, #0]
					break;
 8005e26:	e03f      	b.n	8005ea8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e28:	4b31      	ldr	r3, [pc, #196]	; (8005ef0 <xTaskIncrementTick+0x154>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d203      	bcs.n	8005e48 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e40:	4a2e      	ldr	r2, [pc, #184]	; (8005efc <xTaskIncrementTick+0x160>)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e46:	e02f      	b.n	8005ea8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fe ff69 	bl	8004d24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d004      	beq.n	8005e64 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	3318      	adds	r3, #24
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fe ff60 	bl	8004d24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e68:	4b25      	ldr	r3, [pc, #148]	; (8005f00 <xTaskIncrementTick+0x164>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d903      	bls.n	8005e78 <xTaskIncrementTick+0xdc>
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	4a22      	ldr	r2, [pc, #136]	; (8005f00 <xTaskIncrementTick+0x164>)
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4a1f      	ldr	r2, [pc, #124]	; (8005f04 <xTaskIncrementTick+0x168>)
 8005e86:	441a      	add	r2, r3
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4610      	mov	r0, r2
 8005e90:	f7fe feeb 	bl	8004c6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e98:	4b1b      	ldr	r3, [pc, #108]	; (8005f08 <xTaskIncrementTick+0x16c>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d3b8      	bcc.n	8005e14 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ea6:	e7b5      	b.n	8005e14 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ea8:	4b17      	ldr	r3, [pc, #92]	; (8005f08 <xTaskIncrementTick+0x16c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eae:	4915      	ldr	r1, [pc, #84]	; (8005f04 <xTaskIncrementTick+0x168>)
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d907      	bls.n	8005ed0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	e004      	b.n	8005ed0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005ec6:	4b11      	ldr	r3, [pc, #68]	; (8005f0c <xTaskIncrementTick+0x170>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	4a0f      	ldr	r2, [pc, #60]	; (8005f0c <xTaskIncrementTick+0x170>)
 8005ece:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005ed0:	4b0f      	ldr	r3, [pc, #60]	; (8005f10 <xTaskIncrementTick+0x174>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005edc:	697b      	ldr	r3, [r7, #20]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3718      	adds	r7, #24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	20000c08 	.word	0x20000c08
 8005eec:	20000be4 	.word	0x20000be4
 8005ef0:	20000b98 	.word	0x20000b98
 8005ef4:	20000b9c 	.word	0x20000b9c
 8005ef8:	20000bf8 	.word	0x20000bf8
 8005efc:	20000c00 	.word	0x20000c00
 8005f00:	20000be8 	.word	0x20000be8
 8005f04:	20000710 	.word	0x20000710
 8005f08:	2000070c 	.word	0x2000070c
 8005f0c:	20000bf0 	.word	0x20000bf0
 8005f10:	20000bf4 	.word	0x20000bf4

08005f14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f1a:	4b29      	ldr	r3, [pc, #164]	; (8005fc0 <vTaskSwitchContext+0xac>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f22:	4b28      	ldr	r3, [pc, #160]	; (8005fc4 <vTaskSwitchContext+0xb0>)
 8005f24:	2201      	movs	r2, #1
 8005f26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f28:	e043      	b.n	8005fb2 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8005f2a:	4b26      	ldr	r3, [pc, #152]	; (8005fc4 <vTaskSwitchContext+0xb0>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f30:	4b25      	ldr	r3, [pc, #148]	; (8005fc8 <vTaskSwitchContext+0xb4>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	e012      	b.n	8005f5e <vTaskSwitchContext+0x4a>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10c      	bne.n	8005f58 <vTaskSwitchContext+0x44>
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f42:	b672      	cpsid	i
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	b662      	cpsie	i
 8005f52:	607b      	str	r3, [r7, #4]
}
 8005f54:	bf00      	nop
 8005f56:	e7fe      	b.n	8005f56 <vTaskSwitchContext+0x42>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	491b      	ldr	r1, [pc, #108]	; (8005fcc <vTaskSwitchContext+0xb8>)
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	4613      	mov	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	440b      	add	r3, r1
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0e2      	beq.n	8005f38 <vTaskSwitchContext+0x24>
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	4613      	mov	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4a13      	ldr	r2, [pc, #76]	; (8005fcc <vTaskSwitchContext+0xb8>)
 8005f7e:	4413      	add	r3, r2
 8005f80:	60bb      	str	r3, [r7, #8]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	605a      	str	r2, [r3, #4]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	3308      	adds	r3, #8
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d104      	bne.n	8005fa2 <vTaskSwitchContext+0x8e>
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	605a      	str	r2, [r3, #4]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	4a09      	ldr	r2, [pc, #36]	; (8005fd0 <vTaskSwitchContext+0xbc>)
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	4a06      	ldr	r2, [pc, #24]	; (8005fc8 <vTaskSwitchContext+0xb4>)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6013      	str	r3, [r2, #0]
}
 8005fb2:	bf00      	nop
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	20000c08 	.word	0x20000c08
 8005fc4:	20000bf4 	.word	0x20000bf4
 8005fc8:	20000be8 	.word	0x20000be8
 8005fcc:	20000710 	.word	0x20000710
 8005fd0:	2000070c 	.word	0x2000070c

08005fd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10c      	bne.n	8005ffe <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe8:	b672      	cpsid	i
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	b662      	cpsie	i
 8005ff8:	60fb      	str	r3, [r7, #12]
}
 8005ffa:	bf00      	nop
 8005ffc:	e7fe      	b.n	8005ffc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ffe:	4b07      	ldr	r3, [pc, #28]	; (800601c <vTaskPlaceOnEventList+0x48>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3318      	adds	r3, #24
 8006004:	4619      	mov	r1, r3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7fe fe53 	bl	8004cb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800600c:	2101      	movs	r1, #1
 800600e:	6838      	ldr	r0, [r7, #0]
 8006010:	f000 fa8a 	bl	8006528 <prvAddCurrentTaskToDelayedList>
}
 8006014:	bf00      	nop
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	2000070c 	.word	0x2000070c

08006020 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10c      	bne.n	800604c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006036:	b672      	cpsid	i
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	b662      	cpsie	i
 8006046:	617b      	str	r3, [r7, #20]
}
 8006048:	bf00      	nop
 800604a:	e7fe      	b.n	800604a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800604c:	4b0a      	ldr	r3, [pc, #40]	; (8006078 <vTaskPlaceOnEventListRestricted+0x58>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3318      	adds	r3, #24
 8006052:	4619      	mov	r1, r3
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f7fe fe08 	bl	8004c6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d002      	beq.n	8006066 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8006060:	f04f 33ff 	mov.w	r3, #4294967295
 8006064:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	68b8      	ldr	r0, [r7, #8]
 800606a:	f000 fa5d 	bl	8006528 <prvAddCurrentTaskToDelayedList>
	}
 800606e:	bf00      	nop
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	2000070c 	.word	0x2000070c

0800607c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10c      	bne.n	80060ac <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8006092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006096:	b672      	cpsid	i
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	b662      	cpsie	i
 80060a6:	60fb      	str	r3, [r7, #12]
}
 80060a8:	bf00      	nop
 80060aa:	e7fe      	b.n	80060aa <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	3318      	adds	r3, #24
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fe fe37 	bl	8004d24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060b6:	4b1e      	ldr	r3, [pc, #120]	; (8006130 <xTaskRemoveFromEventList+0xb4>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d11d      	bne.n	80060fa <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	3304      	adds	r3, #4
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fe fe2e 	bl	8004d24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060cc:	4b19      	ldr	r3, [pc, #100]	; (8006134 <xTaskRemoveFromEventList+0xb8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d903      	bls.n	80060dc <xTaskRemoveFromEventList+0x60>
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	4a16      	ldr	r2, [pc, #88]	; (8006134 <xTaskRemoveFromEventList+0xb8>)
 80060da:	6013      	str	r3, [r2, #0]
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4a13      	ldr	r2, [pc, #76]	; (8006138 <xTaskRemoveFromEventList+0xbc>)
 80060ea:	441a      	add	r2, r3
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	3304      	adds	r3, #4
 80060f0:	4619      	mov	r1, r3
 80060f2:	4610      	mov	r0, r2
 80060f4:	f7fe fdb9 	bl	8004c6a <vListInsertEnd>
 80060f8:	e005      	b.n	8006106 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	3318      	adds	r3, #24
 80060fe:	4619      	mov	r1, r3
 8006100:	480e      	ldr	r0, [pc, #56]	; (800613c <xTaskRemoveFromEventList+0xc0>)
 8006102:	f7fe fdb2 	bl	8004c6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610a:	4b0d      	ldr	r3, [pc, #52]	; (8006140 <xTaskRemoveFromEventList+0xc4>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006110:	429a      	cmp	r2, r3
 8006112:	d905      	bls.n	8006120 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006114:	2301      	movs	r3, #1
 8006116:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006118:	4b0a      	ldr	r3, [pc, #40]	; (8006144 <xTaskRemoveFromEventList+0xc8>)
 800611a:	2201      	movs	r2, #1
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	e001      	b.n	8006124 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8006120:	2300      	movs	r3, #0
 8006122:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006124:	697b      	ldr	r3, [r7, #20]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	20000c08 	.word	0x20000c08
 8006134:	20000be8 	.word	0x20000be8
 8006138:	20000710 	.word	0x20000710
 800613c:	20000ba0 	.word	0x20000ba0
 8006140:	2000070c 	.word	0x2000070c
 8006144:	20000bf4 	.word	0x20000bf4

08006148 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006150:	4b06      	ldr	r3, [pc, #24]	; (800616c <vTaskInternalSetTimeOutState+0x24>)
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006158:	4b05      	ldr	r3, [pc, #20]	; (8006170 <vTaskInternalSetTimeOutState+0x28>)
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	605a      	str	r2, [r3, #4]
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	20000bf8 	.word	0x20000bf8
 8006170:	20000be4 	.word	0x20000be4

08006174 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b088      	sub	sp, #32
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10c      	bne.n	800619e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	b672      	cpsid	i
 800618a:	f383 8811 	msr	BASEPRI, r3
 800618e:	f3bf 8f6f 	isb	sy
 8006192:	f3bf 8f4f 	dsb	sy
 8006196:	b662      	cpsie	i
 8006198:	613b      	str	r3, [r7, #16]
}
 800619a:	bf00      	nop
 800619c:	e7fe      	b.n	800619c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10c      	bne.n	80061be <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	b672      	cpsid	i
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	b662      	cpsie	i
 80061b8:	60fb      	str	r3, [r7, #12]
}
 80061ba:	bf00      	nop
 80061bc:	e7fe      	b.n	80061bc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80061be:	f000 fe6d 	bl	8006e9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80061c2:	4b1d      	ldr	r3, [pc, #116]	; (8006238 <xTaskCheckForTimeOut+0xc4>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061da:	d102      	bne.n	80061e2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061dc:	2300      	movs	r3, #0
 80061de:	61fb      	str	r3, [r7, #28]
 80061e0:	e023      	b.n	800622a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	4b15      	ldr	r3, [pc, #84]	; (800623c <xTaskCheckForTimeOut+0xc8>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d007      	beq.n	80061fe <xTaskCheckForTimeOut+0x8a>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d302      	bcc.n	80061fe <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80061f8:	2301      	movs	r3, #1
 80061fa:	61fb      	str	r3, [r7, #28]
 80061fc:	e015      	b.n	800622a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	429a      	cmp	r2, r3
 8006206:	d20b      	bcs.n	8006220 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	1ad2      	subs	r2, r2, r3
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7ff ff97 	bl	8006148 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800621a:	2300      	movs	r3, #0
 800621c:	61fb      	str	r3, [r7, #28]
 800621e:	e004      	b.n	800622a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2200      	movs	r2, #0
 8006224:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006226:	2301      	movs	r3, #1
 8006228:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800622a:	f000 fe6b 	bl	8006f04 <vPortExitCritical>

	return xReturn;
 800622e:	69fb      	ldr	r3, [r7, #28]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3720      	adds	r7, #32
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	20000be4 	.word	0x20000be4
 800623c:	20000bf8 	.word	0x20000bf8

08006240 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006240:	b480      	push	{r7}
 8006242:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006244:	4b03      	ldr	r3, [pc, #12]	; (8006254 <vTaskMissedYield+0x14>)
 8006246:	2201      	movs	r2, #1
 8006248:	601a      	str	r2, [r3, #0]
}
 800624a:	bf00      	nop
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	20000bf4 	.word	0x20000bf4

08006258 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006260:	f000 f852 	bl	8006308 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006264:	4b06      	ldr	r3, [pc, #24]	; (8006280 <prvIdleTask+0x28>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d9f9      	bls.n	8006260 <prvIdleTask+0x8>
			{
				taskYIELD();
 800626c:	4b05      	ldr	r3, [pc, #20]	; (8006284 <prvIdleTask+0x2c>)
 800626e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800627c:	e7f0      	b.n	8006260 <prvIdleTask+0x8>
 800627e:	bf00      	nop
 8006280:	20000710 	.word	0x20000710
 8006284:	e000ed04 	.word	0xe000ed04

08006288 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800628e:	2300      	movs	r3, #0
 8006290:	607b      	str	r3, [r7, #4]
 8006292:	e00c      	b.n	80062ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	4613      	mov	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4a12      	ldr	r2, [pc, #72]	; (80062e8 <prvInitialiseTaskLists+0x60>)
 80062a0:	4413      	add	r3, r2
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fe fcb4 	bl	8004c10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	3301      	adds	r3, #1
 80062ac:	607b      	str	r3, [r7, #4]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b37      	cmp	r3, #55	; 0x37
 80062b2:	d9ef      	bls.n	8006294 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062b4:	480d      	ldr	r0, [pc, #52]	; (80062ec <prvInitialiseTaskLists+0x64>)
 80062b6:	f7fe fcab 	bl	8004c10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062ba:	480d      	ldr	r0, [pc, #52]	; (80062f0 <prvInitialiseTaskLists+0x68>)
 80062bc:	f7fe fca8 	bl	8004c10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062c0:	480c      	ldr	r0, [pc, #48]	; (80062f4 <prvInitialiseTaskLists+0x6c>)
 80062c2:	f7fe fca5 	bl	8004c10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062c6:	480c      	ldr	r0, [pc, #48]	; (80062f8 <prvInitialiseTaskLists+0x70>)
 80062c8:	f7fe fca2 	bl	8004c10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062cc:	480b      	ldr	r0, [pc, #44]	; (80062fc <prvInitialiseTaskLists+0x74>)
 80062ce:	f7fe fc9f 	bl	8004c10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062d2:	4b0b      	ldr	r3, [pc, #44]	; (8006300 <prvInitialiseTaskLists+0x78>)
 80062d4:	4a05      	ldr	r2, [pc, #20]	; (80062ec <prvInitialiseTaskLists+0x64>)
 80062d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062d8:	4b0a      	ldr	r3, [pc, #40]	; (8006304 <prvInitialiseTaskLists+0x7c>)
 80062da:	4a05      	ldr	r2, [pc, #20]	; (80062f0 <prvInitialiseTaskLists+0x68>)
 80062dc:	601a      	str	r2, [r3, #0]
}
 80062de:	bf00      	nop
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20000710 	.word	0x20000710
 80062ec:	20000b70 	.word	0x20000b70
 80062f0:	20000b84 	.word	0x20000b84
 80062f4:	20000ba0 	.word	0x20000ba0
 80062f8:	20000bb4 	.word	0x20000bb4
 80062fc:	20000bcc 	.word	0x20000bcc
 8006300:	20000b98 	.word	0x20000b98
 8006304:	20000b9c 	.word	0x20000b9c

08006308 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800630e:	e019      	b.n	8006344 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006310:	f000 fdc4 	bl	8006e9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006314:	4b10      	ldr	r3, [pc, #64]	; (8006358 <prvCheckTasksWaitingTermination+0x50>)
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3304      	adds	r3, #4
 8006320:	4618      	mov	r0, r3
 8006322:	f7fe fcff 	bl	8004d24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006326:	4b0d      	ldr	r3, [pc, #52]	; (800635c <prvCheckTasksWaitingTermination+0x54>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3b01      	subs	r3, #1
 800632c:	4a0b      	ldr	r2, [pc, #44]	; (800635c <prvCheckTasksWaitingTermination+0x54>)
 800632e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006330:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <prvCheckTasksWaitingTermination+0x58>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	3b01      	subs	r3, #1
 8006336:	4a0a      	ldr	r2, [pc, #40]	; (8006360 <prvCheckTasksWaitingTermination+0x58>)
 8006338:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800633a:	f000 fde3 	bl	8006f04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f810 	bl	8006364 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006344:	4b06      	ldr	r3, [pc, #24]	; (8006360 <prvCheckTasksWaitingTermination+0x58>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1e1      	bne.n	8006310 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800634c:	bf00      	nop
 800634e:	bf00      	nop
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	20000bb4 	.word	0x20000bb4
 800635c:	20000be0 	.word	0x20000be0
 8006360:	20000bc8 	.word	0x20000bc8

08006364 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006372:	2b00      	cmp	r3, #0
 8006374:	d108      	bne.n	8006388 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637a:	4618      	mov	r0, r3
 800637c:	f000 ff84 	bl	8007288 <vPortFree>
				vPortFree( pxTCB );
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 ff81 	bl	8007288 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006386:	e01a      	b.n	80063be <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800638e:	2b01      	cmp	r3, #1
 8006390:	d103      	bne.n	800639a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 ff78 	bl	8007288 <vPortFree>
	}
 8006398:	e011      	b.n	80063be <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d00c      	beq.n	80063be <prvDeleteTCB+0x5a>
	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	b672      	cpsid	i
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	b662      	cpsie	i
 80063b8:	60fb      	str	r3, [r7, #12]
}
 80063ba:	bf00      	nop
 80063bc:	e7fe      	b.n	80063bc <prvDeleteTCB+0x58>
	}
 80063be:	bf00      	nop
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
	...

080063c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063ce:	4b0c      	ldr	r3, [pc, #48]	; (8006400 <prvResetNextTaskUnblockTime+0x38>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d104      	bne.n	80063e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063d8:	4b0a      	ldr	r3, [pc, #40]	; (8006404 <prvResetNextTaskUnblockTime+0x3c>)
 80063da:	f04f 32ff 	mov.w	r2, #4294967295
 80063de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063e0:	e008      	b.n	80063f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063e2:	4b07      	ldr	r3, [pc, #28]	; (8006400 <prvResetNextTaskUnblockTime+0x38>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	4a04      	ldr	r2, [pc, #16]	; (8006404 <prvResetNextTaskUnblockTime+0x3c>)
 80063f2:	6013      	str	r3, [r2, #0]
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr
 8006400:	20000b98 	.word	0x20000b98
 8006404:	20000c00 	.word	0x20000c00

08006408 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800640e:	4b0b      	ldr	r3, [pc, #44]	; (800643c <xTaskGetSchedulerState+0x34>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d102      	bne.n	800641c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006416:	2301      	movs	r3, #1
 8006418:	607b      	str	r3, [r7, #4]
 800641a:	e008      	b.n	800642e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800641c:	4b08      	ldr	r3, [pc, #32]	; (8006440 <xTaskGetSchedulerState+0x38>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d102      	bne.n	800642a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006424:	2302      	movs	r3, #2
 8006426:	607b      	str	r3, [r7, #4]
 8006428:	e001      	b.n	800642e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800642a:	2300      	movs	r3, #0
 800642c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800642e:	687b      	ldr	r3, [r7, #4]
	}
 8006430:	4618      	mov	r0, r3
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	20000bec 	.word	0x20000bec
 8006440:	20000c08 	.word	0x20000c08

08006444 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006450:	2300      	movs	r3, #0
 8006452:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d05a      	beq.n	8006510 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800645a:	4b30      	ldr	r3, [pc, #192]	; (800651c <xTaskPriorityDisinherit+0xd8>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	429a      	cmp	r2, r3
 8006462:	d00c      	beq.n	800647e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	b672      	cpsid	i
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	b662      	cpsie	i
 8006478:	60fb      	str	r3, [r7, #12]
}
 800647a:	bf00      	nop
 800647c:	e7fe      	b.n	800647c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10c      	bne.n	80064a0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648a:	b672      	cpsid	i
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	b662      	cpsie	i
 800649a:	60bb      	str	r3, [r7, #8]
}
 800649c:	bf00      	nop
 800649e:	e7fe      	b.n	800649e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a4:	1e5a      	subs	r2, r3, #1
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d02c      	beq.n	8006510 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d128      	bne.n	8006510 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	3304      	adds	r3, #4
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7fe fc2e 	bl	8004d24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e0:	4b0f      	ldr	r3, [pc, #60]	; (8006520 <xTaskPriorityDisinherit+0xdc>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d903      	bls.n	80064f0 <xTaskPriorityDisinherit+0xac>
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ec:	4a0c      	ldr	r2, [pc, #48]	; (8006520 <xTaskPriorityDisinherit+0xdc>)
 80064ee:	6013      	str	r3, [r2, #0]
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f4:	4613      	mov	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4a09      	ldr	r2, [pc, #36]	; (8006524 <xTaskPriorityDisinherit+0xe0>)
 80064fe:	441a      	add	r2, r3
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	3304      	adds	r3, #4
 8006504:	4619      	mov	r1, r3
 8006506:	4610      	mov	r0, r2
 8006508:	f7fe fbaf 	bl	8004c6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800650c:	2301      	movs	r3, #1
 800650e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006510:	697b      	ldr	r3, [r7, #20]
	}
 8006512:	4618      	mov	r0, r3
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	2000070c 	.word	0x2000070c
 8006520:	20000be8 	.word	0x20000be8
 8006524:	20000710 	.word	0x20000710

08006528 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006532:	4b21      	ldr	r3, [pc, #132]	; (80065b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006538:	4b20      	ldr	r3, [pc, #128]	; (80065bc <prvAddCurrentTaskToDelayedList+0x94>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3304      	adds	r3, #4
 800653e:	4618      	mov	r0, r3
 8006540:	f7fe fbf0 	bl	8004d24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654a:	d10a      	bne.n	8006562 <prvAddCurrentTaskToDelayedList+0x3a>
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d007      	beq.n	8006562 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006552:	4b1a      	ldr	r3, [pc, #104]	; (80065bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3304      	adds	r3, #4
 8006558:	4619      	mov	r1, r3
 800655a:	4819      	ldr	r0, [pc, #100]	; (80065c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800655c:	f7fe fb85 	bl	8004c6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006560:	e026      	b.n	80065b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4413      	add	r3, r2
 8006568:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800656a:	4b14      	ldr	r3, [pc, #80]	; (80065bc <prvAddCurrentTaskToDelayedList+0x94>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	429a      	cmp	r2, r3
 8006578:	d209      	bcs.n	800658e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800657a:	4b12      	ldr	r3, [pc, #72]	; (80065c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	4b0f      	ldr	r3, [pc, #60]	; (80065bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3304      	adds	r3, #4
 8006584:	4619      	mov	r1, r3
 8006586:	4610      	mov	r0, r2
 8006588:	f7fe fb93 	bl	8004cb2 <vListInsert>
}
 800658c:	e010      	b.n	80065b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800658e:	4b0e      	ldr	r3, [pc, #56]	; (80065c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	4b0a      	ldr	r3, [pc, #40]	; (80065bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3304      	adds	r3, #4
 8006598:	4619      	mov	r1, r3
 800659a:	4610      	mov	r0, r2
 800659c:	f7fe fb89 	bl	8004cb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065a0:	4b0a      	ldr	r3, [pc, #40]	; (80065cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d202      	bcs.n	80065b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80065aa:	4a08      	ldr	r2, [pc, #32]	; (80065cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	6013      	str	r3, [r2, #0]
}
 80065b0:	bf00      	nop
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	20000be4 	.word	0x20000be4
 80065bc:	2000070c 	.word	0x2000070c
 80065c0:	20000bcc 	.word	0x20000bcc
 80065c4:	20000b9c 	.word	0x20000b9c
 80065c8:	20000b98 	.word	0x20000b98
 80065cc:	20000c00 	.word	0x20000c00

080065d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b08a      	sub	sp, #40	; 0x28
 80065d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80065d6:	2300      	movs	r3, #0
 80065d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80065da:	f000 fb15 	bl	8006c08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80065de:	4b1d      	ldr	r3, [pc, #116]	; (8006654 <xTimerCreateTimerTask+0x84>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d021      	beq.n	800662a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80065ee:	1d3a      	adds	r2, r7, #4
 80065f0:	f107 0108 	add.w	r1, r7, #8
 80065f4:	f107 030c 	add.w	r3, r7, #12
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7fe faef 	bl	8004bdc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80065fe:	6879      	ldr	r1, [r7, #4]
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	9202      	str	r2, [sp, #8]
 8006606:	9301      	str	r3, [sp, #4]
 8006608:	2302      	movs	r3, #2
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	2300      	movs	r3, #0
 800660e:	460a      	mov	r2, r1
 8006610:	4911      	ldr	r1, [pc, #68]	; (8006658 <xTimerCreateTimerTask+0x88>)
 8006612:	4812      	ldr	r0, [pc, #72]	; (800665c <xTimerCreateTimerTask+0x8c>)
 8006614:	f7ff f8ba 	bl	800578c <xTaskCreateStatic>
 8006618:	4603      	mov	r3, r0
 800661a:	4a11      	ldr	r2, [pc, #68]	; (8006660 <xTimerCreateTimerTask+0x90>)
 800661c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800661e:	4b10      	ldr	r3, [pc, #64]	; (8006660 <xTimerCreateTimerTask+0x90>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006626:	2301      	movs	r3, #1
 8006628:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10c      	bne.n	800664a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	b672      	cpsid	i
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	b662      	cpsie	i
 8006644:	613b      	str	r3, [r7, #16]
}
 8006646:	bf00      	nop
 8006648:	e7fe      	b.n	8006648 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800664a:	697b      	ldr	r3, [r7, #20]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3718      	adds	r7, #24
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	20000c3c 	.word	0x20000c3c
 8006658:	0800758c 	.word	0x0800758c
 800665c:	080067a1 	.word	0x080067a1
 8006660:	20000c40 	.word	0x20000c40

08006664 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b08a      	sub	sp, #40	; 0x28
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
 8006670:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006672:	2300      	movs	r3, #0
 8006674:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10c      	bne.n	8006696 <xTimerGenericCommand+0x32>
	__asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006680:	b672      	cpsid	i
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	b662      	cpsie	i
 8006690:	623b      	str	r3, [r7, #32]
}
 8006692:	bf00      	nop
 8006694:	e7fe      	b.n	8006694 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006696:	4b1a      	ldr	r3, [pc, #104]	; (8006700 <xTimerGenericCommand+0x9c>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d02a      	beq.n	80066f4 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2b05      	cmp	r3, #5
 80066ae:	dc18      	bgt.n	80066e2 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80066b0:	f7ff feaa 	bl	8006408 <xTaskGetSchedulerState>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d109      	bne.n	80066ce <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80066ba:	4b11      	ldr	r3, [pc, #68]	; (8006700 <xTimerGenericCommand+0x9c>)
 80066bc:	6818      	ldr	r0, [r3, #0]
 80066be:	f107 0110 	add.w	r1, r7, #16
 80066c2:	2300      	movs	r3, #0
 80066c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c6:	f7fe fc67 	bl	8004f98 <xQueueGenericSend>
 80066ca:	6278      	str	r0, [r7, #36]	; 0x24
 80066cc:	e012      	b.n	80066f4 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80066ce:	4b0c      	ldr	r3, [pc, #48]	; (8006700 <xTimerGenericCommand+0x9c>)
 80066d0:	6818      	ldr	r0, [r3, #0]
 80066d2:	f107 0110 	add.w	r1, r7, #16
 80066d6:	2300      	movs	r3, #0
 80066d8:	2200      	movs	r2, #0
 80066da:	f7fe fc5d 	bl	8004f98 <xQueueGenericSend>
 80066de:	6278      	str	r0, [r7, #36]	; 0x24
 80066e0:	e008      	b.n	80066f4 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80066e2:	4b07      	ldr	r3, [pc, #28]	; (8006700 <xTimerGenericCommand+0x9c>)
 80066e4:	6818      	ldr	r0, [r3, #0]
 80066e6:	f107 0110 	add.w	r1, r7, #16
 80066ea:	2300      	movs	r3, #0
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	f7fe fd59 	bl	80051a4 <xQueueGenericSendFromISR>
 80066f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3728      	adds	r7, #40	; 0x28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	20000c3c 	.word	0x20000c3c

08006704 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b088      	sub	sp, #32
 8006708:	af02      	add	r7, sp, #8
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800670e:	4b23      	ldr	r3, [pc, #140]	; (800679c <prvProcessExpiredTimer+0x98>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	3304      	adds	r3, #4
 800671c:	4618      	mov	r0, r3
 800671e:	f7fe fb01 	bl	8004d24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b00      	cmp	r3, #0
 800672e:	d024      	beq.n	800677a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	699a      	ldr	r2, [r3, #24]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	18d1      	adds	r1, r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	6978      	ldr	r0, [r7, #20]
 800673e:	f000 f8d3 	bl	80068e8 <prvInsertTimerInActiveList>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d021      	beq.n	800678c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006748:	2300      	movs	r3, #0
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	2300      	movs	r3, #0
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	2100      	movs	r1, #0
 8006752:	6978      	ldr	r0, [r7, #20]
 8006754:	f7ff ff86 	bl	8006664 <xTimerGenericCommand>
 8006758:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d115      	bne.n	800678c <prvProcessExpiredTimer+0x88>
	__asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006764:	b672      	cpsid	i
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	b662      	cpsie	i
 8006774:	60fb      	str	r3, [r7, #12]
}
 8006776:	bf00      	nop
 8006778:	e7fe      	b.n	8006778 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006780:	f023 0301 	bic.w	r3, r3, #1
 8006784:	b2da      	uxtb	r2, r3
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	6978      	ldr	r0, [r7, #20]
 8006792:	4798      	blx	r3
}
 8006794:	bf00      	nop
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	20000c34 	.word	0x20000c34

080067a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067a8:	f107 0308 	add.w	r3, r7, #8
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 f857 	bl	8006860 <prvGetNextExpireTime>
 80067b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	4619      	mov	r1, r3
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f000 f803 	bl	80067c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80067be:	f000 f8d5 	bl	800696c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067c2:	e7f1      	b.n	80067a8 <prvTimerTask+0x8>

080067c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80067ce:	f7ff fa27 	bl	8005c20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067d2:	f107 0308 	add.w	r3, r7, #8
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 f866 	bl	80068a8 <prvSampleTimeNow>
 80067dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d130      	bne.n	8006846 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10a      	bne.n	8006800 <prvProcessTimerOrBlockTask+0x3c>
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d806      	bhi.n	8006800 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80067f2:	f7ff fa23 	bl	8005c3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80067f6:	68f9      	ldr	r1, [r7, #12]
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7ff ff83 	bl	8006704 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80067fe:	e024      	b.n	800684a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d008      	beq.n	8006818 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006806:	4b13      	ldr	r3, [pc, #76]	; (8006854 <prvProcessTimerOrBlockTask+0x90>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <prvProcessTimerOrBlockTask+0x50>
 8006810:	2301      	movs	r3, #1
 8006812:	e000      	b.n	8006816 <prvProcessTimerOrBlockTask+0x52>
 8006814:	2300      	movs	r3, #0
 8006816:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006818:	4b0f      	ldr	r3, [pc, #60]	; (8006858 <prvProcessTimerOrBlockTask+0x94>)
 800681a:	6818      	ldr	r0, [r3, #0]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	4619      	mov	r1, r3
 8006826:	f7fe ff7d 	bl	8005724 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800682a:	f7ff fa07 	bl	8005c3c <xTaskResumeAll>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10a      	bne.n	800684a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006834:	4b09      	ldr	r3, [pc, #36]	; (800685c <prvProcessTimerOrBlockTask+0x98>)
 8006836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800683a:	601a      	str	r2, [r3, #0]
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	f3bf 8f6f 	isb	sy
}
 8006844:	e001      	b.n	800684a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006846:	f7ff f9f9 	bl	8005c3c <xTaskResumeAll>
}
 800684a:	bf00      	nop
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	20000c38 	.word	0x20000c38
 8006858:	20000c3c 	.word	0x20000c3c
 800685c:	e000ed04 	.word	0xe000ed04

08006860 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006868:	4b0e      	ldr	r3, [pc, #56]	; (80068a4 <prvGetNextExpireTime+0x44>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <prvGetNextExpireTime+0x16>
 8006872:	2201      	movs	r2, #1
 8006874:	e000      	b.n	8006878 <prvGetNextExpireTime+0x18>
 8006876:	2200      	movs	r2, #0
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d105      	bne.n	8006890 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006884:	4b07      	ldr	r3, [pc, #28]	; (80068a4 <prvGetNextExpireTime+0x44>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	e001      	b.n	8006894 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006894:	68fb      	ldr	r3, [r7, #12]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	20000c34 	.word	0x20000c34

080068a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80068b0:	f7ff fa64 	bl	8005d7c <xTaskGetTickCount>
 80068b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80068b6:	4b0b      	ldr	r3, [pc, #44]	; (80068e4 <prvSampleTimeNow+0x3c>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d205      	bcs.n	80068cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80068c0:	f000 f93c 	bl	8006b3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	e002      	b.n	80068d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80068d2:	4a04      	ldr	r2, [pc, #16]	; (80068e4 <prvSampleTimeNow+0x3c>)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80068d8:	68fb      	ldr	r3, [r7, #12]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20000c44 	.word	0x20000c44

080068e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80068f6:	2300      	movs	r3, #0
 80068f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	429a      	cmp	r2, r3
 800690c:	d812      	bhi.n	8006934 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	1ad2      	subs	r2, r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	429a      	cmp	r2, r3
 800691a:	d302      	bcc.n	8006922 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800691c:	2301      	movs	r3, #1
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	e01b      	b.n	800695a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006922:	4b10      	ldr	r3, [pc, #64]	; (8006964 <prvInsertTimerInActiveList+0x7c>)
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	3304      	adds	r3, #4
 800692a:	4619      	mov	r1, r3
 800692c:	4610      	mov	r0, r2
 800692e:	f7fe f9c0 	bl	8004cb2 <vListInsert>
 8006932:	e012      	b.n	800695a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	429a      	cmp	r2, r3
 800693a:	d206      	bcs.n	800694a <prvInsertTimerInActiveList+0x62>
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	d302      	bcc.n	800694a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006944:	2301      	movs	r3, #1
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	e007      	b.n	800695a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800694a:	4b07      	ldr	r3, [pc, #28]	; (8006968 <prvInsertTimerInActiveList+0x80>)
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3304      	adds	r3, #4
 8006952:	4619      	mov	r1, r3
 8006954:	4610      	mov	r0, r2
 8006956:	f7fe f9ac 	bl	8004cb2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800695a:	697b      	ldr	r3, [r7, #20]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3718      	adds	r7, #24
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	20000c38 	.word	0x20000c38
 8006968:	20000c34 	.word	0x20000c34

0800696c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b08e      	sub	sp, #56	; 0x38
 8006970:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006972:	e0d0      	b.n	8006b16 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	da1a      	bge.n	80069b0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800697a:	1d3b      	adds	r3, r7, #4
 800697c:	3304      	adds	r3, #4
 800697e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10c      	bne.n	80069a0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8006986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698a:	b672      	cpsid	i
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	b662      	cpsie	i
 800699a:	61fb      	str	r3, [r7, #28]
}
 800699c:	bf00      	nop
 800699e:	e7fe      	b.n	800699e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80069a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069a6:	6850      	ldr	r0, [r2, #4]
 80069a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069aa:	6892      	ldr	r2, [r2, #8]
 80069ac:	4611      	mov	r1, r2
 80069ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f2c0 80ae 	blt.w	8006b14 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80069bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d004      	beq.n	80069ce <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c6:	3304      	adds	r3, #4
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fe f9ab 	bl	8004d24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069ce:	463b      	mov	r3, r7
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7ff ff69 	bl	80068a8 <prvSampleTimeNow>
 80069d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2b09      	cmp	r3, #9
 80069dc:	f200 809b 	bhi.w	8006b16 <prvProcessReceivedCommands+0x1aa>
 80069e0:	a201      	add	r2, pc, #4	; (adr r2, 80069e8 <prvProcessReceivedCommands+0x7c>)
 80069e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e6:	bf00      	nop
 80069e8:	08006a11 	.word	0x08006a11
 80069ec:	08006a11 	.word	0x08006a11
 80069f0:	08006a11 	.word	0x08006a11
 80069f4:	08006a89 	.word	0x08006a89
 80069f8:	08006a9d 	.word	0x08006a9d
 80069fc:	08006aeb 	.word	0x08006aeb
 8006a00:	08006a11 	.word	0x08006a11
 8006a04:	08006a11 	.word	0x08006a11
 8006a08:	08006a89 	.word	0x08006a89
 8006a0c:	08006a9d 	.word	0x08006a9d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a16:	f043 0301 	orr.w	r3, r3, #1
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	18d1      	adds	r1, r2, r3
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a30:	f7ff ff5a 	bl	80068e8 <prvInsertTimerInActiveList>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d06d      	beq.n	8006b16 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d062      	beq.n	8006b16 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	441a      	add	r2, r3
 8006a58:	2300      	movs	r3, #0
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	2100      	movs	r1, #0
 8006a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a62:	f7ff fdff 	bl	8006664 <xTimerGenericCommand>
 8006a66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d153      	bne.n	8006b16 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a72:	b672      	cpsid	i
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	b662      	cpsie	i
 8006a82:	61bb      	str	r3, [r7, #24]
}
 8006a84:	bf00      	nop
 8006a86:	e7fe      	b.n	8006a86 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a8e:	f023 0301 	bic.w	r3, r3, #1
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006a9a:	e03c      	b.n	8006b16 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006aa2:	f043 0301 	orr.w	r3, r3, #1
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10c      	bne.n	8006ad6 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	b672      	cpsid	i
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	b662      	cpsie	i
 8006ad0:	617b      	str	r3, [r7, #20]
}
 8006ad2:	bf00      	nop
 8006ad4:	e7fe      	b.n	8006ad4 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad8:	699a      	ldr	r2, [r3, #24]
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	18d1      	adds	r1, r2, r3
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ae4:	f7ff ff00 	bl	80068e8 <prvInsertTimerInActiveList>
					break;
 8006ae8:	e015      	b.n	8006b16 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006af0:	f003 0302 	and.w	r3, r3, #2
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d103      	bne.n	8006b00 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006afa:	f000 fbc5 	bl	8007288 <vPortFree>
 8006afe:	e00a      	b.n	8006b16 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b06:	f023 0301 	bic.w	r3, r3, #1
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b12:	e000      	b.n	8006b16 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006b14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b16:	4b08      	ldr	r3, [pc, #32]	; (8006b38 <prvProcessReceivedCommands+0x1cc>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	1d39      	adds	r1, r7, #4
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7fe fbe0 	bl	80052e4 <xQueueReceive>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f47f af24 	bne.w	8006974 <prvProcessReceivedCommands+0x8>
	}
}
 8006b2c:	bf00      	nop
 8006b2e:	bf00      	nop
 8006b30:	3730      	adds	r7, #48	; 0x30
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20000c3c 	.word	0x20000c3c

08006b3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b088      	sub	sp, #32
 8006b40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b42:	e04a      	b.n	8006bda <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b44:	4b2e      	ldr	r3, [pc, #184]	; (8006c00 <prvSwitchTimerLists+0xc4>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b4e:	4b2c      	ldr	r3, [pc, #176]	; (8006c00 <prvSwitchTimerLists+0xc4>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fe f8e1 	bl	8004d24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b70:	f003 0304 	and.w	r3, r3, #4
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d030      	beq.n	8006bda <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	4413      	add	r3, r2
 8006b80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d90e      	bls.n	8006ba8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b96:	4b1a      	ldr	r3, [pc, #104]	; (8006c00 <prvSwitchTimerLists+0xc4>)
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	f7fe f886 	bl	8004cb2 <vListInsert>
 8006ba6:	e018      	b.n	8006bda <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ba8:	2300      	movs	r3, #0
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	2300      	movs	r3, #0
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f7ff fd56 	bl	8006664 <xTimerGenericCommand>
 8006bb8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10c      	bne.n	8006bda <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	b672      	cpsid	i
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	b662      	cpsie	i
 8006bd4:	603b      	str	r3, [r7, #0]
}
 8006bd6:	bf00      	nop
 8006bd8:	e7fe      	b.n	8006bd8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bda:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <prvSwitchTimerLists+0xc4>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1af      	bne.n	8006b44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006be4:	4b06      	ldr	r3, [pc, #24]	; (8006c00 <prvSwitchTimerLists+0xc4>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006bea:	4b06      	ldr	r3, [pc, #24]	; (8006c04 <prvSwitchTimerLists+0xc8>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a04      	ldr	r2, [pc, #16]	; (8006c00 <prvSwitchTimerLists+0xc4>)
 8006bf0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006bf2:	4a04      	ldr	r2, [pc, #16]	; (8006c04 <prvSwitchTimerLists+0xc8>)
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	6013      	str	r3, [r2, #0]
}
 8006bf8:	bf00      	nop
 8006bfa:	3718      	adds	r7, #24
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	20000c34 	.word	0x20000c34
 8006c04:	20000c38 	.word	0x20000c38

08006c08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006c0e:	f000 f945 	bl	8006e9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006c12:	4b15      	ldr	r3, [pc, #84]	; (8006c68 <prvCheckForValidListAndQueue+0x60>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d120      	bne.n	8006c5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c1a:	4814      	ldr	r0, [pc, #80]	; (8006c6c <prvCheckForValidListAndQueue+0x64>)
 8006c1c:	f7fd fff8 	bl	8004c10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c20:	4813      	ldr	r0, [pc, #76]	; (8006c70 <prvCheckForValidListAndQueue+0x68>)
 8006c22:	f7fd fff5 	bl	8004c10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c26:	4b13      	ldr	r3, [pc, #76]	; (8006c74 <prvCheckForValidListAndQueue+0x6c>)
 8006c28:	4a10      	ldr	r2, [pc, #64]	; (8006c6c <prvCheckForValidListAndQueue+0x64>)
 8006c2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c2c:	4b12      	ldr	r3, [pc, #72]	; (8006c78 <prvCheckForValidListAndQueue+0x70>)
 8006c2e:	4a10      	ldr	r2, [pc, #64]	; (8006c70 <prvCheckForValidListAndQueue+0x68>)
 8006c30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c32:	2300      	movs	r3, #0
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	4b11      	ldr	r3, [pc, #68]	; (8006c7c <prvCheckForValidListAndQueue+0x74>)
 8006c38:	4a11      	ldr	r2, [pc, #68]	; (8006c80 <prvCheckForValidListAndQueue+0x78>)
 8006c3a:	2110      	movs	r1, #16
 8006c3c:	200a      	movs	r0, #10
 8006c3e:	f7fe f905 	bl	8004e4c <xQueueGenericCreateStatic>
 8006c42:	4603      	mov	r3, r0
 8006c44:	4a08      	ldr	r2, [pc, #32]	; (8006c68 <prvCheckForValidListAndQueue+0x60>)
 8006c46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c48:	4b07      	ldr	r3, [pc, #28]	; (8006c68 <prvCheckForValidListAndQueue+0x60>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d005      	beq.n	8006c5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c50:	4b05      	ldr	r3, [pc, #20]	; (8006c68 <prvCheckForValidListAndQueue+0x60>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	490b      	ldr	r1, [pc, #44]	; (8006c84 <prvCheckForValidListAndQueue+0x7c>)
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fe fd3a 	bl	80056d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c5c:	f000 f952 	bl	8006f04 <vPortExitCritical>
}
 8006c60:	bf00      	nop
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20000c3c 	.word	0x20000c3c
 8006c6c:	20000c0c 	.word	0x20000c0c
 8006c70:	20000c20 	.word	0x20000c20
 8006c74:	20000c34 	.word	0x20000c34
 8006c78:	20000c38 	.word	0x20000c38
 8006c7c:	20000ce8 	.word	0x20000ce8
 8006c80:	20000c48 	.word	0x20000c48
 8006c84:	08007594 	.word	0x08007594

08006c88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	3b04      	subs	r3, #4
 8006c98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	3b04      	subs	r3, #4
 8006ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	f023 0201 	bic.w	r2, r3, #1
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	3b04      	subs	r3, #4
 8006cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006cb8:	4a0c      	ldr	r2, [pc, #48]	; (8006cec <pxPortInitialiseStack+0x64>)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	3b14      	subs	r3, #20
 8006cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	3b04      	subs	r3, #4
 8006cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f06f 0202 	mvn.w	r2, #2
 8006cd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	3b20      	subs	r3, #32
 8006cdc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006cde:	68fb      	ldr	r3, [r7, #12]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	08006cf1 	.word	0x08006cf1

08006cf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006cfa:	4b14      	ldr	r3, [pc, #80]	; (8006d4c <prvTaskExitError+0x5c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d02:	d00c      	beq.n	8006d1e <prvTaskExitError+0x2e>
	__asm volatile
 8006d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d08:	b672      	cpsid	i
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	b662      	cpsie	i
 8006d18:	60fb      	str	r3, [r7, #12]
}
 8006d1a:	bf00      	nop
 8006d1c:	e7fe      	b.n	8006d1c <prvTaskExitError+0x2c>
	__asm volatile
 8006d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d22:	b672      	cpsid	i
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	b662      	cpsie	i
 8006d32:	60bb      	str	r3, [r7, #8]
}
 8006d34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d36:	bf00      	nop
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d0fc      	beq.n	8006d38 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d3e:	bf00      	nop
 8006d40:	bf00      	nop
 8006d42:	3714      	adds	r7, #20
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr
 8006d4c:	20000020 	.word	0x20000020

08006d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d50:	4b07      	ldr	r3, [pc, #28]	; (8006d70 <pxCurrentTCBConst2>)
 8006d52:	6819      	ldr	r1, [r3, #0]
 8006d54:	6808      	ldr	r0, [r1, #0]
 8006d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d5a:	f380 8809 	msr	PSP, r0
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f04f 0000 	mov.w	r0, #0
 8006d66:	f380 8811 	msr	BASEPRI, r0
 8006d6a:	4770      	bx	lr
 8006d6c:	f3af 8000 	nop.w

08006d70 <pxCurrentTCBConst2>:
 8006d70:	2000070c 	.word	0x2000070c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop

08006d78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d78:	4808      	ldr	r0, [pc, #32]	; (8006d9c <prvPortStartFirstTask+0x24>)
 8006d7a:	6800      	ldr	r0, [r0, #0]
 8006d7c:	6800      	ldr	r0, [r0, #0]
 8006d7e:	f380 8808 	msr	MSP, r0
 8006d82:	f04f 0000 	mov.w	r0, #0
 8006d86:	f380 8814 	msr	CONTROL, r0
 8006d8a:	b662      	cpsie	i
 8006d8c:	b661      	cpsie	f
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	df00      	svc	0
 8006d98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d9a:	bf00      	nop
 8006d9c:	e000ed08 	.word	0xe000ed08

08006da0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006da6:	4b37      	ldr	r3, [pc, #220]	; (8006e84 <xPortStartScheduler+0xe4>)
 8006da8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	22ff      	movs	r2, #255	; 0xff
 8006db6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006dc0:	78fb      	ldrb	r3, [r7, #3]
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	4b2f      	ldr	r3, [pc, #188]	; (8006e88 <xPortStartScheduler+0xe8>)
 8006dcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006dce:	4b2f      	ldr	r3, [pc, #188]	; (8006e8c <xPortStartScheduler+0xec>)
 8006dd0:	2207      	movs	r2, #7
 8006dd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dd4:	e009      	b.n	8006dea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006dd6:	4b2d      	ldr	r3, [pc, #180]	; (8006e8c <xPortStartScheduler+0xec>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	4a2b      	ldr	r2, [pc, #172]	; (8006e8c <xPortStartScheduler+0xec>)
 8006dde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006de0:	78fb      	ldrb	r3, [r7, #3]
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	005b      	lsls	r3, r3, #1
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dea:	78fb      	ldrb	r3, [r7, #3]
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006df2:	2b80      	cmp	r3, #128	; 0x80
 8006df4:	d0ef      	beq.n	8006dd6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006df6:	4b25      	ldr	r3, [pc, #148]	; (8006e8c <xPortStartScheduler+0xec>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f1c3 0307 	rsb	r3, r3, #7
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	d00c      	beq.n	8006e1c <xPortStartScheduler+0x7c>
	__asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	b672      	cpsid	i
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	b662      	cpsie	i
 8006e16:	60bb      	str	r3, [r7, #8]
}
 8006e18:	bf00      	nop
 8006e1a:	e7fe      	b.n	8006e1a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e1c:	4b1b      	ldr	r3, [pc, #108]	; (8006e8c <xPortStartScheduler+0xec>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	021b      	lsls	r3, r3, #8
 8006e22:	4a1a      	ldr	r2, [pc, #104]	; (8006e8c <xPortStartScheduler+0xec>)
 8006e24:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e26:	4b19      	ldr	r3, [pc, #100]	; (8006e8c <xPortStartScheduler+0xec>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e2e:	4a17      	ldr	r2, [pc, #92]	; (8006e8c <xPortStartScheduler+0xec>)
 8006e30:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	b2da      	uxtb	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e3a:	4b15      	ldr	r3, [pc, #84]	; (8006e90 <xPortStartScheduler+0xf0>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a14      	ldr	r2, [pc, #80]	; (8006e90 <xPortStartScheduler+0xf0>)
 8006e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e44:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e46:	4b12      	ldr	r3, [pc, #72]	; (8006e90 <xPortStartScheduler+0xf0>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a11      	ldr	r2, [pc, #68]	; (8006e90 <xPortStartScheduler+0xf0>)
 8006e4c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e50:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e52:	f000 f8dd 	bl	8007010 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e56:	4b0f      	ldr	r3, [pc, #60]	; (8006e94 <xPortStartScheduler+0xf4>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e5c:	f000 f8fc 	bl	8007058 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e60:	4b0d      	ldr	r3, [pc, #52]	; (8006e98 <xPortStartScheduler+0xf8>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a0c      	ldr	r2, [pc, #48]	; (8006e98 <xPortStartScheduler+0xf8>)
 8006e66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e6a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e6c:	f7ff ff84 	bl	8006d78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e70:	f7ff f850 	bl	8005f14 <vTaskSwitchContext>
	prvTaskExitError();
 8006e74:	f7ff ff3c 	bl	8006cf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	e000e400 	.word	0xe000e400
 8006e88:	20000d38 	.word	0x20000d38
 8006e8c:	20000d3c 	.word	0x20000d3c
 8006e90:	e000ed20 	.word	0xe000ed20
 8006e94:	20000020 	.word	0x20000020
 8006e98:	e000ef34 	.word	0xe000ef34

08006e9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
	__asm volatile
 8006ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea6:	b672      	cpsid	i
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	b662      	cpsie	i
 8006eb6:	607b      	str	r3, [r7, #4]
}
 8006eb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006eba:	4b10      	ldr	r3, [pc, #64]	; (8006efc <vPortEnterCritical+0x60>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	4a0e      	ldr	r2, [pc, #56]	; (8006efc <vPortEnterCritical+0x60>)
 8006ec2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ec4:	4b0d      	ldr	r3, [pc, #52]	; (8006efc <vPortEnterCritical+0x60>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d111      	bne.n	8006ef0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ecc:	4b0c      	ldr	r3, [pc, #48]	; (8006f00 <vPortEnterCritical+0x64>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00c      	beq.n	8006ef0 <vPortEnterCritical+0x54>
	__asm volatile
 8006ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eda:	b672      	cpsid	i
 8006edc:	f383 8811 	msr	BASEPRI, r3
 8006ee0:	f3bf 8f6f 	isb	sy
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	b662      	cpsie	i
 8006eea:	603b      	str	r3, [r7, #0]
}
 8006eec:	bf00      	nop
 8006eee:	e7fe      	b.n	8006eee <vPortEnterCritical+0x52>
	}
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	20000020 	.word	0x20000020
 8006f00:	e000ed04 	.word	0xe000ed04

08006f04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f0a:	4b13      	ldr	r3, [pc, #76]	; (8006f58 <vPortExitCritical+0x54>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10c      	bne.n	8006f2c <vPortExitCritical+0x28>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f16:	b672      	cpsid	i
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	b662      	cpsie	i
 8006f26:	607b      	str	r3, [r7, #4]
}
 8006f28:	bf00      	nop
 8006f2a:	e7fe      	b.n	8006f2a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006f2c:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <vPortExitCritical+0x54>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3b01      	subs	r3, #1
 8006f32:	4a09      	ldr	r2, [pc, #36]	; (8006f58 <vPortExitCritical+0x54>)
 8006f34:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f36:	4b08      	ldr	r3, [pc, #32]	; (8006f58 <vPortExitCritical+0x54>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d105      	bne.n	8006f4a <vPortExitCritical+0x46>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	f383 8811 	msr	BASEPRI, r3
}
 8006f48:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f4a:	bf00      	nop
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	20000020 	.word	0x20000020
 8006f5c:	00000000 	.word	0x00000000

08006f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f60:	f3ef 8009 	mrs	r0, PSP
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	4b15      	ldr	r3, [pc, #84]	; (8006fc0 <pxCurrentTCBConst>)
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	f01e 0f10 	tst.w	lr, #16
 8006f70:	bf08      	it	eq
 8006f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f7a:	6010      	str	r0, [r2, #0]
 8006f7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f84:	b672      	cpsid	i
 8006f86:	f380 8811 	msr	BASEPRI, r0
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	b662      	cpsie	i
 8006f94:	f7fe ffbe 	bl	8005f14 <vTaskSwitchContext>
 8006f98:	f04f 0000 	mov.w	r0, #0
 8006f9c:	f380 8811 	msr	BASEPRI, r0
 8006fa0:	bc09      	pop	{r0, r3}
 8006fa2:	6819      	ldr	r1, [r3, #0]
 8006fa4:	6808      	ldr	r0, [r1, #0]
 8006fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006faa:	f01e 0f10 	tst.w	lr, #16
 8006fae:	bf08      	it	eq
 8006fb0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006fb4:	f380 8809 	msr	PSP, r0
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop

08006fc0 <pxCurrentTCBConst>:
 8006fc0:	2000070c 	.word	0x2000070c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006fc4:	bf00      	nop
 8006fc6:	bf00      	nop

08006fc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd2:	b672      	cpsid	i
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	b662      	cpsie	i
 8006fe2:	607b      	str	r3, [r7, #4]
}
 8006fe4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006fe6:	f7fe fed9 	bl	8005d9c <xTaskIncrementTick>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d003      	beq.n	8006ff8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ff0:	4b06      	ldr	r3, [pc, #24]	; (800700c <SysTick_Handler+0x44>)
 8006ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ff6:	601a      	str	r2, [r3, #0]
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	f383 8811 	msr	BASEPRI, r3
}
 8007002:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007004:	bf00      	nop
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	e000ed04 	.word	0xe000ed04

08007010 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007010:	b480      	push	{r7}
 8007012:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007014:	4b0b      	ldr	r3, [pc, #44]	; (8007044 <vPortSetupTimerInterrupt+0x34>)
 8007016:	2200      	movs	r2, #0
 8007018:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800701a:	4b0b      	ldr	r3, [pc, #44]	; (8007048 <vPortSetupTimerInterrupt+0x38>)
 800701c:	2200      	movs	r2, #0
 800701e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007020:	4b0a      	ldr	r3, [pc, #40]	; (800704c <vPortSetupTimerInterrupt+0x3c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a0a      	ldr	r2, [pc, #40]	; (8007050 <vPortSetupTimerInterrupt+0x40>)
 8007026:	fba2 2303 	umull	r2, r3, r2, r3
 800702a:	099b      	lsrs	r3, r3, #6
 800702c:	4a09      	ldr	r2, [pc, #36]	; (8007054 <vPortSetupTimerInterrupt+0x44>)
 800702e:	3b01      	subs	r3, #1
 8007030:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007032:	4b04      	ldr	r3, [pc, #16]	; (8007044 <vPortSetupTimerInterrupt+0x34>)
 8007034:	2207      	movs	r2, #7
 8007036:	601a      	str	r2, [r3, #0]
}
 8007038:	bf00      	nop
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	e000e010 	.word	0xe000e010
 8007048:	e000e018 	.word	0xe000e018
 800704c:	20000000 	.word	0x20000000
 8007050:	10624dd3 	.word	0x10624dd3
 8007054:	e000e014 	.word	0xe000e014

08007058 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007058:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007068 <vPortEnableVFP+0x10>
 800705c:	6801      	ldr	r1, [r0, #0]
 800705e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007062:	6001      	str	r1, [r0, #0]
 8007064:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007066:	bf00      	nop
 8007068:	e000ed88 	.word	0xe000ed88

0800706c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007072:	f3ef 8305 	mrs	r3, IPSR
 8007076:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b0f      	cmp	r3, #15
 800707c:	d916      	bls.n	80070ac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800707e:	4a19      	ldr	r2, [pc, #100]	; (80070e4 <vPortValidateInterruptPriority+0x78>)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4413      	add	r3, r2
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007088:	4b17      	ldr	r3, [pc, #92]	; (80070e8 <vPortValidateInterruptPriority+0x7c>)
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	7afa      	ldrb	r2, [r7, #11]
 800708e:	429a      	cmp	r2, r3
 8007090:	d20c      	bcs.n	80070ac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	b672      	cpsid	i
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	b662      	cpsie	i
 80070a6:	607b      	str	r3, [r7, #4]
}
 80070a8:	bf00      	nop
 80070aa:	e7fe      	b.n	80070aa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80070ac:	4b0f      	ldr	r3, [pc, #60]	; (80070ec <vPortValidateInterruptPriority+0x80>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80070b4:	4b0e      	ldr	r3, [pc, #56]	; (80070f0 <vPortValidateInterruptPriority+0x84>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d90c      	bls.n	80070d6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c0:	b672      	cpsid	i
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	b662      	cpsie	i
 80070d0:	603b      	str	r3, [r7, #0]
}
 80070d2:	bf00      	nop
 80070d4:	e7fe      	b.n	80070d4 <vPortValidateInterruptPriority+0x68>
	}
 80070d6:	bf00      	nop
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	e000e3f0 	.word	0xe000e3f0
 80070e8:	20000d38 	.word	0x20000d38
 80070ec:	e000ed0c 	.word	0xe000ed0c
 80070f0:	20000d3c 	.word	0x20000d3c

080070f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b08a      	sub	sp, #40	; 0x28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80070fc:	2300      	movs	r3, #0
 80070fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007100:	f7fe fd8e 	bl	8005c20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007104:	4b5b      	ldr	r3, [pc, #364]	; (8007274 <pvPortMalloc+0x180>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800710c:	f000 f91a 	bl	8007344 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007110:	4b59      	ldr	r3, [pc, #356]	; (8007278 <pvPortMalloc+0x184>)
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4013      	ands	r3, r2
 8007118:	2b00      	cmp	r3, #0
 800711a:	f040 8092 	bne.w	8007242 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d01f      	beq.n	8007164 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007124:	2208      	movs	r2, #8
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4413      	add	r3, r2
 800712a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f003 0307 	and.w	r3, r3, #7
 8007132:	2b00      	cmp	r3, #0
 8007134:	d016      	beq.n	8007164 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f023 0307 	bic.w	r3, r3, #7
 800713c:	3308      	adds	r3, #8
 800713e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f003 0307 	and.w	r3, r3, #7
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00c      	beq.n	8007164 <pvPortMalloc+0x70>
	__asm volatile
 800714a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714e:	b672      	cpsid	i
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	b662      	cpsie	i
 800715e:	617b      	str	r3, [r7, #20]
}
 8007160:	bf00      	nop
 8007162:	e7fe      	b.n	8007162 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d06b      	beq.n	8007242 <pvPortMalloc+0x14e>
 800716a:	4b44      	ldr	r3, [pc, #272]	; (800727c <pvPortMalloc+0x188>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	429a      	cmp	r2, r3
 8007172:	d866      	bhi.n	8007242 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007174:	4b42      	ldr	r3, [pc, #264]	; (8007280 <pvPortMalloc+0x18c>)
 8007176:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007178:	4b41      	ldr	r3, [pc, #260]	; (8007280 <pvPortMalloc+0x18c>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800717e:	e004      	b.n	800718a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	429a      	cmp	r2, r3
 8007192:	d903      	bls.n	800719c <pvPortMalloc+0xa8>
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1f1      	bne.n	8007180 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800719c:	4b35      	ldr	r3, [pc, #212]	; (8007274 <pvPortMalloc+0x180>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d04d      	beq.n	8007242 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2208      	movs	r2, #8
 80071ac:	4413      	add	r3, r2
 80071ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	1ad2      	subs	r2, r2, r3
 80071c0:	2308      	movs	r3, #8
 80071c2:	005b      	lsls	r3, r3, #1
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d921      	bls.n	800720c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80071c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4413      	add	r3, r2
 80071ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	f003 0307 	and.w	r3, r3, #7
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00c      	beq.n	80071f4 <pvPortMalloc+0x100>
	__asm volatile
 80071da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071de:	b672      	cpsid	i
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	b662      	cpsie	i
 80071ee:	613b      	str	r3, [r7, #16]
}
 80071f0:	bf00      	nop
 80071f2:	e7fe      	b.n	80071f2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	1ad2      	subs	r2, r2, r3
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007206:	69b8      	ldr	r0, [r7, #24]
 8007208:	f000 f8fe 	bl	8007408 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800720c:	4b1b      	ldr	r3, [pc, #108]	; (800727c <pvPortMalloc+0x188>)
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	4a19      	ldr	r2, [pc, #100]	; (800727c <pvPortMalloc+0x188>)
 8007218:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800721a:	4b18      	ldr	r3, [pc, #96]	; (800727c <pvPortMalloc+0x188>)
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	4b19      	ldr	r3, [pc, #100]	; (8007284 <pvPortMalloc+0x190>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	429a      	cmp	r2, r3
 8007224:	d203      	bcs.n	800722e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007226:	4b15      	ldr	r3, [pc, #84]	; (800727c <pvPortMalloc+0x188>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a16      	ldr	r2, [pc, #88]	; (8007284 <pvPortMalloc+0x190>)
 800722c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	4b11      	ldr	r3, [pc, #68]	; (8007278 <pvPortMalloc+0x184>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	431a      	orrs	r2, r3
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	2200      	movs	r2, #0
 8007240:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007242:	f7fe fcfb 	bl	8005c3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	f003 0307 	and.w	r3, r3, #7
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00c      	beq.n	800726a <pvPortMalloc+0x176>
	__asm volatile
 8007250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007254:	b672      	cpsid	i
 8007256:	f383 8811 	msr	BASEPRI, r3
 800725a:	f3bf 8f6f 	isb	sy
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	b662      	cpsie	i
 8007264:	60fb      	str	r3, [r7, #12]
}
 8007266:	bf00      	nop
 8007268:	e7fe      	b.n	8007268 <pvPortMalloc+0x174>
	return pvReturn;
 800726a:	69fb      	ldr	r3, [r7, #28]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3728      	adds	r7, #40	; 0x28
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	20004948 	.word	0x20004948
 8007278:	20004954 	.word	0x20004954
 800727c:	2000494c 	.word	0x2000494c
 8007280:	20004940 	.word	0x20004940
 8007284:	20004950 	.word	0x20004950

08007288 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b086      	sub	sp, #24
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d04c      	beq.n	8007334 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800729a:	2308      	movs	r3, #8
 800729c:	425b      	negs	r3, r3
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	4413      	add	r3, r2
 80072a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	4b23      	ldr	r3, [pc, #140]	; (800733c <vPortFree+0xb4>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4013      	ands	r3, r2
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10c      	bne.n	80072d0 <vPortFree+0x48>
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ba:	b672      	cpsid	i
 80072bc:	f383 8811 	msr	BASEPRI, r3
 80072c0:	f3bf 8f6f 	isb	sy
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	b662      	cpsie	i
 80072ca:	60fb      	str	r3, [r7, #12]
}
 80072cc:	bf00      	nop
 80072ce:	e7fe      	b.n	80072ce <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00c      	beq.n	80072f2 <vPortFree+0x6a>
	__asm volatile
 80072d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072dc:	b672      	cpsid	i
 80072de:	f383 8811 	msr	BASEPRI, r3
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	f3bf 8f4f 	dsb	sy
 80072ea:	b662      	cpsie	i
 80072ec:	60bb      	str	r3, [r7, #8]
}
 80072ee:	bf00      	nop
 80072f0:	e7fe      	b.n	80072f0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	4b11      	ldr	r3, [pc, #68]	; (800733c <vPortFree+0xb4>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4013      	ands	r3, r2
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d019      	beq.n	8007334 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d115      	bne.n	8007334 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	4b0b      	ldr	r3, [pc, #44]	; (800733c <vPortFree+0xb4>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	43db      	mvns	r3, r3
 8007312:	401a      	ands	r2, r3
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007318:	f7fe fc82 	bl	8005c20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	4b07      	ldr	r3, [pc, #28]	; (8007340 <vPortFree+0xb8>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4413      	add	r3, r2
 8007326:	4a06      	ldr	r2, [pc, #24]	; (8007340 <vPortFree+0xb8>)
 8007328:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800732a:	6938      	ldr	r0, [r7, #16]
 800732c:	f000 f86c 	bl	8007408 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007330:	f7fe fc84 	bl	8005c3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007334:	bf00      	nop
 8007336:	3718      	adds	r7, #24
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	20004954 	.word	0x20004954
 8007340:	2000494c 	.word	0x2000494c

08007344 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800734a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800734e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007350:	4b27      	ldr	r3, [pc, #156]	; (80073f0 <prvHeapInit+0xac>)
 8007352:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f003 0307 	and.w	r3, r3, #7
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00c      	beq.n	8007378 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	3307      	adds	r3, #7
 8007362:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f023 0307 	bic.w	r3, r3, #7
 800736a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	4a1f      	ldr	r2, [pc, #124]	; (80073f0 <prvHeapInit+0xac>)
 8007374:	4413      	add	r3, r2
 8007376:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800737c:	4a1d      	ldr	r2, [pc, #116]	; (80073f4 <prvHeapInit+0xb0>)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007382:	4b1c      	ldr	r3, [pc, #112]	; (80073f4 <prvHeapInit+0xb0>)
 8007384:	2200      	movs	r2, #0
 8007386:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	4413      	add	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007390:	2208      	movs	r2, #8
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	1a9b      	subs	r3, r3, r2
 8007396:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f023 0307 	bic.w	r3, r3, #7
 800739e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4a15      	ldr	r2, [pc, #84]	; (80073f8 <prvHeapInit+0xb4>)
 80073a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80073a6:	4b14      	ldr	r3, [pc, #80]	; (80073f8 <prvHeapInit+0xb4>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2200      	movs	r2, #0
 80073ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80073ae:	4b12      	ldr	r3, [pc, #72]	; (80073f8 <prvHeapInit+0xb4>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	1ad2      	subs	r2, r2, r3
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80073c4:	4b0c      	ldr	r3, [pc, #48]	; (80073f8 <prvHeapInit+0xb4>)
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	4a0a      	ldr	r2, [pc, #40]	; (80073fc <prvHeapInit+0xb8>)
 80073d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	4a09      	ldr	r2, [pc, #36]	; (8007400 <prvHeapInit+0xbc>)
 80073da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80073dc:	4b09      	ldr	r3, [pc, #36]	; (8007404 <prvHeapInit+0xc0>)
 80073de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80073e2:	601a      	str	r2, [r3, #0]
}
 80073e4:	bf00      	nop
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	20000d40 	.word	0x20000d40
 80073f4:	20004940 	.word	0x20004940
 80073f8:	20004948 	.word	0x20004948
 80073fc:	20004950 	.word	0x20004950
 8007400:	2000494c 	.word	0x2000494c
 8007404:	20004954 	.word	0x20004954

08007408 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007410:	4b28      	ldr	r3, [pc, #160]	; (80074b4 <prvInsertBlockIntoFreeList+0xac>)
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	e002      	b.n	800741c <prvInsertBlockIntoFreeList+0x14>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	429a      	cmp	r2, r3
 8007424:	d8f7      	bhi.n	8007416 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	4413      	add	r3, r2
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	429a      	cmp	r2, r3
 8007436:	d108      	bne.n	800744a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	441a      	add	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	441a      	add	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	429a      	cmp	r2, r3
 800745c:	d118      	bne.n	8007490 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	4b15      	ldr	r3, [pc, #84]	; (80074b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	429a      	cmp	r2, r3
 8007468:	d00d      	beq.n	8007486 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	441a      	add	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	e008      	b.n	8007498 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007486:	4b0c      	ldr	r3, [pc, #48]	; (80074b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	e003      	b.n	8007498 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	429a      	cmp	r2, r3
 800749e:	d002      	beq.n	80074a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074a6:	bf00      	nop
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	20004940 	.word	0x20004940
 80074b8:	20004948 	.word	0x20004948

080074bc <__libc_init_array>:
 80074bc:	b570      	push	{r4, r5, r6, lr}
 80074be:	4d0d      	ldr	r5, [pc, #52]	; (80074f4 <__libc_init_array+0x38>)
 80074c0:	4c0d      	ldr	r4, [pc, #52]	; (80074f8 <__libc_init_array+0x3c>)
 80074c2:	1b64      	subs	r4, r4, r5
 80074c4:	10a4      	asrs	r4, r4, #2
 80074c6:	2600      	movs	r6, #0
 80074c8:	42a6      	cmp	r6, r4
 80074ca:	d109      	bne.n	80074e0 <__libc_init_array+0x24>
 80074cc:	4d0b      	ldr	r5, [pc, #44]	; (80074fc <__libc_init_array+0x40>)
 80074ce:	4c0c      	ldr	r4, [pc, #48]	; (8007500 <__libc_init_array+0x44>)
 80074d0:	f000 f82e 	bl	8007530 <_init>
 80074d4:	1b64      	subs	r4, r4, r5
 80074d6:	10a4      	asrs	r4, r4, #2
 80074d8:	2600      	movs	r6, #0
 80074da:	42a6      	cmp	r6, r4
 80074dc:	d105      	bne.n	80074ea <__libc_init_array+0x2e>
 80074de:	bd70      	pop	{r4, r5, r6, pc}
 80074e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074e4:	4798      	blx	r3
 80074e6:	3601      	adds	r6, #1
 80074e8:	e7ee      	b.n	80074c8 <__libc_init_array+0xc>
 80074ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80074ee:	4798      	blx	r3
 80074f0:	3601      	adds	r6, #1
 80074f2:	e7f2      	b.n	80074da <__libc_init_array+0x1e>
 80074f4:	08007670 	.word	0x08007670
 80074f8:	08007670 	.word	0x08007670
 80074fc:	08007670 	.word	0x08007670
 8007500:	08007674 	.word	0x08007674

08007504 <memcpy>:
 8007504:	440a      	add	r2, r1
 8007506:	4291      	cmp	r1, r2
 8007508:	f100 33ff 	add.w	r3, r0, #4294967295
 800750c:	d100      	bne.n	8007510 <memcpy+0xc>
 800750e:	4770      	bx	lr
 8007510:	b510      	push	{r4, lr}
 8007512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007516:	f803 4f01 	strb.w	r4, [r3, #1]!
 800751a:	4291      	cmp	r1, r2
 800751c:	d1f9      	bne.n	8007512 <memcpy+0xe>
 800751e:	bd10      	pop	{r4, pc}

08007520 <memset>:
 8007520:	4402      	add	r2, r0
 8007522:	4603      	mov	r3, r0
 8007524:	4293      	cmp	r3, r2
 8007526:	d100      	bne.n	800752a <memset+0xa>
 8007528:	4770      	bx	lr
 800752a:	f803 1b01 	strb.w	r1, [r3], #1
 800752e:	e7f9      	b.n	8007524 <memset+0x4>

08007530 <_init>:
 8007530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007532:	bf00      	nop
 8007534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007536:	bc08      	pop	{r3}
 8007538:	469e      	mov	lr, r3
 800753a:	4770      	bx	lr

0800753c <_fini>:
 800753c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753e:	bf00      	nop
 8007540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007542:	bc08      	pop	{r3}
 8007544:	469e      	mov	lr, r3
 8007546:	4770      	bx	lr
